# -------------------------------------------------------------------------------
# Name:        test_vehiclewarning.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-15 11:47
# -------------------------------------------------------------------------------
import pytest
from time import sleep
from src.codes.context import *


########################################################################################################################
#                                                                                                                      #
#                                                    创建Suite                                                          #
#                                           s                                                                           #
########################################################################################################################
@pytest.fixture(scope="class", autouse=True)
@allure.suite("创建vehicleWarning测试套件")
def suite():
    with allure.step("打开CAN盒子"):
        open_device()
        sleep(10)
    yield suite
    with allure.step("关闭CAN盒子"):
        close_device()


########################################################################################################################
#                                                                                                                      #
#                                                    创建Function                                                       #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="function", autouse=True)
def function():
    with allure.step("无"):
        pass
    yield
    with allure.step("无"):
        pass


########################################################################################################################
#                                                                                                                      #
#                                                    创建测试用例                                                        #
#                                                                                                                      #
########################################################################################################################
@allure.feature("module")
@pytest.mark.usefixtures("suite")
class TestVehicleWarning(object):

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源充电状态错误（ACC）")
    def test_b12vpower_charging_sts_light_open1_acc(self):
        """
        Description:
            12V电源充电状态错误（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x0
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.设置电源充电错误状态为：VCU_12VBattChrgFlt=0x1
        Expect Result:
            1.电源状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_12vbattchrgflt_sts_correct()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_12vbattchrgflt_sts_error()
            b12vpower_charging_sts_light_open1_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_open1_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源低电量警告（ACC）")
    def test_b12vpower_charging_sts_light_open2_acc(self):
        """
        Description:
            12V电源低电量警告（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x0
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.电源低电量警告为：iBCM_12VBattCpLowWarn=0x1
        Expect Result:
            1.电源状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_12vbattchrgflt_sts_correct()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_12vbattcplowwarn_sts_warning()
            b12vpower_charging_sts_light_open2_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_open2_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源充电状态正常（ACC）")
    def test_b12vpower_charging_sts_light_close_acc(self):
        """
        Description:
            12V电源充电状态正常（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x1
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.设置电源充电错误状态为：VCU_12VBattChrgFlt=0x0
        Expect Result:
            1.电源状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_12vbattchrgflt_sts_error()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_12vbattchrgflt_sts_correct()
            b12vpower_charging_sts_light_close_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_close_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源充电状态错误（IGN）")
    def test_b12vpower_charging_sts_light_open1_ign(self):
        """
        Description:
            12V电源充电状态错误（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x0
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.设置电源充电错误状态为：VCU_12VBattChrgFlt=0x1
        Expect Result:
            1.电源状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_12vbattchrgflt_sts_correct()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_12vbattchrgflt_sts_error()
            b12vpower_charging_sts_light_open1_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_open1_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源低电量警告（IGN）")
    def test_b12vpower_charging_sts_light_open2_ign(self):
        """
        Description:
            12V电源低电量警告（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x0
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.电源低电量警告为：iBCM_12VBattCpLowWarn=0x1
        Expect Result:
            1.电源状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_12vbattchrgflt_sts_correct()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_12vbattcplowwarn_sts_warning()
            b12vpower_charging_sts_light_open2_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_open2_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("12V电源充电状态正常（IGN）")
    def test_b12vpower_charging_sts_light_close_ign(self):
        """
        Description:
            12V电源充电状态正常（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置电源充电错误状态：VCU_12VBattChrgFlt=0x1
            3.设置电源低电量警告：iBCM_12VBattCpLowWarn=0x0
        Steps:
            1.设置电源充电错误状态为：VCU_12VBattChrgFlt=0x0
        Expect Result:
            1.电源状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_12vbattchrgflt_sts_error()
            ibcm_12vbattcplowwarn_no_warning()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_12vbattchrgflt_sts_correct()
            b12vpower_charging_sts_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_b12vpower_charging_sts_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("系统故障灯亮")
    def test_vcu_ptfltindcr_sts_light_open_ign(self):
        """
        Description:
            系统故障灯亮
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统故障状态：VCU_PtFltIndcr=0x0
        Steps:
            1.设置动力系统故障状态：VCU_PtFltIndcr=0x1
        Expect Result:
            1.动力系统故障指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptfltindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptfltindcr_lists_open()
            vcu_ptfltindcr_sts_light_open_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptfltindcr_sts_light_open_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("系统故障灯灭")
    def test_vcu_ptfltindcr_sts_light_close_ign(self):
        """
        Description:
            系统故障灯灭
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统故障状态：VCU_PtFltIndcr=0x1
        Steps:
            1.设置动力系统故障状态：VCU_PtFltIndcr=0x0
        Expect Result:
            1.动力系统故障指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptfltindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptfltindcr_lists_close()
            vcu_ptfltindcr_sts_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptfltindcr_sts_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯亮（OFF）")
    def test_vcu_chrgstsindcr_light_open_off(self):
        """
        Description:
            动力蓄电池充电故障灯亮（OFF）
        PreCondition:
            1.电源状态：OFF
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Expect Result:
            1.动力蓄电池充电状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            vcu_chrgstsindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_open()
            vcu_chrgstsindcr_light_open_off()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_open_off())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯灭（OFF）")
    def test_vcu_chrgstsindcr_light_close_off(self):
        """
        Description:
            动力蓄电池充电故障灯灭（OFF）
        PreCondition:
            1.电源状态：OFF
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Expect Result:
            1.动力蓄电池充电状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            vcu_chrgstsindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_close()
            vcu_chrgstsindcr_light_close_off()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_close_off())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯亮（ACC）")
    def test_vcu_chrgstsindcr_light_open_acc(self):
        """
        Description:
            动力蓄电池充电故障灯亮（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Expect Result:
            1.动力蓄电池充电状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_chrgstsindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_open()
            vcu_chrgstsindcr_light_open_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_open_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯灭（ACC）")
    def test_vcu_chrgstsindcr_light_close_acc(self):
        """
        Description:
            动力蓄电池充电故障灯灭（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Expect Result:
            1.动力蓄电池充电状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_chrgstsindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_close()
            vcu_chrgstsindcr_light_close_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_close_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯亮（IGN）")
    def test_vcu_chrgstsindcr_light_open_ign(self):
        """
        Description:
            动力蓄电池充电故障灯亮（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Expect Result:
            1.动力蓄电池充电状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_chrgstsindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_open()
            vcu_chrgstsindcr_light_open_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_open_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池充电故障灯灭（IGN）")
    def test_vcu_chrgstsindcr_light_close_ign(self):
        """
        Description:
            动力蓄电池充电故障灯灭（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x1
        Steps:
            1.设置动力蓄电池充电状态：VCU_ChrgStsIndcr=0x0
        Expect Result:
            1.动力蓄电池充电状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_chrgstsindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgstsindcr_lists_close()
            vcu_chrgstsindcr_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgstsindcr_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标亮（OFF）")
    def test_vcu_chrgconnectindcr_light_open_pwroff(self):
        """
        Description:
            充电线连接图标亮（OFF）
        PreCondition:
            1.电源状态：OFF
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Steps:
            1.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Expect Result:
            1.充电线连接状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            vcu_chrgconnectindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_open()
            vcu_chrgconnectindcr_light_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标灭（OFF）")
    def test_vcu_chrgconnectindcr_light_close_pwrofff(self):
        """
        Description:
            充电线连接图标灭（OFF）
        PreCondition:
            1.电源状态：OFF
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Steps:
            1..设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Expect Result:
            1.充电线连接状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            vcu_chrgconnectindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_close()
            vcu_chrgconnectindcr_light_close_pwrofff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_close_pwrofff())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标亮（ACC）")
    def test_vcu_chrgconnectindcr_light_open_pwracc(self):
        """
        Description:
            充电线连接图标亮（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Steps:
            1.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Expect Result:
            1.充电线连接状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_chrgconnectindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_open()
            vcu_chrgconnectindcr_light_open_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_open_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标灭（ACC）")
    def test_vcu_chrgconnectindcr_light_close_pwracc(self):
        """
        Description:
            充电线连接图标灭（ACC）
        PreCondition:
            1.电源状态：ACC
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Steps:
            1..设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Expect Result:
            1.充电线连接状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            vcu_chrgconnectindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_close()
            vcu_chrgconnectindcr_light_close_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_close_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标亮（IGN）")
    def test_vcu_chrgconnectindcr_light_open_pwrign(self):
        """
        Description:
            充电线连接图标亮（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Steps:
            1.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Expect Result:
            1.充电线连接状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_chrgconnectindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_open()
            vcu_chrgconnectindcr_light_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("充电线连接图标灭（IGN）")
    def test_vcu_chrgconnectindcr_light_closle_pwrign(self):
        """
        Description:
            充电线连接图标灭（IGN）
        PreCondition:
            1.电源状态：IGN
            2.设置充电线连接状态：VCU_ChrgConnectIndcr=0x1
        Steps:
            1..设置充电线连接状态：VCU_ChrgConnectIndcr=0x0
        Expect Result:
            1.充电线连接状态指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_chrgconnectindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_chrgconnectindcr_lists_close()
            vcu_chrgconnectindcr_light_closle_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_chrgconnectindcr_light_closle_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("电机超速报警x1")
    def test_mcu_motoverspdwarn_frnt_light_open1_ign(self):
        """
        Description:
            电机超速报警x1
        PreCondition:
            1.电源状态：IGN
            2.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x0
        Steps:
            1.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x1
        Expect Result:
            1.电机超速报警指示灯亮x1
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mcu_motoverspdwarn_frnt_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            mcu_motoverspdwarn_frnt_lists_open()
            mcu_motoverspdwarn_frnt_light_open1_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mcu_motoverspdwarn_frnt_light_open1_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("电机超速报警x2")
    def test_mcu_motoverspdwarn_frnt_light_open2_ign(self):
        """
        Description:
            电机超速报警x2
        PreCondition:
            1.电源状态：IGN
            2.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x0
        Steps:
            1.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x2
        Expect Result:
            1.电机超速报警指示灯亮x2
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mcu_motoverspdwarn_frnt_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            mcu_motoverspdwarn_frnt_lists_open2()
            mcu_motoverspdwarn_frnt_light_open2_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mcu_motoverspdwarn_frnt_light_open2_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("电机超速报警x0")
    def test_mcu_motoverspdwarn_frnt_light_close_ign(self):
        """
        Description:
            电机超速报警x0
        PreCondition:
            1.电源状态：IGN
            2.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x1
        Steps:
            1.设置电机超速报警状态：MCU_MotOverSpdWarn_Frnt=0x0
        Expect Result:
            1.电机超速报警指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mcu_motoverspdwarn_frnt_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            mcu_motoverspdwarn_frnt_lists_close()
            mcu_motoverspdwarn_frnt_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mcu_motoverspdwarn_frnt_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("驱动功率受限x1")
    def test_vcu_turtlelampon_light_open_ign(self):
        """
        Description:
            驱动功率受限x1
        PreCondition:
            1.电源状态：IGN
            2.设置驱动功率受限状态：VCU_TurtleLampOn=0x0
        Steps:
            1.设置驱动功率受限状态：VCU_TurtleLampOn=0x1
        Expect Result:
            1.驱动功率受限指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_turtlelampon_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_turtlelampon_lists_open()
            vcu_turtlelampon_light_open_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_turtlelampon_light_open_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("驱动功率受限x0")
    def test_vcu_turtlelampon_light_close_ign(self):
        """
        Description:
            驱动功率受限x0
        PreCondition:
            1.电源状态：IGN
            2.设置驱动功率受限状态：VCU_TurtleLampOn=0x1
        Steps:
            1.设置驱动功率受限状态：VCU_TurtleLampOn=0x0
        Expect Result:
            1.驱动功率受限指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_turtlelampon_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_turtlelampon_lists_close()
            vcu_turtlelampon_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_turtlelampon_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池切断图标亮")
    def test_vcu_pwrbatthvcutoffindcr_light_open_ign(self):
        """
        Description:
            动力蓄电池切断图标亮
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池高压切断状态：VCU_PwrBattHVCutOffIndcr=0x0
        Steps:
            1.设置动力蓄电池高压切断状态：VCU_PwrBattHVCutOffIndcr=0x1
        Expect Result:
            1.动力蓄电池高压切断指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_pwrbatthvcutoffindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_pwrbatthvcutoffindcr_lists_open()
            vcu_pwrbatthvcutoffindcr_light_open_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_pwrbatthvcutoffindcr_light_open_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力蓄电池切断图标灭")
    def test_vcu_pwrbatthvcutoffindcr_light_close_ign(self):
        """
        Description:
            动力蓄电池切断图标灭
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池高压切断状态：VCU_PwrBattHVCutOffIndcr=0x1
        Steps:
            1.设置动力蓄电池高压切断状态：VCU_PwrBattHVCutOffIndcr=0x0
        Expect Result:
            1.动力蓄电池高压切断指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_pwrbatthvcutoffindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_pwrbatthvcutoffindcr_lists_close()
            vcu_pwrbatthvcutoffindcr_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_pwrbatthvcutoffindcr_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力电池故障图标亮")
    def test_vcu_pwrbattfltindcr_light_open_ign(self):
        """
        Description:
            动力电池故障图标亮
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池故障状态：VCU_PwrBattFltIndcr=0x0
        Steps:
            1.设置动力蓄电池故障状态：VCU_PwrBattFltIndcr=0x1
        Expect Result:
            1.动力蓄电池故障指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_pwrbattfltindcr_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_pwrbattfltindcr_lists_open()
            vcu_pwrbattfltindcr_light_open_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_pwrbattfltindcr_light_open_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力电池故障图标灭")
    def test_vcu_pwrbattfltindcr_light_close_ign(self):
        """
        Description:
            动力电池故障图标灭
        PreCondition:
            1.电源状态：IGN
            2.设置动力蓄电池故障状态：VCU_PwrBattFltIndcr=0x1
        Steps:
            1.设置动力蓄电池故障状态：VCU_PwrBattFltIndcr=0x0
        Expect Result:
            1.动力蓄电池故障指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_pwrbattfltindcr_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_pwrbattfltindcr_lists_close()
            vcu_pwrbattfltindcr_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_pwrbattfltindcr_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航待命x1+白色图标")
    def test_ccmod_standby_ign1(self):
        """
        Description:
            定速巡航待命x1+白色图标
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
        Steps:
            1.定速巡航Standby：
            VCU_CCModSts=0x1
        Expect Result:
            1.显示白色定速巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_standby()
            ccmod_standby_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_standby_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航待命x1+巡航车速")
    def test_ccmod_standby_ign2(self):
        """
        Description:
            定速巡航待命x1+巡航车速
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
        Steps:
            1.定速巡航Standby：
            VCU_CCModSts=0x1
            VCU_CCTarSpd=80
        Expect Result:
            1.显示白色定速巡航图标和目标车速
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_standby()
            vcu_cctarspd_80()
            ccmod_standby_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_standby_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航激活x2+绿色图标")
    def test_ccmod_active_ign3(self):
        """
        Description:
            定速巡航激活x2+绿色图标
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
            3.巡航车速为0
        Steps:
            1.定速巡航Active：
            VCU_CCModSts=0x2
        Expect Result:
            1.显示绿色定速巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
            vcu_cctarspd_0()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_active()
            ccmod_active_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_active_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航激活x2+隐藏图标")
    def test_ccmod_active_off(self):
        """
        Description:
            定速巡航激活x2+隐藏图标
        PreCondition:
            1.电源状态：IGN
            2.定速巡航已激活
        Steps:
            1.定速巡航off：
            VCU_CCModSts=0x0
        Expect Result:
            1.隐藏绿色定速巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_active()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_off()
            ccmod_active_off()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_active_off())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航激活x2+巡航车速")
    def test_ccmod_active_ign4(self):
        """
        Description:
            定速巡航激活x2+巡航车速
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
            3.巡航车速为0
        Steps:
            1.定速巡航Active：
            VCU_CCModSts=0x2
            VCU_CCTarSpd=80km/h
        Expect Result:
            1.显示绿色定速巡航图标和目标车速
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
            vcu_cctarspd_0()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_active()
            vcu_cctarspd_80()
            ccmod_active_ign4()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_active_ign4())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航取消x3+白色图标")
    def test_ccmod_cancel_ign5(self):
        """
        Description:
            定速巡航取消x3+白色图标
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
            3.巡航车速为0
        Steps:
            1.定速巡航Cancel：
            VCU_CCModSts=0x3
        Expect Result:
            1.显示白色定速巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
            vcu_cctarspd_0()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_cancel()
            ccmod_cancel_ign5()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_cancel_ign5())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航取消x3+巡航车速")
    def test_ccmod_cancel_ign6(self):
        """
        Description:
            定速巡航取消x3+巡航车速
        PreCondition:
            1.电源状态：IGN
            2.定速巡航关闭
            3.巡航车速为0
        Steps:
            1.定速巡航Cancel：
            VCU_CCModSts=0x3
            VCU_CCTarSpd=80km/h
        Expect Result:
            1.显示白色定速巡航图标和目标车速
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_off()
            vcu_cctarspd_0()
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_cancel()
            vcu_cctarspd_80()
            ccmod_cancel_ign6()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_cancel_ign6())

    @pytest.mark.usefixtures("function")
    @allure.title("定速巡航待命x1+隐藏图标")
    def test_ccmod_standby_acc(self):
        """
        Description:
            定速巡航待命x1+隐藏图标
        PreCondition:
            1.电源状态：IGN
            2.定速巡航Standby
        Steps:
            1.定速巡航off：
            VCU_CCModSts=0x0
        Expect Result:
            1.隐藏白色定速巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ccmodsts_standby()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ccmodsts_off()
            ccmod_standby_acc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ccmod_standby_acc())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航待命x2")
    def test_accmod_standby_ign2(self):
        """
        Description:
            自适应巡航待命x2
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航关闭
        Steps:
            1.自适应巡航StandBy：
            FRM_ACCMod=0x2
        Expect Result:
            1.显示白色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_standby()
            accmod_standby_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_standby_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航待命x1")
    def test_accmod_passive(self):
        """
        Description:
            自适应巡航待命x1
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航待命
        Steps:
            1.自适应巡航Passive：
            FRM_ACCMod=0x1
        Expect Result:
            1.隐藏白色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_standby()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_passive()
            accmod_passive()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_passive())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航激活x3")
    def test_accmod_active_ign3(self):
        """
        Description:
            自适应巡航激活x3
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航关闭
        Steps:
            1.自适应巡航Active：
            FRM_ACCMod=0x3
        Expect Result:
            1.显示绿色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_active()
            accmod_active_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_active_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航超控X4")
    def test_accmod_override_ign4(self):
        """
        Description:
            自适应巡航超控X4
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航关闭
        Steps:
            1.自适应巡航Override：
            FRM_ACCMod=0x4
        Expect Result:
            1.显示绿色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_override()
            accmod_override_ign4()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_override_ign4())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航仅刹车X5")
    def test_accmod_brakeonly_ign5(self):
        """
        Description:
            自适应巡航仅刹车X5
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航关闭
        Steps:
            1.自适应巡航BrakeOnly：
            FRM_ACCMod=0x5
        Expect Result:
            1.显示绿色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_brakeonly()
            accmod_brakeonly_ign5()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_brakeonly_ign5())

    @pytest.mark.usefixtures("function")
    @allure.title("隐藏绿色自适应巡航图标")
    def test_accmod_brakeonly_dark(self):
        """
        Description:
            隐藏绿色自适应巡航图标
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航BrakrOnly
        Steps:
            1.自适应巡航off：
            FRM_ACCMod=0x0
        Expect Result:
            1.隐藏绿色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_brakeonly()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_off()
            accmod_brakeonly_dark()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_brakeonly_dark())

    @pytest.mark.usefixtures("function")
    @allure.title("自适应巡航故障X7")
    def test_accmod_brakeonly_ign6(self):
        """
        Description:
            自适应巡航故障X7
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航关闭
        Steps:
            1.自适应巡航Failure：
            FRM_ACCMod=0x7
        Expect Result:
            1.显示红色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_failure()
            accmod_brakeonly_ign6()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_brakeonly_ign6())

    @pytest.mark.usefixtures("function")
    @allure.title("隐藏红色自适应巡航图标")
    def test_accmod_failure_dark(self):
        """
        Description:
            隐藏红色自适应巡航图标
        PreCondition:
            1.电源状态：IGN
            2.自适应巡航Failure
        Steps:
            1.自适应巡航off：
            FRM_ACCMod=0x0
        Expect Result:
            1.隐藏红色自适应巡航图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_accmod_failure()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_accmod_off()
            accmod_failure_dark()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_accmod_failure_dark())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+绿色图标1")
    def test_frm_aeb_greenlight_ign1(self):
        """
        Description:
            AEB开启+绿色图标1
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮绿灯：
            FRM_AEBSetFb= 0x1
            FRM_FCWSetFb= 0x0
        Expect Result:
            1.显示绿色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_greenlight_on1()
            frm_aeb_greenlight_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_greenlight_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+绿色图标2")
    def test_frm_aeb_greenlight_ign2(self):
        """
        Description:
            AEB开启+绿色图标2
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮绿灯：
            FRM_AEBSetFb= 0x0
            FRM_FCWSetFb= 0x1
        Expect Result:
            1.显示绿色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_greenlight_on2()
            frm_aeb_greenlight_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_greenlight_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+绿色图标3")
    def test_frm_aeb_greenlight_ign3(self):
        """
        Description:
            AEB开启+绿色图标3
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮绿灯：
            FRM_AEBSetFb= 0x1
            FRM_FCWSetFb= 0x1
        Expect Result:
            1.显示绿色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_greenlight_on3()
            frm_aeb_greenlight_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_greenlight_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+红色图标1")
    def test_frm_aeb_redlight_ign1(self):
        """
        Description:
            AEB开启+红色图标1
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮红灯：
            FRM_AEB_Flt=0x1
            FRM_FCW_Flt=0x0
        Expect Result:
            1.显红色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_redlight_on1()
            frm_aeb_redlight_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_redlight_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+红色图标2")
    def test_frm_aeb_redlight_ign2(self):
        """
        Description:
            AEB开启+红色图标2
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮红灯：
            FRM_AEB_Flt=0x0
            FRM_FCW_Flt=0x1
        Expect Result:
            1.显红色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_redlight_on2()
            frm_aeb_redlight_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_redlight_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+红色图标3")
    def test_frm_aeb_redlight_ign3(self):
        """
        Description:
            AEB开启+红色图标3
        PreCondition:
            1.电源状态：IGN
            2.AEB关闭
        Steps:
            1.AEB亮红灯：
            FRM_AEB_Flt=0x1
            FRM_FCW_Flt=0x1
        Expect Result:
            1.显红色AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_light_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_redlight_on3()
            frm_aeb_redlight_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_redlight_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("AEB开启+隐藏图标")
    def test_frm_aeb_light_dark(self):
        """
        Description:
            AEB开启+隐藏图标
        PreCondition:
            1.电源状态：IGN
            2.AEB开启
        Steps:
            1.AEB灯关闭：
            FRM_AEBSetFb= 0x0
            FRM_FCWSetFb= 0x0
            FRM_AEB_Flt=0x0
            FRM_FCW_Flt=0x0
        Expect Result:
            1.隐藏AEB图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_aeb_redlight_on3()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            frm_aeb_light_off()
            frm_aeb_redlight_on4()
            frm_aeb_light_dark()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_aeb_light_dark())

    @pytest.mark.usefixtures("function")
    @allure.title("LDW开启+白色图标x2")
    def test_mpc_ldw_standbylight_ign2(self):
        """
        Description:
            LDW开启+白色图标x2
        PreCondition:
            1.电源状态：IGN
            2.LDW关闭
        Steps:
            1.LDW待命：
            MPC_LDW_Sts=0x2
        Expect Result:
            1.显示白色LDW图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mpc_ldw_noinformation()
        # 执行步骤
        with allure.step('操作步骤'):
            mpc_ldw_standby()
            mpc_ldw_standbylight_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mpc_ldw_standbylight_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("LDW开启+绿色图标x3")
    def test_mpc_ldw_activelight_ign3(self):
        """
        Description:
            LDW开启+绿色图标x3
        PreCondition:
            1.电源状态：IGN
            2.LDW关闭
        Steps:
            1.LDW激活：
            MPC_LDW_Sts=0x3
        Expect Result:
            1.显示绿色LDW图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mpc_ldw_noinformation()
        # 执行步骤
        with allure.step('操作步骤'):
            mpc_ldw_active()
            mpc_ldw_activelight_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mpc_ldw_activelight_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("LDW开启+红色图标x4")
    def test_mpc_ldw_faultlight_ign4(self):
        """
        Description:
            LDW开启+红色图标x4
        PreCondition:
            1.电源状态：IGN
            2.LDW关闭
        Steps:
            1.LDW故障：
            MPC_LDW_Sts=0x4
        Expect Result:
            1.显示红色LDW图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mpc_ldw_noinformation()
        # 执行步骤
        with allure.step('操作步骤'):
            mpc_ldw_fault()
            mpc_ldw_faultlight_ign4()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mpc_ldw_faultlight_ign4())

    @pytest.mark.usefixtures("function")
    @allure.title("LDW开启+红色图标x5")
    def test_mpc_ldw_camerablocklight_ign5(self):
        """
        Description:
            LDW开启+红色图标x5
        PreCondition:
            1.电源状态：IGN
            2.LDW关闭
        Steps:
            1.LDW相机阻塞：
            MPC_LDW_Sts=0x5
        Expect Result:
            1.显示红色LDW图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mpc_ldw_noinformation()
        # 执行步骤
        with allure.step('操作步骤'):
            mpc_ldw_camerablocked()
            mpc_ldw_camerablocklight_ign5()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mpc_ldw_camerablocklight_ign5())

    @pytest.mark.usefixtures("function")
    @allure.title("LDW开启+隐藏图标")
    def test_mpc_ldw_offlight_ign1(self):
        """
        Description:
            LDW开启+隐藏图标
        PreCondition:
            1.电源状态：IGN
            2.LDW关闭
        Steps:
            1.LDW关闭：
            MPC_LDW_Sts=0x1
        Expect Result:
            1.隐藏LDW图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            mpc_ldw_noinformation()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            mpc_ldw_off()
            mpc_ldw_offlight_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_mpc_ldw_offlight_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("TJA开启+白色图标x2")
    def test_frm_tja__standbylight_ign2(self):
        """
        Description:
            TJA开启+白色图标x2
        PreCondition:
            1.电源状态：IGN
            2.TJA关闭
        Steps:
            1.TJA待命：
            MPC_TJA_Sts =0x02
        Expect Result:
            1.显示白色TJA图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_tja_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_tja_standby()
            frm_tja__standbylight_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_tja__standbylight_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("TJA开启+绿色图标x3")
    def test_frm_tja__activelight_ign3(self):
        """
        Description:
            TJA开启+绿色图标x3
        PreCondition:
            1.电源状态：IGN
            2.TJA关闭
        Steps:
            1.TJA激活：
            MPC_TJA_Sts =0x03
        Expect Result:
            1.显示绿色TJA图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_tja_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_tja_active()
            frm_tja__activelight_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_tja__activelight_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("TJA开启+红色图标x4")
    def test_frm_tja__faultlight_ign4(self):
        """
        Description:
            TJA开启+红色图标x4
        PreCondition:
            1.电源状态：IGN
            2.TJA关闭
        Steps:
            1.TJA故障：
            MPC_TJA_Sts =0x04
        Expect Result:
            1.显示红色TJA图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_tja_off()
        # 执行步骤
        with allure.step('操作步骤'):
            frm_tja_failure()
            frm_tja__faultlight_ign4()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_tja__faultlight_ign4())

    @pytest.mark.usefixtures("function")
    @allure.title("TJA开启+隐藏图标")
    def test_frm_tja_passivelight_ign1(self):
        """
        Description:
            TJA开启+隐藏图标
        PreCondition:
            1.电源状态：IGN
            2.TJA关闭
        Steps:
            1.TJA被动：
            MPC_TJA_Sts =0x01
        Expect Result:
            1.隐藏TJA图标
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            frm_tja_off()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            frm_tja_passive()
            frm_tja_passivelight_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_frm_tja_passivelight_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("智能远光灯开启+绿色图标")
    def test_ai_hibeam_greenlight_ign1(self):
        """
        Description:
            智能远光灯开启+绿色图标
        PreCondition:
            1.电源状态：IGN
            2.Ai_HiBeam关闭
        Steps:
            1.Ai_HiBeam亮绿灯：
            MPC_HBASts=0x3
            HU_HBASet=0x0
        Expect Result:
            1.显示绿色智能远光灯
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ai_hibeam_off1()
        # 执行步骤
        with allure.step('操作步骤'):
            ai_hibeam_greenlight()
            ai_hibeam_greenlight_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ai_hibeam_greenlight_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("智能远光灯开启+隐藏图标1")
    def test_ai_hibeam_greenlight_off1(self):
        """
        Description:
            智能远光灯开启+隐藏图标1
        PreCondition:
            1.电源状态：IGN
            2.Ai_HiBeam亮绿灯
        Steps:
            1.关闭Ai_HiBeam：
            MPC_HBASts=0x0
        Expect Result:
            1.隐藏智能远光灯
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ai_hibeam_greenlight()
        # 执行步骤
        with allure.step('操作步骤'):
            ai_hibeam_off2()
            ai_hibeam_greenlight_off1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ai_hibeam_greenlight_off1())

    @pytest.mark.usefixtures("function")
    @allure.title("智能远光灯开启+蓝色图标")
    def test_ai_hibeam_bluelight_ign2(self):
        """
        Description:
            智能远光灯开启+蓝色图标
        PreCondition:
            1.电源状态：IGN
            2.Ai_HiBeam关闭
        Steps:
            1.Ai_HiBeam亮蓝灯：
            MPC_HBASts=0x2
            HU_HBASet=0x0
            iBCM_HiBeamSts=0x1
        Expect Result:
            1.显示蓝色智能远光灯
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ai_hibeam_off1()
        # 执行步骤
        with allure.step('操作步骤'):
            ai_hibeam_bluelight()
            ai_hibeam_bluelight_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ai_hibeam_bluelight_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("智能远光灯开启+隐藏图标2")
    def test_ai_hibeam_bluelight_off2(self):
        """
        Description:
            智能远光灯开启+隐藏图标2
        PreCondition:
            1.电源状态：IGN
            2.Ai_HiBeam亮蓝灯
        Steps:
            1.关闭Ai_HiBeam：
            MPC_HBASts=0x1
            iBCM_HiBeamSts=0x0
        Expect Result:
            1.隐藏智能远光灯
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ai_hibeam_bluelight()
        # 执行步骤
        with allure.step('操作步骤'):
            ai_hibeam_off3()
            ai_hibeam_bluelight_off2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ai_hibeam_bluelight_off2())
