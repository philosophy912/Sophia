# -------------------------------------------------------------------------------
# Name:        test_adas_click.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-10 17:10
# -------------------------------------------------------------------------------
import allure
import pytest
from time import sleep
from src.codes.context import *


########################################################################################################################
#                                                                                                                      #
#                                                    创建Suite                                                          #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="class", autouse=True)
@allure.suite("创建ADASClick测试套件")
def suite():
    with allure.step("打开CAN盒子"):
        open_device()
        ign_on()
        sleep(10)
        vehiclespeed_0km()
    yield suite
    with allure.step("关闭CAN盒子"):
        close_device()


########################################################################################################################
#                                                                                                                      #
#                                                    创建Function                                                       #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="function", autouse=True)
def function():
    with allure.step("无"):
        pass
    yield
    with allure.step("无"):
        pass


########################################################################################################################
#                                                                                                                      #
#                                                    创建测试用例                                                        #
#                                                                                                                      #
########################################################################################################################
@allure.feature("module")
@pytest.mark.usefixtures("suite")
class TestADASClick(object):

    @pytest.mark.usefixtures("function")
    @allure.title("自动泊车寻车开关开启")
    def test_adv_park_click(self):
        """
        Description:
            自动泊车寻车开关开启
        PreCondition:
            1.空调屏收到信号[0X250]ADV_1:ADV_ParkStatus=0x1
        Steps:
            1.点击自动泊车寻车开关按钮
        Expect Result:
            1.空调屏发送对应请求信号：
            [0X2E1]FCP_2:FCP_APAFunctionReq=0x2（ON）
        """
        # 前置条件
        with allure.step("前置条件"):
            adv_park_standby()
        # 执行步骤
        with allure.step('操作步骤'):
            can_service.clear_stack_data()
            ops_adv_park_button()
        # 期望结果
        with allure.step('期望结果'):
            stack = can_service.get_stack()
            compare(cancompare_adv_park_click(stack))

    @pytest.mark.usefixtures("function")
    @allure.title("自动泊车寻车开关开启1")
    def test_adv_park_click1(self):
        """
        Description:
            自动泊车寻车开关开启1
        PreCondition:
            1.空调屏收到ADV ParkStatus信号
            [0X250]ADV_1:ADV_ParkStatus = 0x2
        Steps:
            1.点击自动泊车寻车开关按钮
        Expect Result:
            1.空调屏发送对应请求信号：
            [0X2E1]FCP_2:FCP_APAFunctionReq=0x1（OFF）
        """
        # 前置条件
        with allure.step("前置条件"):
            adv_searchingforpark_in()
        # 执行步骤
        with allure.step('操作步骤'):
            can_service.clear_stack_data()
            ops_adv_park_button()
        # 期望结果
        with allure.step('期望结果'):
            stack = can_service.get_stack()
            compare(cancompare_adv_park_click1(stack))
