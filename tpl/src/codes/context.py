# -------------------------------------------------------------------------------
# Name:        context.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-15 11:47
# -------------------------------------------------------------------------------
import os
import allure
from time import sleep
from automotive import *
from src.codes.configure import *


def compare(result: tuple):
    if len(result) > 1:
        result, images, compare_type, dark, light = result
        if compare_type == CompareTypeEnum.LIGHT:
            allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
        elif compare_type == CompareTypeEnum.DARK:
            allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
        elif compare_type == CompareTypeEnum.BLINK:
            allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
            allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
        result_str = "成功" if result else "失败"
        for image in images:
            image_name = image.split("\\")[-1]
            allure.attach.file(image, f"{result_str}截图[{image_name}]", allure.attachment_type.BMP)
        assert result
    else:
        assert result


########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                             #
#                                                                                                                      #
########################################################################################################################

"""
主页菜单栏车辆
"""
main_page_car = {"text": "车辆", "resourceId": "com.android.systemui:id/tsp_nav_button_content"}
"""
主页菜单栏主页
"""
main_page_main = {"text": "主页", "resourceId": "com.android.systemui:id/tsp_nav_button_content"}
"""
车辆设置的行驶数据
"""
driver_data = {"text": "行驶数据"}
"""
主页中第二个卡片的fm频点的显示
"""
main_card_page_fm_show = {"resourceId": "com.chinatsp.media:id/play_content_sub_title"}
"""
实时影像菜单
"""
real_video_item = {"resourceId": "com.chinatsp.vehicle:id/btn_real_video"}


interval_time = 0.5


# 用于存放保存的内容
save_data = dict()
curve = Curve()
current_path = os.getcwd()
codes_folder = Utils.get_folder_path("codes", "src", current_path)
top_folder = os.path.dirname(codes_folder)
resource = "\\".join([top_folder, "resources"])
# DBC解析出来的文件的路径
dbc = "\\".join([resource, "dbc", dbc_json])
# 模板图片存放路径
templates = "\\".join([resource, "templates"])
# 结果存放路径
result_folder = "\\".join([top_folder, "result"])
# 截图图片存放路径
screenshot = "\\".join([result_folder, "screenshot"])
# 临时文件存放路径
temp = "\\".join([result_folder, "temp"])

image_compare = ImageCompare()
it6831 = None
konstanter = None
can_service = None
android_service = None
relay = None
air_condition = None
soc = None
mcu = None
hypervisor = None

if it6831_serial_baud_rate and it6831_serial_port:
    it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
    logger.info(f"it6831 is initialization")
if konstanter_serial_port and konstanter_serial_baud_rate:
    konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
    logger.info(f"konstanter is initialization")
if dbc_json:
    can_service = CANService(dbc)
    logger.info(f"can_service is initialization")
if max_relay_channel:
    relay = RelayActions()
    logger.info(f"relay is initialization")
if soc_serial_port and soc_serial_baud_rate:
    soc = SerialPort()
    logger.info(f"soc is initialization")
if mcu_serial_port and mcu_serial_baud_rate:
    mcu = SerialPort()
    logger.info(f"mcu is initialization")
if test_case_type == "空调屏":
    if air_condition_port and air_condition_baud_rate:
        air_condition = AirCondition(qnx_screen_shot_path, air_condition_port)
        logger.info(f"air_condition is initialization")
if test_case_type in ("智能座舱", "仪表", "中控"):
    logger.info("请先remount系统.................... 步骤如下")
    logger.info("""
        1、关闭dm-verity
        adb root
        adb shell setenforce 0
        adb shell setprop ro.secure 1
        adb disable-verity
        2、重启设备
        3、remount
        adb root
        adb shell setenforce 0
        adb remount
    """)
    sleep(5)
    if android_automation_type:
        android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
        logger.info(f"android_service is initialization")
    if test_case_type != "中控":
        hypervisor = HypervisorScreenShot(qnx_screen_shot_path, android_device_id)
        logger.info(f"hypervisor is initialization")


def open_device():
    if it6831:
        it6831.open()
    if konstanter:
        konstanter.open()
    if android_service:
        if android_automation_type == "appium":
            capability = {
                "deviceName": android_device_id,
                "platformVersion": android_version,
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "appPackage": android_app_package,
                "appActivity": android_app_activity
            }
            android_service.connect(android_device_id, capability)
        else:
            android_service.connect(android_device_id)
    if can_service:
        can_service.open_can()
    if relay:
        relay.open()
    if air_condition:
        air_condition.connect()
    if mcu:
        mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
    if soc:
        soc.connect(soc_serial_port, soc_serial_baud_rate)


def close_device():
    if it6831:
        it6831.close()
    if konstanter:
        konstanter.close()
    if android_service:
        android_service.disconnect()
    if can_service:
        can_service.close_can()
    if relay:
        relay.close()
    if air_condition:
        air_condition.disconnect()
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 元素操作(ElementAction)                                  #
    #                                                                                                                  #
    ####################################################################################################################


def enter_main_page():
    """
    点击进去主页
    """
    android_service.click(locator=main_page_main)


def enter_car_setting_page():
    """
    点击进入车辆设置
    """
    android_service.click(locator=main_page_car)
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 截图操作(ScreenShotAction)                               #
    #                                                                                                                  #
    ####################################################################################################################


def vehicle_residual_mileage_acc_800():
    """
    Vehicle_residual_mileage_ACC_800
    """
    image_name = f"vehicle_residual_mileage_acc_800"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_acc_400():
    """
    Vehicle_residual_mileage_ACC_400
    """
    image_name = f"vehicle_residual_mileage_acc_400"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_acc_0():
    """
    Vehicle_residual_mileage_ACC_0
    """
    image_name = f"vehicle_residual_mileage_acc_0"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_acc_850():
    """
    Vehicle_residual_mileage_ACC_850
    """
    image_name = f"vehicle_residual_mileage_acc_850"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_ign_800():
    """
    Vehicle_residual_mileage_IGN_800
    """
    image_name = f"vehicle_residual_mileage_ign_800"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_ign_400():
    """
    Vehicle_residual_mileage_IGN_400
    """
    image_name = f"vehicle_residual_mileage_ign_400"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_ign_0():
    """
    Vehicle_residual_mileage_IGN_0
    """
    image_name = f"vehicle_residual_mileage_ign_0"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_ign_850():
    """
    Vehicle_residual_mileage_IGN_850
    """
    image_name = f"vehicle_residual_mileage_ign_850"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_off_800():
    """
    Vehicle_residual_mileage_OFF_800
    """
    image_name = f"vehicle_residual_mileage_off_800"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_off_400():
    """
    Vehicle_residual_mileage_OFF_400
    """
    image_name = f"vehicle_residual_mileage_off_400"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_off_0():
    """
    Vehicle_residual_mileage_OFF_0
    """
    image_name = f"vehicle_residual_mileage_off_0"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_residual_mileage_off_850():
    """
    Vehicle_residual_mileage_OFF_850
    """
    image_name = f"vehicle_residual_mileage_off_850"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_p_acc():
    """
    ActlGear_P_ACC
    """
    image_name = f"actlgear_p_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_p_ign():
    """
    ActlGear_P_IGN
    """
    image_name = f"actlgear_p_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_p_off():
    """
    ActlGear_P_OFF
    """
    image_name = f"actlgear_p_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_r_ign():
    """
    ActlGear_R_IGN
    """
    image_name = f"actlgear_r_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_r_acc():
    """
    ActlGear_R_ACC
    """
    image_name = f"actlgear_r_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_n_ign():
    """
    ActlGear_N_IGN
    """
    image_name = f"actlgear_n_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_n_acc():
    """
    ActlGear_N_ACC
    """
    image_name = f"actlgear_n_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_d_ign():
    """
    ActlGear_D_IGN
    """
    image_name = f"actlgear_d_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_d_acc():
    """
    ActlGear_D_ACC
    """
    image_name = f"actlgear_d_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_d_ign1():
    """
    ActlGear_D_IGN1
    """
    image_name = f"actlgear_d_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_r_off():
    """
    ActlGear_R_OFF
    """
    image_name = f"actlgear_r_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgearr_r_ign1():
    """
    ActlGearr_R_IGN1
    """
    image_name = f"actlgearr_r_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_n_off():
    """
    ActlGear_N_OFF
    """
    image_name = f"actlgear_n_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgearr_r_ign2():
    """
    ActlGearr_R_IGN2
    """
    image_name = f"actlgearr_r_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_d_off():
    """
    ActlGear_D_OFF
    """
    image_name = f"actlgear_d_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgear_p_ign1():
    """
    ActlGear_P_IGN1
    """
    image_name = f"actlgear_p_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def actlgearr_n_ign1():
    """
    ActlGearr_N_IGN1
    """
    image_name = f"actlgearr_n_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_300kw_ign():
    """
    VhclActlPwr_300Kw_IGN
    """
    image_name = f"vhclactlpwr_300kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_0kw_ign():
    """
    VhclActlPwr_0Kw_IGN
    """
    image_name = f"vhclactlpwr_0kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_200nkw_ign():
    """
    VhclActlPwr_200NKw_IGN
    """
    image_name = f"vhclactlpwr_200nkw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_301kw_ign():
    """
    VhclActlPwr_301Kw_IGN
    """
    image_name = f"vhclactlpwr_301kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_160kw_ign():
    """
    VhclActlPwr_160Kw_IGN
    """
    image_name = f"vhclactlpwr_160kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_120nkw_ign():
    """
    VhclActlPwr_120NKw_IGN
    """
    image_name = f"vhclactlpwr_120nkw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_100kw_ign():
    """
    VhclActlPwr_100Kw_IGN
    """
    image_name = f"vhclactlpwr_100kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_100kw_acc():
    """
    VhclActlPwr_100Kw_ACC
    """
    image_name = f"vhclactlpwr_100kw_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vhclactlpwr_120kw_ign():
    """
    VhclActlPwr_120Kw_IGN
    """
    image_name = f"vhclactlpwr_120kw_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_0_ign():
    """
    Vehicle_Speed_0_IGN
    """
    image_name = f"vehicle_speed_0_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_1_ign():
    """
    Vehicle_Speed_1_IGN
    """
    image_name = f"vehicle_speed_1_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_2_ign():
    """
    Vehicle_Speed_2_IGN
    """
    image_name = f"vehicle_speed_2_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_72_ign():
    """
    Vehicle_Speed_72_IGN
    """
    image_name = f"vehicle_speed_72_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_100_inv_ign():
    """
    Vehicle_Speed_100_Inv_IGN
    """
    image_name = f"vehicle_speed_100_inv_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vehicle_speed_301_ign():
    """
    Vehicle_Speed_301_IGN
    """
    image_name = f"vehicle_speed_301_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_100_acc():
    """
    Disp_Soc_100_ACC
    """
    image_name = f"disp_soc_100_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_4_acc():
    """
    Disp_Soc_4_ACC
    """
    image_name = f"disp_soc_4_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_0_acc():
    """
    Disp_Soc_0_ACC
    """
    image_name = f"disp_soc_0_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_101_acc():
    """
    Disp_Soc_101_ACC
    """
    image_name = f"disp_soc_101_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_100_off():
    """
    Disp_Soc_100_OFF
    """
    image_name = f"disp_soc_100_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_4_off():
    """
    Disp_Soc_4_OFF
    """
    image_name = f"disp_soc_4_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_0_off():
    """
    Disp_Soc_0_OFF
    """
    image_name = f"disp_soc_0_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_101_off():
    """
    Disp_Soc_101_OFF
    """
    image_name = f"disp_soc_101_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_100_ign():
    """
    Disp_Soc_100_IGN
    """
    image_name = f"disp_soc_100_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_4_ign():
    """
    Disp_Soc_4_IGN
    """
    image_name = f"disp_soc_4_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_0_ign():
    """
    Disp_Soc_0_IGN
    """
    image_name = f"disp_soc_0_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_101_ign():
    """
    Disp_Soc_101_IGN
    """
    image_name = f"disp_soc_101_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def disp_soc_50_ign():
    """
    Disp_Soc_50_IGN
    """
    image_name = f"disp_soc_50_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_off_yellowlight_open_ign():
    """
    ESP_OFF_YellowLight_Open_IGN
    """
    image_name = f"esp_off_yellowlight_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_off_yellowlight_close_ign():
    """
    ESP_OFF_YellowLight_Close_IGN
    """
    image_name = f"esp_off_yellowlight_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_ebd_err_redlight_open_ign():
    """
    ESP_EBD_Err_RedLight_Open_IGN
    """
    image_name = f"esp_ebd_err_redlight_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_ebd_err_redlight_close_ign():
    """
    ESP_EBD_Err_RedLight_Close_IGN
    """
    image_name = f"esp_ebd_err_redlight_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_open_pwroff():
    """
    Left_Turn_Lamp_OPEN_PwrOFF
    """
    image_name = f"left_turn_lamp_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_close_pwroff():
    """
    Left_Turn_Lamp_CLOSE_PwrOFF
    """
    image_name = f"left_turn_lamp_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_open_pwracc():
    """
    Left_Turn_Lamp_OPEN_PwrACC
    """
    image_name = f"left_turn_lamp_open_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_close_pwracc():
    """
    Left_Turn_Lamp_CLOSE_PwrACC
    """
    image_name = f"left_turn_lamp_close_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_open_pwrign():
    """
    Left_Turn_Lamp_OPEN_PwrIGN
    """
    image_name = f"left_turn_lamp_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def left_turn_lamp_close_pwrign():
    """
    Left_Turn_Lamp_CLOSE_PwrIGN
    """
    image_name = f"left_turn_lamp_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_open_pwroff():
    """
    Right_Turn_Lamp_OPEN_PwrOFF
    """
    image_name = f"right_turn_lamp_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_close_pwroff():
    """
    Right_Turn_Lamp_CLOSE_PwrOFF
    """
    image_name = f"right_turn_lamp_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_open_pwracc():
    """
    Right_Turn_Lamp_OPEN_PwrACC
    """
    image_name = f"right_turn_lamp_open_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_close_pwracc():
    """
    Right_Turn_Lamp_CLOSE_PwrACC
    """
    image_name = f"right_turn_lamp_close_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_open_pwrign():
    """
    Right_Turn_Lamp_OPEN_PwrIGN
    """
    image_name = f"right_turn_lamp_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def right_turn_lamp_close_pwrign():
    """
    Right_Turn_Lamp_CLOSE_PwrIGN
    """
    image_name = f"right_turn_lamp_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def warning_open_pwroff():
    """
    Warning_OPEN_PwrOFF
    """
    image_name = f"warning_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def warning_close_pwroff():
    """
    Warning_CLOSE_PwrOFF
    """
    image_name = f"warning_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def position_open_pwroff():
    """
    Position_OPEN_PwrOFF
    """
    image_name = f"position_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def position_close_pwroff():
    """
    Position_CLOSE_PwrOFF
    """
    image_name = f"position_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def high_beam_open_pwroff():
    """
    High_Beam_OPEN_PwrOFF
    """
    image_name = f"high_beam_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def high_beam_close_pwroff():
    """
    High_Beam_CLOSE_PwrOFF
    """
    image_name = f"high_beam_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def low_beam_open_pwroff():
    """
    Low_Beam_OPEN_PwrOFF
    """
    image_name = f"low_beam_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def low_beam_close_pwroff():
    """
    Low_Beam_CLOSE_PwrOFF
    """
    image_name = f"low_beam_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def refog_open_pwroff():
    """
    ReFog_OPEN_PwrOFF
    """
    image_name = f"refog_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def refog_close_pwroff():
    """
    ReFog_CLOSE_PwrOFF
    """
    image_name = f"refog_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def front_fog_open_pwroff():
    """
    Front_Fog_OPEN_PwrOFF
    """
    image_name = f"front_fog_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def front_fog_close_pwroff():
    """
    Front_Fog_CLOSE_PwrOFF
    """
    image_name = f"front_fog_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def fl_doorajarsts_open():
    """
    FL_DoorAjarSts_OPEN
    """
    image_name = f"fl_doorajarsts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def fl_doorajarsts_close():
    """
    FL_DoorAjarSts_CLOSE
    """
    image_name = f"fl_doorajarsts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def fr_doorajarsts_open():
    """
    FR_DoorAjarSts_OPEN
    """
    image_name = f"fr_doorajarsts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def fr_doorajarsts_close():
    """
    FR_DoorAjarSts_CLOSE
    """
    image_name = f"fr_doorajarsts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rr_doorajarsts_open():
    """
    RR_DoorAjarSts_OPEN
    """
    image_name = f"rr_doorajarsts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rr_doorajarsts_close():
    """
    RR_DoorAjarSts_CLOSE
    """
    image_name = f"rr_doorajarsts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rl_doorajarsts_open():
    """
    RL_DoorAjarSts_OPEN
    """
    image_name = f"rl_doorajarsts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rl_doorajarsts_close():
    """
    RL_DoorAjarSts_CLOSE
    """
    image_name = f"rl_doorajarsts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def trunksts_open():
    """
    TrunkSts_OPEN
    """
    image_name = f"trunksts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def trunksts_close():
    """
    TrunkSts_CLOSE
    """
    image_name = f"trunksts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def hoodsts_open():
    """
    HoodSts_OPEN
    """
    image_name = f"hoodsts_open"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def hoodsts_close():
    """
    HoodSts_CLOSE
    """
    image_name = f"hoodsts_close"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def parking_status():
    """
    Parking_Status
    """
    image_name = f"parking_status"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def driving_status():
    """
    Driving_Status
    """
    image_name = f"driving_status"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def charging_status():
    """
    Charging_Status
    """
    image_name = f"charging_status"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def charging_parking_status():
    """
    CHARGING_Parking_Status
    """
    image_name = f"charging_parking_status"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def tpmssystem_statusabnormal_pwracc():
    """
    TPMSSystem_StatusAbnormal_PwrACC
    """
    image_name = f"tpmssystem_statusabnormal_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def tpmssystem_statusnormal_pwracc():
    """
    TPMSSystem_StatusNormal_PwrACC
    """
    image_name = f"tpmssystem_statusnormal_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def tire_right_frontpressure_pwracc():
    """
    Tire_Right_FrontPressure_PwrACC
    """
    image_name = f"tire_right_frontpressure_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def tire_left_frontpressure_pwracc():
    """
    Tire_Left_FrontPressure_PwrACC
    """
    image_name = f"tire_left_frontpressure_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def tire_right_fronttemperature_pwracc():
    """
    Tire_Right_FrontTemperature_PwrACC
    """
    image_name = f"tire_right_fronttemperature_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def airbag_light_open_pwrign():
    """
    AirBag_Light_OPEN_PwrIGN
    """
    image_name = f"airbag_light_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def airbag_light_blink_pwrign():
    """
    AirBag_Light_Blink_PwrIGN
    """
    image_name = f"airbag_light_blink_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def airbag_light_close_pwrign():
    """
    AirBag_Light_CLOSE_PwrIGN
    """
    image_name = f"airbag_light_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frontbelt_out_ign_pwrign():
    """
    FrontBelt_OUT_IGN_PwrIGN
    """
    image_name = f"frontbelt_out_ign_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftfrontbelt_out_pwrign():
    """
    LeftFrontBelt_OUT_PwrIGN
    """
    image_name = f"leftfrontbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rightfrontbelt_out_pwrign():
    """
    RightFrontBelt_OUT_PwrIGN
    """
    image_name = f"rightfrontbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frontbelt_in_ign_pwrign():
    """
    FrontBelt_IN_IGN_PwrIGN
    """
    image_name = f"frontbelt_in_ign_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftrearbelt_in_pwrign():
    """
    LeftRearBelt_IN_PwrIGN
    """
    image_name = f"leftrearbelt_in_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftctrrearbelt_in_pwrign():
    """
    LeftCtrRearBelt_IN_PwrIGN
    """
    image_name = f"leftctrrearbelt_in_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftctrrightrearbelt_in_pwrign():
    """
    LeftCtrRightRearBelt_IN_PwrIGN
    """
    image_name = f"leftctrrightrearbelt_in_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftrearbelt_out_pwrign():
    """
    LeftRearBelt_OUT_PwrIGN
    """
    image_name = f"leftrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftctrrearbelt_out_pwrign():
    """
    LeftCtrRearBelt_OUT_PwrIGN
    """
    image_name = f"leftctrrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rearbelt_out_pwrign():
    """
    RearBelt_OUT_PwrIGN
    """
    image_name = f"rearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ctrrearbelt_out_pwrign():
    """
    CtrRearBelt_OUT_PwrIGN
    """
    image_name = f"ctrrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def leftrightrearbelt_out_pwrign():
    """
    LeftRightRearBelt_OUT_PwrIGN
    """
    image_name = f"leftrightrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ctrrightrearbelt_out_pwrign():
    """
    CtrRightRearBelt_OUT_PwrIGN
    """
    image_name = f"ctrrightrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rightrearbelt_out_pwrign():
    """
    RightRearBelt_OUT_PwrIGN
    """
    image_name = f"rightrearbelt_out_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rearbelt_pwrign():
    """
    RearBelt_PwrIGN
    """
    image_name = f"rearbelt_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def rearbelt_pwrign1():
    """
    RearBelt_PwrIGN1
    """
    image_name = f"rearbelt_pwrign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_abs_yellowlight_open_pwrign():
    """
    ESP_ABS_YellowLight_OPEN_PwrIGN
    """
    image_name = f"esp_abs_yellowlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_abs_yellowlight_close_pwrign():
    """
    ESP_ABS_YellowLight_CLOSE_PwrIGN
    """
    image_name = f"esp_abs_yellowlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_err_yellowlight_open_pwrign():
    """
    EPB_Err_YellowLight_OPEN_PwrIGN
    """
    image_name = f"epb_err_yellowlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_err_yellowlight_bink_pwrign():
    """
    EPB_Err_YellowLight_Bink_PwrIGN
    """
    image_name = f"epb_err_yellowlight_bink_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_err_yellowlight_close_pwrign():
    """
    EPB_Err_YellowLight_CLOSE_PwrIGN
    """
    image_name = f"epb_err_yellowlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def autohold_greenlight_open_pwrign():
    """
    AutoHold_GreenLight_OPEN_PwrIGN
    """
    image_name = f"autohold_greenlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def autohold_greenlight_close_pwrign():
    """
    AutoHold_GreenLight_CLOSE_PwrIGN
    """
    image_name = f"autohold_greenlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_warn_yellowlight_open_pwrign():
    """
    ESP_WARN_YellowLight_OPEN_PwrIGN
    """
    image_name = f"esp_warn_yellowlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_warn_yellowlight_blinking_pwrign():
    """
    ESP_WARN_YellowLight_Blinking_PwrIGN
    """
    image_name = f"esp_warn_yellowlight_blinking_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def esp_warn_yellowlight_close_pwrign():
    """
    ESP_WARN_YellowLight_CLOSE_PwrIGN
    """
    image_name = f"esp_warn_yellowlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_open_pwroff():
    """
    EPB_RedLight_OPEN_PwrOFF
    """
    image_name = f"epb_redlight_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_blinking_pwroff():
    """
    EPB_RedLight_Blinking_PwrOFF
    """
    image_name = f"epb_redlight_blinking_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_close_pwroff():
    """
    EPB_RedLight_CLOSE_PwrOFF
    """
    image_name = f"epb_redlight_close_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_open_pwrign():
    """
    EPB_RedLight_OPEN_PwrIGN
    """
    image_name = f"epb_redlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_blinking_pwrign():
    """
    EPB_RedLight_Blinking_PwrIGN
    """
    image_name = f"epb_redlight_blinking_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_close_pwrign():
    """
    EPB_RedLight_CLOSE_PwrIGN
    """
    image_name = f"epb_redlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_open_pwracc():
    """
    EPB_RedLight_OPEN_PwrACC
    """
    image_name = f"epb_redlight_open_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_blinking_pwracc():
    """
    EPB_RedLight_Blinking_PwrACC
    """
    image_name = f"epb_redlight_blinking_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=5, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def epb_redlight_close_pwracc():
    """
    EPB_RedLight_CLOSE_PwrACC
    """
    image_name = f"epb_redlight_close_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_hdc_greenlight_open_pwrign():
    """
    EPS_HDC_GreenLight_OPEN_PwrIGN
    """
    image_name = f"eps_hdc_greenlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_hdc_greenlight_blinking_pwrign():
    """
    EPS_HDC_GreenLight_Blinking_PwrIGN
    """
    image_name = f"eps_hdc_greenlight_blinking_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_hdc_greenlight_close_pwrign():
    """
    EPS_HDC_GreenLight_Close_PwrIGN
    """
    image_name = f"eps_hdc_greenlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_redlight_open_pwrign():
    """
    EPS_RedLight_OPEN_PwrIGN
    """
    image_name = f"eps_redlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_yellowlight_open_pwrign():
    """
    EPS_YellowLight_OPEN_PwrIGN
    """
    image_name = f"eps_yellowlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def eps_light_close_ign():
    """
    EPS_LIGHT_CLOSE_IGN
    """
    image_name = f"eps_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def battcplowwarn_yellowlight_open_pwrign():
    """
    BattCpLowWarn_YellowLight_OPEN_PwrIGN
    """
    image_name = f"battcplowwarn_yellowlight_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def battcplowwarn_yellowlight_close_pwrign():
    """
    BattCpLowWarn_YellowLight_CLOSE_PwrIGN
    """
    image_name = f"battcplowwarn_yellowlight_close_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptovrtmp_light_open1_ign():
    """
    VCU_PTOvrTmp_LIGHT_OPEN1_IGN
    """
    image_name = f"vcu_ptovrtmp_light_open1_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptovrtmp_light_open2_ign():
    """
    VCU_PTOvrTmp_LIGHT_OPEN2_IGN
    """
    image_name = f"vcu_ptovrtmp_light_open2_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptovrtmp_light_open3_ign():
    """
    VCU_PTOvrTmp_LIGHT_OPEN3_IGN
    """
    image_name = f"vcu_ptovrtmp_light_open3_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptovrtmp_light_open4_ign():
    """
    VCU_PTOvrTmp_LIGHT_OPEN4_IGN
    """
    image_name = f"vcu_ptovrtmp_light_open4_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptovrtmp_light_close_ign():
    """
    VCU_PTOvrTmp_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_ptovrtmp_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0_ign1():
    """
    Ready_ON_Speed0_IGN1
    """
    image_name = f"ready_on_speed0_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_off_speed20_ign1():
    """
    Ready_OFF_Speed20_IGN1
    """
    image_name = f"ready_off_speed20_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0_ign2():
    """
    Ready_ON_Speed0_IGN2
    """
    image_name = f"ready_on_speed0_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed50_ign3():
    """
    Ready_ON_Speed50_IGN3
    """
    image_name = f"ready_on_speed50_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0_ign4():
    """
    Ready_ON_Speed0_IGN4
    """
    image_name = f"ready_on_speed0_ign4"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0_ign_acc():
    """
    Ready_ON_Speed0_IGN_ACC
    """
    image_name = f"ready_on_speed0_ign_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0__pwroff_pwrign():
    """
    Ready_ON_Speed0__PwrOFF_PwrIGN
    """
    image_name = f"ready_on_speed0__pwroff_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ready_on_speed0_pwrign_pwroff():
    """
    Ready_ON_Speed0_PwrIGN_PwrOFF
    """
    image_name = f"ready_on_speed0_pwrign_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_open1_acc():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN1_ACC
    """
    image_name = f"b12vpower_charging_sts_light_open1_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_open2_acc():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN2_ACC
    """
    image_name = f"b12vpower_charging_sts_light_open2_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_close_acc():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_CLOSE_ACC
    """
    image_name = f"b12vpower_charging_sts_light_close_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_open1_ign():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN1_IGN
    """
    image_name = f"b12vpower_charging_sts_light_open1_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_open2_ign():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN2_IGN
    """
    image_name = f"b12vpower_charging_sts_light_open2_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def b12vpower_charging_sts_light_close_ign():
    """
    B12VPOWER_CHARGING_Sts_LIGHT_CLOSE_IGN
    """
    image_name = f"b12vpower_charging_sts_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptfltindcr_sts_light_open_ign():
    """
    VCU_PtFltIndcr_Sts_LIGHT_OPEN_IGN
    """
    image_name = f"vcu_ptfltindcr_sts_light_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_ptfltindcr_sts_light_close_ign():
    """
    VCU_PtFltIndcr_Sts_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_ptfltindcr_sts_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_open_off():
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_OFF
    """
    image_name = f"vcu_chrgstsindcr_light_open_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_close_off():
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_OFF
    """
    image_name = f"vcu_chrgstsindcr_light_close_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_open_acc():
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_ACC
    """
    image_name = f"vcu_chrgstsindcr_light_open_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_close_acc():
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_ACC
    """
    image_name = f"vcu_chrgstsindcr_light_close_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_open_ign():
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_IGN
    """
    image_name = f"vcu_chrgstsindcr_light_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgstsindcr_light_close_ign():
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_chrgstsindcr_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_open_pwroff():
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrOFF
    """
    image_name = f"vcu_chrgconnectindcr_light_open_pwroff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_close_pwrofff():
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSE_PwrOFFF
    """
    image_name = f"vcu_chrgconnectindcr_light_close_pwrofff"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_open_pwracc():
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrACC
    """
    image_name = f"vcu_chrgconnectindcr_light_open_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_close_pwracc():
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSE_PwrACC
    """
    image_name = f"vcu_chrgconnectindcr_light_close_pwracc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_open_pwrign():
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrIGN
    """
    image_name = f"vcu_chrgconnectindcr_light_open_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_chrgconnectindcr_light_closle_pwrign():
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSLE_PwrIGN
    """
    image_name = f"vcu_chrgconnectindcr_light_closle_pwrign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mcu_motoverspdwarn_frnt_light_open1_ign():
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_OPEN1_IGN
    """
    image_name = f"mcu_motoverspdwarn_frnt_light_open1_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mcu_motoverspdwarn_frnt_light_open2_ign():
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_OPEN2_IGN
    """
    image_name = f"mcu_motoverspdwarn_frnt_light_open2_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mcu_motoverspdwarn_frnt_light_close_ign():
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_CLOSE_IGN
    """
    image_name = f"mcu_motoverspdwarn_frnt_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_turtlelampon_light_open_ign():
    """
    VCU_TurtleLampOn_LIGHT_OPEN_IGN
    """
    image_name = f"vcu_turtlelampon_light_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_turtlelampon_light_close_ign():
    """
    VCU_TurtleLampOn_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_turtlelampon_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_pwrbatthvcutoffindcr_light_open_ign():
    """
    VCU_PwrBattHVCutOffIndcr_LIGHT_OPEN_IGN
    """
    image_name = f"vcu_pwrbatthvcutoffindcr_light_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_pwrbatthvcutoffindcr_light_close_ign():
    """
    VCU_PwrBattHVCutOffIndcr_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_pwrbatthvcutoffindcr_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_pwrbattfltindcr_light_open_ign():
    """
    VCU_PwrBattFltIndcr_LIGHT_OPEN_IGN
    """
    image_name = f"vcu_pwrbattfltindcr_light_open_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def vcu_pwrbattfltindcr_light_close_ign():
    """
    VCU_PwrBattFltIndcr_LIGHT_CLOSE_IGN
    """
    image_name = f"vcu_pwrbattfltindcr_light_close_ign"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_standby_ign1():
    """
    CCMod_Standby_IGN1
    """
    image_name = f"ccmod_standby_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_standby_ign2():
    """
    CCMod_Standby_IGN2
    """
    image_name = f"ccmod_standby_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_active_ign3():
    """
    CCMod_Active_IGN3
    """
    image_name = f"ccmod_active_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_active_off():
    """
    CCMod_Active_OFF
    """
    image_name = f"ccmod_active_off"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_active_ign4():
    """
    CCMod_Active_IGN4
    """
    image_name = f"ccmod_active_ign4"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_cancel_ign5():
    """
    CCMod_Cancel_IGN5
    """
    image_name = f"ccmod_cancel_ign5"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_cancel_ign6():
    """
    CCMod_Cancel_IGN6
    """
    image_name = f"ccmod_cancel_ign6"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ccmod_standby_acc():
    """
    CCMod_Standby_ACC
    """
    image_name = f"ccmod_standby_acc"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_standby_ign2():
    """
    ACCMod_StandBy_IGN2
    """
    image_name = f"accmod_standby_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_passive():
    """
    ACCMod_Passive
    """
    image_name = f"accmod_passive"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_active_ign3():
    """
    ACCMod_Active_IGN3
    """
    image_name = f"accmod_active_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_override_ign4():
    """
    ACCMod_Override_IGN4
    """
    image_name = f"accmod_override_ign4"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_brakeonly_ign5():
    """
    ACCMod_BrakeOnly_IGN5
    """
    image_name = f"accmod_brakeonly_ign5"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_brakeonly_dark():
    """
    ACCMod_BrakeOnly_Dark
    """
    image_name = f"accmod_brakeonly_dark"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_brakeonly_ign6():
    """
    ACCMod_BrakeOnly_IGN6
    """
    image_name = f"accmod_brakeonly_ign6"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def accmod_failure_dark():
    """
    ACCMod_Failure_Dark
    """
    image_name = f"accmod_failure_dark"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_greenlight_ign1():
    """
    FRM_AEB_GreenLight_IGN1
    """
    image_name = f"frm_aeb_greenlight_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_greenlight_ign2():
    """
    FRM_AEB_GreenLight_IGN2
    """
    image_name = f"frm_aeb_greenlight_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_greenlight_ign3():
    """
    FRM_AEB_GreenLight_IGN3
    """
    image_name = f"frm_aeb_greenlight_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_redlight_ign1():
    """
    FRM_AEB_RedLight_IGN1
    """
    image_name = f"frm_aeb_redlight_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_redlight_ign2():
    """
    FRM_AEB_RedLight_IGN2
    """
    image_name = f"frm_aeb_redlight_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_redlight_ign3():
    """
    FRM_AEB_RedLight_IGN3
    """
    image_name = f"frm_aeb_redlight_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_aeb_light_dark():
    """
    FRM_AEB_Light_Dark
    """
    image_name = f"frm_aeb_light_dark"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mpc_ldw_standbylight_ign2():
    """
    MPC_LDW_StandbyLight_IGN2
    """
    image_name = f"mpc_ldw_standbylight_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mpc_ldw_activelight_ign3():
    """
    MPC_LDW_ActiveLight_IGN3
    """
    image_name = f"mpc_ldw_activelight_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mpc_ldw_faultlight_ign4():
    """
    MPC_LDW_FaultLight_IGN4
    """
    image_name = f"mpc_ldw_faultlight_ign4"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mpc_ldw_camerablocklight_ign5():
    """
    MPC_LDW_CamerablockLight_IGN5
    """
    image_name = f"mpc_ldw_camerablocklight_ign5"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def mpc_ldw_offlight_ign1():
    """
    MPC_LDW_OffLight_IGN1
    """
    image_name = f"mpc_ldw_offlight_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_tja__standbylight_ign2():
    """
    FRM_TJA__StandbyLight_IGN2
    """
    image_name = f"frm_tja__standbylight_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_tja__activelight_ign3():
    """
    FRM_TJA__ActiveLight_IGN3
    """
    image_name = f"frm_tja__activelight_ign3"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_tja__faultlight_ign4():
    """
    FRM_TJA__FaultLight_IGN4
    """
    image_name = f"frm_tja__faultlight_ign4"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def frm_tja_passivelight_ign1():
    """
    FRM_TJA_PassiveLight_IGN1
    """
    image_name = f"frm_tja_passivelight_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ai_hibeam_greenlight_ign1():
    """
    Ai_HiBeam_GreenLight_IGN1
    """
    image_name = f"ai_hibeam_greenlight_ign1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ai_hibeam_greenlight_off1():
    """
    Ai_HiBeam_GreenLight_OFF1
    """
    image_name = f"ai_hibeam_greenlight_off1"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ai_hibeam_bluelight_ign2():
    """
    Ai_HiBeam_BlueLight_IGN2
    """
    image_name = f"ai_hibeam_bluelight_ign2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)


def ai_hibeam_bluelight_off2():
    """
    Ai_HiBeam_BlueLight_OFF2
    """
    image_name = f"ai_hibeam_bluelight_off2"
    image_files = hypervisor.screen_shot(image_name=image_name, count=1, interval_time=interval_time)
    image_files = list(map(lambda x: f"{qnx_screen_shot_path}/{x}", image_files))
    hypervisor.adb.pull_files(image_files, screenshot, android_device_id)
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> Can信号(CanAction)                                      #
    #                                                                                                                  #
    ####################################################################################################################


def power_off():
    """
    Power_OFF
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_PwrMod": 0x0})


def power_acc():
    """
    Power_ACC
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_PwrMod": 0x1})


def power_ign():
    """
    Power_IGN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_PwrMod": 0x2})


def esp_offlamp_open():
    """
    ESP_OFFLamp_OPEN
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_OFFLamp": 0x1})


def esp_offlamp_close():
    """
    ESP_OFFLamp_CLOSE
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_OFFLamp": 0x0})


def esp_ebd_err_light_open():
    """
    ESP_EBD_Err_Light_OPEN
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EBD_Err": 0x1})


def esp_ebd_err_light_close():
    """
    ESP_EBD_Err_Light_CLOSE
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EBD_Err": 0x0})


def ibcm_fl_doorajarsts_open():
    """
    iBCM_FL_DoorAjarSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FL_DoorAjarSts": 0x1})


def ibcm_fl_doorajarsts_close():
    """
    iBCM_FL_DoorAjarSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FL_DoorAjarSts": 0x0})


def ibcm_fr_doorajarsts_open():
    """
    iBCM_FR_DoorAjarSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FR_DoorAjarSts": 0x1})


def ibcm_fr_doorajarsts_close():
    """
    iBCM_FR_DoorAjarSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FR_DoorAjarSts": 0x0})


def ibcm_rr_doorajarsts_open():
    """
    iBCM_RR_DoorAjarSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_RR_DoorAjarSts": 0x1})


def ibcm_rr_doorajarsts_close():
    """
    iBCM_RR_DoorAjarSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_RR_DoorAjarSts": 0x0})


def ibcm_rl_doorajarsts_open():
    """
    iBCM_RL_DoorAjarSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_RL_DoorAjarSts": 0x1})


def ibcm_rl_doorajarsts_close():
    """
    iBCM_RL_DoorAjarSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_RL_DoorAjarSts": 0x0})


def ibcm_pbdsts_open():
    """
    iBCM_PBDSts_OPEN
    """
    can_service.send_can_signal_message(msg=654, signal={"PBD_RearDoorStatus": 0x2})
    can_service.send_can_signal_message(msg=654, signal={"PBD_RearDoorStsVld": 0x0})


def ibcm_pbdsts_close():
    """
    iBCM_PBDSts_CLOSE
    """
    can_service.send_can_signal_message(msg=654, signal={"PBD_RearDoorStatus": 0x0})
    can_service.send_can_signal_message(msg=654, signal={"PBD_RearDoorStsVld": 0x0})


def ibcm_hoodsts_open():
    """
    iBCM_HoodSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HoodSts": 0x1})


def ibcm_hoodsts_close():
    """
    iBCM_HoodSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HoodSts": 0x0})


def vhclresidualmile_800():
    """
    VhclResidualMile_800
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_VhclResidualMile": 800})


def vhclresidualmile_400():
    """
    VhclResidualMile_400
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_VhclResidualMile": 400})


def vhclresidualmile_0():
    """
    VhclResidualMile_0
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_VhclResidualMile": 0})


def vhclresidualmile_850():
    """
    VhclResidualMile_850
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_VhclResidualMile": 850})


def setactlgear_p():
    """
    setActlGear_P
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_ActlGear": 0x0})


def setactlgear_r():
    """
    setActlGear_R
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_ActlGear": 0x1})


def setactlgear_n():
    """
    setActlGear_N
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_ActlGear": 0x2})


def setactlgear_d():
    """
    setActlGear_D
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_ActlGear": 0x3})


def vhclactlpwr_300():
    """
    VhclActlPwr_300
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 300})


def vhclactlpwr_0():
    """
    VhclActlPwr_0
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 0})


def vhclactlpwr_200n():
    """
    VhclActlPwr_200N
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": -200})


def vhclactlpwr_301():
    """
    VhclActlPwr_301
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 301})


def vhclactlpwr_160():
    """
    VhclActlPwr_160
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 160})


def vhclactlpwr_120n():
    """
    VhclActlPwr_120N
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": -120})


def vhclactlpwr_100():
    """
    VhclActlPwr_100
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 100})


def vhclactlpwr_120():
    """
    VhclActlPwr_120
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 120})


def vhclactlpwr_0x1f5():
    """
    VhclActlPwr_0x1F5
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_VhclActlPwr": 0x1F5})


def battery_surplus_display_100():
    """
    Battery_Surplus_Display_100
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_DispSoc": 100})


def battery_surplus_display_4():
    """
    Battery_Surplus_Display_4
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_DispSoc": 4})


def battery_surplus_display_0():
    """
    Battery_Surplus_Display_0
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_DispSoc": 0})


def battery_surplus_display_101():
    """
    Battery_Surplus_Display_101
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_DispSoc": 101})


def battery_surplus_display_50():
    """
    Battery_Surplus_Display_50
    """
    can_service.send_can_signal_message(msg=285, signal={"VCU_DispSoc": 50})


def vehiclespeed_10():
    """
    VehicleSpeed_10
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 10})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_301():
    """
    VehicleSpeed_301
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 301})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_0():
    """
    VehicleSpeed_0
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 0})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_0_5():
    """
    VehicleSpeed_0_5
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 0.5})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_1_5():
    """
    VehicleSpeed_1_5
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 1.5})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_20():
    """
    VehicleSpeed_20
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 20})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_50():
    """
    VehicleSpeed_50
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 50})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_70():
    """
    VehicleSpeed_70
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 70})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x1})


def vehiclespeed_100_invalid():
    """
    VehicleSpeed_100_invalid
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd": 100})
    can_service.send_can_signal_message(msg=369, signal={"ESP_VhclSpd_Vld": 0x0})


def ibcm_turnlists_left():
    """
    iBCM_TurnLiSts_LEFT
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_TurnLiSts": 0x2})


def ibcm_turnlists_close():
    """
    iBCM_TurnLiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_TurnLiSts": 0x0})


def ibcm_turnlists_right():
    """
    iBCM_TurnLiSts_RIGHT
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_TurnLiSts": 0x1})


def ibcm_turnlist_warning():
    """
    iBCM_TurnLiSt_WARNING
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_TurnLiSts": 0x3})


def ibcm_posnlists_open():
    """
    iBCM_PosnLiSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_PosnLiSts": 0x1})


def ibcm_posnlists_close():
    """
    iBCM_PosnLiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_PosnLiSts": 0x0})


def ibcm_hibeamsts_open():
    """
    iBCM_HiBeamSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HiBeamSts": 0x1})


def ibcm_hibeamsts_close():
    """
    iBCM_HiBeamSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HiBeamSts": 0x0})


def ibcm_lobeamsts_open():
    """
    iBCM_LoBeamSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_LoBeamSts": 0x1})


def ibcm_lobeamsts_close():
    """
    iBCM_LoBeamSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_LoBeamSts": 0x0})


def ibcm_refoglists_open():
    """
    iBCM_ReFogLiSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_ReFogLiSts": 0x1})


def ibcm_refoglists_close():
    """
    iBCM_ReFogLiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_ReFogLiSts": 0x0})


def ibcm_frntfoglists_open():
    """
    iBCM_FrntFogLiSts_OPEN
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FrntFogLiSts": 0x1})


def ibcm_frntfoglists_close():
    """
    iBCM_FrntFogLiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=400, signal={"iBCM_FrntFogLiSts": 0x0})


def vcu_chrgstsindcr_lists_close():
    """
    VCU_ChrgStsIndcr_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_ChrgStsIndcr": 0x0})


def vcu_chrgconnectindcr_lists_close():
    """
    VCU_ChrgConnectIndcr_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_ChrgConnectIndcr": 0x0})


def tpmssystem_status_normal():
    """
    TPMSSystem_Status_normal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_TPMS_SysSts": 0x0})


def ibcm_rr_tirepsts_normal():
    """
    iBCM_RR_TirePSts_normal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RR_TirePSts": 0x0})


def ibcm_rl_tirepsts_normal():
    """
    iBCM_RL_TirePSts_normal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RL_TirePSts": 0x0})


def ibcm_fr_tirepsts_normal():
    """
    iBCM_FR_TirePSts_normal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FR_TirePSts": 0x0})


def ibcm_fl_tirepsts_normal():
    """
    iBCM_FL_TirePSts_normal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FL_TirePSts": 0x0})


def ibcm_rr_tiretmpsts_normal():
    """
    iBCM_RR_TireTmpSts_normal
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_RR_TireTmpSts": 0x0})


def ibcm_rl_tiretmpsts_normal():
    """
    iBCM_RL_TireTmpSts_normal
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_RL_TireTmpSts": 0x0})


def ibcm_fr_tiretmpsts_normal():
    """
    iBCM_FR_TireTmpSts_normal
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_FR_TireTmpSts": 0x0})


def ibcm_fl_tiretmpsts_normal():
    """
    iBCM_FL_TireTmpSts_normal
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_FL_TireTmpSts": 0x0})


def ibcm_rr_tirepsts_overpressure():
    """
    iBCM_RR_TirePSts_overPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RR_TirePSts": 0x1})


def ibcm_rl_tirepsts_overpressure():
    """
    iBCM_RL_TirePSts_overPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RL_TirePSts": 0x1})


def ibcm_fr_tirepsts_overpressure():
    """
    iBCM_FR_TirePSts_overPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FR_TirePSts": 0x1})


def ibcm_fl_tirepsts_overpressure():
    """
    iBCM_FL_TirePSts_overPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FL_TirePSts": 0x1})


def ibcm_rr_tiretmpsts_overtemp():
    """
    iBCM_RR_TireTmpSts_overTemp
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_RR_TireTmpSts": 0x1})


def ibcm_rl_tiretmpsts_overtemp():
    """
    iBCM_RL_TireTmpSts_overTemp
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_RL_TireTmpSts": 0x1})


def ibcm_fr_tiretmpsts_overtemp():
    """
    iBCM_FR_TireTmpSts_overTemp
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_FR_TireTmpSts": 0x1})


def ibcm_fl_tiretmpsts_overtemp():
    """
    iBCM_FL_TireTmpSts_overTemp
    """
    can_service.send_can_signal_message(msg=658, signal={"iBCM_FL_TireTmpSts": 0x1})


def ibcm_rr_tirepsts_lowpressure():
    """
    iBCM_RR_TirePSts_lowPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RR_TirePSts": 0x2})


def ibcm_rl_tirepsts_lowpressure():
    """
    iBCM_RL_TirePSts_lowPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_RL_TirePSts": 0x2})


def ibcm_fr_tirepsts_lowpressure():
    """
    iBCM_FR_TirePSts_lowPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FR_TirePSts": 0x2})


def ibcm_fl_tirepsts_lowpressure():
    """
    iBCM_FL_TirePSts_lowPressure
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_FL_TirePSts": 0x2})


def tpmssystem_status_abnormal():
    """
    TPMSSystem_Status_Abnormal
    """
    can_service.send_can_signal_message(msg=657, signal={"iBCM_TPMS_SysSts": 0x1})


def air_bag_light():
    """
    Air_Bag_Light
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_SWL_Ind": 0x0})


def air_bag_blink():
    """
    Air_Bag_Blink
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_SWL_Ind": 0x2})


def air_bag_dark():
    """
    Air_Bag_Dark
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_SWL_Ind": 0x1})


def acu_frontbelt_out():
    """
    ACU_FrontBelt_OUT
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_DrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_PassBkl_Sts": 0x0})


def acu_frontbelt_out1():
    """
    ACU_FrontBelt_OUT1
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_DrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_PassBkl_Sts": 0x1})


def acu_frontbelt_out2():
    """
    ACU_FrontBelt_OUT2
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_DrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_PassBkl_Sts": 0x0})


def acu_frontbelt_in():
    """
    ACU_FrontBelt_IN
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_DrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_PassBkl_Sts": 0x1})


def acu_ctrrightrearbelt_out1():
    """
    ACU_CtrRightRearBelt_OUT1
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x0})


def acu_rightrearbelt_out2():
    """
    ACU_RightRearBelt_OUT2
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x0})


def acu_leftctrrightrearbelt_in():
    """
    ACU_LeftCtrRightRearBelt_IN
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x1})


def acu_leftrearbelt_out3():
    """
    ACU_LeftRearBelt_OUT3
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x1})


def acu_leftctrrearbelt_out4():
    """
    ACU_LeftCtrRearBelt_OUT4
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x1})


def acu_rearbelt_out():
    """
    ACU_RearBelt_OUT
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x0})


def acu_ctrrearbelt_out5():
    """
    ACU_CtrRearBelt_OUT5
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x1})


def acu_leftrightrearbelt_out6():
    """
    ACU_LeftRightRearBelt_OUT6
    """
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReDrvrBkl_Sts": 0x0})
    can_service.send_can_signal_message(msg=48, signal={"ACU_ReCtrBkl_Sts": 0x1})
    can_service.send_can_signal_message(msg=48, signal={"ACU_RePassBkl_Sts": 0x0})


def vcu_12vbattchrgflt_sts_error():
    """
    VCU_12VBattChrgFlt_Sts_ERROR
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_12VBattChrgFlt": 0x1})


def ibcm_12vbattcplowwarn_sts_warning():
    """
    iBCM_12VBattCpLowWarn_Sts_WARNING
    """
    can_service.send_can_signal_message(msg=656, signal={"iBCM_12VBattCpLowWarn": 0x1})


def vcu_12vbattchrgflt_sts_correct():
    """
    VCU_12VBattChrgFlt_Sts_CORRECT
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_12VBattChrgFlt": 0x0})


def vcu_ptfltindcr_lists_open():
    """
    VCU_PtFltIndcr_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PtFltIndcr": 0x1})


def vcu_ptfltindcr_lists_close():
    """
    VCU_PtFltIndcr_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PtFltIndcr": 0x0})


def vcu_chrgstsindcr_lists_open():
    """
    VCU_ChrgStsIndcr_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_ChrgStsIndcr": 0x1})


def vcu_chrgconnectindcr_lists_open():
    """
    VCU_ChrgConnectIndcr_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_ChrgConnectIndcr": 0x1})


def mcu_motoverspdwarn_frnt_lists_open():
    """
    MCU_MotOverSpdWarn_Frnt_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=370, signal={"MCU_MotOverSpdWarn_Frnt": 0x1})


def mcu_motoverspdwarn_frnt_lists_open2():
    """
    MCU_MotOverSpdWarn_Frnt_LiSts_OPEN2
    """
    can_service.send_can_signal_message(msg=370, signal={"MCU_MotOverSpdWarn_Frnt": 0x2})


def mcu_motoverspdwarn_frnt_lists_close():
    """
    MCU_MotOverSpdWarn_Frnt_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=370, signal={"MCU_MotOverSpdWarn_Frnt": 0x0})


def vcu_turtlelampon_lists_open():
    """
    VCU_TurtleLampOn_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_TurtleLampOn": 0x1})


def vcu_turtlelampon_lists_close():
    """
    VCU_TurtleLampOn_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_TurtleLampOn": 0x0})


def vcu_pwrbatthvcutoffindcr_lists_open():
    """
    VCU_PwrBattHVCutOffIndcr_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PwrBattHVCutOffIndcr": 0x1})


def vcu_pwrbatthvcutoffindcr_lists_close():
    """
    VCU_PwrBattHVCutOffIndcr_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PwrBattHVCutOffIndcr": 0x0})


def vcu_pwrbattfltindcr_lists_open():
    """
    VCU_PwrBattFltIndcr_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PwrBattFltIndcr": 0x1})


def vcu_pwrbattfltindcr_lists_close():
    """
    VCU_PwrBattFltIndcr_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PwrBattFltIndcr": 0x0})


def vcu_ccmodsts_standby():
    """
    VCU_CCModSts_Standby
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCModSts": 0x1})


def vcu_ccmodsts_active():
    """
    VCU_CCModSts_Active
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCModSts": 0x2})


def vcu_ccmodsts_off():
    """
    VCU_CCModSts_Off
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCModSts": 0x0})


def vcu_ccmodsts_cancel():
    """
    VCU_CCModSts_Cancel
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCModSts": 0x3})


def frm_accmod_standby():
    """
    FRM_ACCMod_StandBy
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x2})


def frm_accmod_passive():
    """
    FRM_ACCMod_Passive
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x1})


def frm_accmod_active():
    """
    FRM_ACCMod_Active
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x3})


def frm_accmod_override():
    """
    FRM_ACCMod_Override
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x4})


def frm_accmod_brakeonly():
    """
    FRM_ACCMod_BrakeOnly
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x5})


def frm_accmod_off():
    """
    FRM_ACCMod_Off
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x0})


def frm_accmod_failure():
    """
    FRM_ACCMod_Failure
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_ACCMod": 0x7})


def frm_aeb_greenlight_on1():
    """
    FRM_AEB_GreenLight_ON1
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEBSetFb": 0x1})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCWSetFb": 0x0})


def frm_aeb_greenlight_on2():
    """
    FRM_AEB_GreenLight_ON2
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEBSetFb": 0x0})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCWSetFb": 0x1})


def frm_aeb_greenlight_on3():
    """
    FRM_AEB_GreenLight_ON3
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEBSetFb": 0x1})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCWSetFb": 0x1})


def frm_aeb_redlight_on1():
    """
    FRM_AEB_RedLight_ON1
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEB_Flt": 0x1})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCW_Flt": 0x0})


def frm_aeb_redlight_on2():
    """
    FRM_AEB_RedLight_ON2
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEB_Flt": 0x0})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCW_Flt": 0x1})


def frm_aeb_redlight_on3():
    """
    FRM_AEB_RedLight_ON3
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEB_Flt": 0x1})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCW_Flt": 0x1})


def frm_aeb_light_off():
    """
    FRM_AEB_Light_Off
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEBSetFb": 0x0})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCWSetFb": 0x0})


def frm_aeb_redlight_on4():
    """
    FRM_AEB_RedLight_ON4
    """
    can_service.send_can_signal_message(msg=576, signal={"FRM_AEB_Flt": 0x0})
    can_service.send_can_signal_message(msg=576, signal={"FRM_FCW_Flt": 0x0})


def mpc_ldw_standby():
    """
    MPC_LDW_Standby
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x2})


def mpc_ldw_active():
    """
    MPC_LDW_Active
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x3})


def mpc_ldw_fault():
    """
    MPC_LDW_Fault
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x4})


def mpc_ldw_camerablocked():
    """
    MPC_LDW_Camerablocked
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x5})


def mpc_ldw_off():
    """
    MPC_LDW_Off
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x1})


def frm_tja_standby():
    """
    FRM_TJA_Standby
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_TJA_Sts": 0x02})


def frm_tja_active():
    """
    FRM_TJA_Active
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_TJA_Sts": 0x03})


def frm_tja_failure():
    """
    FRM_TJA_Failure
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_TJA_Sts": 0x04})


def frm_tja_passive():
    """
    FRM_TJA_Passive
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_TJA_Sts": 0x01})


def ai_hibeam_greenlight():
    """
    Ai_HiBeam_GreenLight
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_HBASts": 0x3})
    can_service.send_can_signal_message(msg=642, signal={"HU_HBASet": 0x0})


def ai_hibeam_off2():
    """
    Ai_HiBeam_OFF2
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_HBASts": 0x0})


def ai_hibeam_bluelight():
    """
    Ai_HiBeam_BlueLight
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_HBASts": 0x2})
    can_service.send_can_signal_message(msg=642, signal={"HU_HBASet": 0x0})
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HiBeamSts": 0x1})


def ai_hibeam_off3():
    """
    Ai_HiBeam_OFF3
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_HBASts": 0x1})
    can_service.send_can_signal_message(msg=400, signal={"iBCM_HiBeamSts": 0x0})


def esp_abs_light():
    """
    ESP_ABS_Light
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_ABS_Err": 0x1})


def esp_abs_dark():
    """
    ESP_ABS_Dark
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_ABS_Err": 0x0})


def epb_open():
    """
    EPB_OPEN
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FltLamp": 0x1})


def epb_blinking():
    """
    EPB_Blinking
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FltLamp": 0x2})


def epb_off():
    """
    EPB_OFF
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FltLamp": 0x0})


def autohold_open():
    """
    AutoHold_OPEN
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_AVH_Actv": 0x1})


def autohold_close():
    """
    AutoHold_CLOSE
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_AVH_Actv": 0x0})


def esp_on():
    """
    ESP_ON
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_Err": 0x1})
    can_service.send_can_signal_message(msg=369, signal={"ESP_Actv": 0x0})


def esp_blinking():
    """
    ESP_Blinking
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_Err": 0x0})
    can_service.send_can_signal_message(msg=369, signal={"ESP_Actv": 0x1})


def esp_off():
    """
    ESP_OFF
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_Err": 0x0})
    can_service.send_can_signal_message(msg=369, signal={"ESP_Actv": 0x0})


def epb_red_on():
    """
    EPB_Red_ON
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FctLamp": 0x1})


def epb_red_blinking():
    """
    EPB_Red_Blinking
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FctLamp": 0x2})


def epb_red_off():
    """
    EPB_Red_Off
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_EPB_FctLamp": 0x0})


def esp_hdc_lists_open():
    """
    ESP_HDC_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_HDC_Sts": 0x1})


def esp_hdc_lists_blink():
    """
    ESP_HDC_LiSts_BLINK
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_HDC_Sts": 0x2})


def esp_hdc_lists_close():
    """
    ESP_HDC_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_HDC_Sts": 0x0})


def esp_lists_red():
    """
    ESP_LiSts_RED
    """
    can_service.send_can_signal_message(msg=369, signal={"EPS_Sts": 0x1})


def esp_lists_yellow():
    """
    ESP_LiSts_YELLOW
    """
    can_service.send_can_signal_message(msg=369, signal={"EPS_Sts": 0x2})


def esp_lists_close():
    """
    ESP_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=369, signal={"EPS_Sts": 0x0})


def bcu_battcplowwarn_lists_open():
    """
    BCU_BattCpLowWarn_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=529, signal={"BCU_BattCpLowWarn": 0x1})


def bcu_battcplowwarn_lists_close():
    """
    BCU_BattCpLowWarn_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=529, signal={"BCU_BattCpLowWarn": 0x0})


def vcu_ptovrtmp_lists_open():
    """
    VCU_PTOvrTmp_LiSts_OPEN
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PTOvrTmp": 0x1})


def vcu_ptovrtmp_lists_open2():
    """
    VCU_PTOvrTmp_LiSts_OPEN2
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PTOvrTmp": 0x2})


def vcu_ptovrtmp_lists_open3():
    """
    VCU_PTOvrTmp_LiSts_OPEN3
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PTOvrTmp": 0x3})


def vcu_ptovrtmp_lists_open4():
    """
    VCU_PTOvrTmp_LiSts_OPEN4
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PTOvrTmp": 0x4})


def vcu_ptovrtmp_lists_close():
    """
    VCU_PTOvrTmp_LiSts_CLOSE
    """
    can_service.send_can_signal_message(msg=284, signal={"VCU_PTOvrTmp": 0x0})


def ptrdy_on():
    """
    PtRdy_ON
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_PtRdy": 0x1})


def ptrdy_off():
    """
    PtRdy_OFF
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_PtRdy": 0x0})


def esp_hmi_warnon_no_request():
    """
    ESP_HMI_WarnOn_NO_REQUEST
    """
    can_service.send_can_signal_message(msg=369, signal={"ESP_HMI_WarnOn": 0x0})


def ibcm_12vbattcplowwarn_no_warning():
    """
    iBCM_12VBattCpLowWarn_NO_WARNING
    """
    can_service.send_can_signal_message(msg=656, signal={"iBCM_12VBattCpLowWarn": 0x0})


def vcu_cctarspd_80():
    """
    VCU_CCTarSpd_80
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCTarSpd": 80})


def vcu_cctarspd_0():
    """
    VCU_CCTarSpd_0
    """
    can_service.send_can_signal_message(msg=370, signal={"VCU_CCTarSpd": 0})


def mpc_ldw_noinformation():
    """
    MPC_LDW_NoInformation
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_LDW_Sts": 0x0})


def frm_tja_off():
    """
    FRM_TJA_Off
    """
    can_service.send_can_signal_message(msg=585, signal={"MPC_TJA_Sts": 0x00})


def ai_hibeam_off1():
    """
    Ai_HiBeam_OFF1
    """
    can_service.send_can_signal_message(msg=642, signal={"HU_HBASet": 0x1})
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> Android元素对比(ElementCompare)                          #
    #                                                                                                                  #
    ####################################################################################################################


def main_page_fm_exist() -> tuple:
    """
    主页的fm存在
    """
    return android_service.exist(locator=main_card_page_fm_show, timeout=3.0),


def real_video_item_exist() -> tuple:
    """
    实时影像item存在
    """
    return android_service.exist(locator=real_video_item, timeout=3.0),
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 图片对比(ImageCompare)                                   #
    #                                                                                                                  #
    ####################################################################################################################


def compare_vehicle_residual_mileage_acc_800() -> tuple:
    """
    Vehicle_residual_mileage_ACC_800
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_acc_800"
    dark = "alllightoff.bmp"
    light = "residualmile_800.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_acc_400() -> tuple:
    """
    Vehicle_residual_mileage_ACC_400
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_acc_400"
    dark = "alllightoff.bmp"
    light = "residualmile_400.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_acc_0() -> tuple:
    """
    Vehicle_residual_mileage_ACC_0
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_acc_0"
    dark = "alllightoff.bmp"
    light = "residualmile_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_acc_850() -> tuple:
    """
    Vehicle_residual_mileage_ACC_850
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_acc_850"
    dark = "alllightoff.bmp"
    light = "residualmile_850.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_ign_800() -> tuple:
    """
    Vehicle_residual_mileage_IGN_800
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_ign_800"
    dark = "alllightoff.bmp"
    light = "residualmile_800_ign.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_ign_400() -> tuple:
    """
    Vehicle_residual_mileage_IGN_400
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_ign_400"
    dark = "alllightoff.bmp"
    light = "residualmile_400_ign.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_ign_0() -> tuple:
    """
    Vehicle_residual_mileage_IGN_0
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_ign_0"
    dark = "alllightoff.bmp"
    light = "residualmile_0_ign.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_ign_850() -> tuple:
    """
    Vehicle_residual_mileage_IGN_850
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_ign_850"
    dark = "alllightoff.bmp"
    light = "residualmile_850_ign.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_off_800() -> tuple:
    """
    Vehicle_residual_mileage_OFF_800
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_off_800"
    dark = "alllightoff.bmp"
    light = "residualmile_800.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_off_400() -> tuple:
    """
    Vehicle_residual_mileage_OFF_400
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_off_400"
    dark = "alllightoff.bmp"
    light = "residualmile_400.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_off_0() -> tuple:
    """
    Vehicle_residual_mileage_OFF_0
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_off_0"
    dark = "alllightoff.bmp"
    light = "residualmile_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_residual_mileage_off_850() -> tuple:
    """
    Vehicle_residual_mileage_OFF_850
    """
    compare_property = CompareProperty()
    image_name = "vehicle_residual_mileage_off_850"
    dark = "alllightoff.bmp"
    light = "residualmile_850.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(147, 533, 155, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_p_acc() -> tuple:
    """
    ActlGear_P_ACC
    """
    compare_property = CompareProperty()
    image_name = "actlgear_p_acc"
    dark = "alllightoff.bmp"
    light = "gear_p.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_p_ign() -> tuple:
    """
    ActlGear_P_IGN
    """
    compare_property = CompareProperty()
    image_name = "actlgear_p_ign"
    dark = "alllightoff.bmp"
    light = "gear_p.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_p_off() -> tuple:
    """
    ActlGear_P_OFF
    """
    compare_property = CompareProperty()
    image_name = "actlgear_p_off"
    dark = "alllightoff.bmp"
    light = "gear_p.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_r_ign() -> tuple:
    """
    ActlGear_R_IGN
    """
    compare_property = CompareProperty()
    image_name = "actlgear_r_ign"
    dark = "alllightoff.bmp"
    light = "gear_r.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_r_acc() -> tuple:
    """
    ActlGear_R_ACC
    """
    compare_property = CompareProperty()
    image_name = "actlgear_r_acc"
    dark = "alllightoff.bmp"
    light = "gear_r.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_n_ign() -> tuple:
    """
    ActlGear_N_IGN
    """
    compare_property = CompareProperty()
    image_name = "actlgear_n_ign"
    dark = "alllightoff.bmp"
    light = "gear_n.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_n_acc() -> tuple:
    """
    ActlGear_N_ACC
    """
    compare_property = CompareProperty()
    image_name = "actlgear_n_acc"
    dark = "alllightoff.bmp"
    light = "gear_n.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_d_ign() -> tuple:
    """
    ActlGear_D_IGN
    """
    compare_property = CompareProperty()
    image_name = "actlgear_d_ign"
    dark = "alllightoff.bmp"
    light = "gear_d.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_d_acc() -> tuple:
    """
    ActlGear_D_ACC
    """
    compare_property = CompareProperty()
    image_name = "actlgear_d_acc"
    dark = "alllightoff.bmp"
    light = "gear_d.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_d_ign1() -> tuple:
    """
    ActlGear_D_IGN1
    """
    compare_property = CompareProperty()
    image_name = "actlgear_d_ign1"
    dark = "alllightoff.bmp"
    light = "gear_d.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_r_off() -> tuple:
    """
    ActlGear_R_OFF
    """
    compare_property = CompareProperty()
    image_name = "actlgear_r_off"
    dark = "alllightoff.bmp"
    light = "gear_r.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgearr_r_ign1() -> tuple:
    """
    ActlGearr_R_IGN1
    """
    compare_property = CompareProperty()
    image_name = "actlgearr_r_ign1"
    dark = "alllightoff.bmp"
    light = "gear_r.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_n_off() -> tuple:
    """
    ActlGear_N_OFF
    """
    compare_property = CompareProperty()
    image_name = "actlgear_n_off"
    dark = "alllightoff.bmp"
    light = "gear_n.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgearr_r_ign2() -> tuple:
    """
    ActlGearr_R_IGN2
    """
    compare_property = CompareProperty()
    image_name = "actlgearr_r_ign2"
    dark = "alllightoff.bmp"
    light = "gear_r.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_d_off() -> tuple:
    """
    ActlGear_D_OFF
    """
    compare_property = CompareProperty()
    image_name = "actlgear_d_off"
    dark = "alllightoff.bmp"
    light = "gear_d.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgear_p_ign1() -> tuple:
    """
    ActlGear_P_IGN1
    """
    compare_property = CompareProperty()
    image_name = "actlgear_p_ign1"
    dark = "alllightoff.bmp"
    light = "gear_p.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_actlgearr_n_ign1() -> tuple:
    """
    ActlGearr_N_IGN1
    """
    compare_property = CompareProperty()
    image_name = "actlgearr_n_ign1"
    dark = "alllightoff.bmp"
    light = "gear_n.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(913, 632, 95, 67)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_300kw_ign() -> tuple:
    """
    VhclActlPwr_300Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_300kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_300.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_0kw_ign() -> tuple:
    """
    VhclActlPwr_0Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_0kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_200nkw_ign() -> tuple:
    """
    VhclActlPwr_200NKw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_200nkw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_200n.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_301kw_ign() -> tuple:
    """
    VhclActlPwr_301Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_301kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_301.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_160kw_ign() -> tuple:
    """
    VhclActlPwr_160Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_160kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_300.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_120nkw_ign() -> tuple:
    """
    VhclActlPwr_120NKw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_120nkw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_200n.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_100kw_ign() -> tuple:
    """
    VhclActlPwr_100Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_100kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_100.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_100kw_acc() -> tuple:
    """
    VhclActlPwr_100Kw_ACC
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_100kw_acc"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_100.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vhclactlpwr_120kw_ign() -> tuple:
    """
    VhclActlPwr_120Kw_IGN
    """
    compare_property = CompareProperty()
    image_name = "vhclactlpwr_120kw_ign"
    dark = "alllightoff.bmp"
    light = "vhclactlpwr_120.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1790, 214, 68, 337)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_0_ign() -> tuple:
    """
    Vehicle_Speed_0_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_0_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_1_ign() -> tuple:
    """
    Vehicle_Speed_1_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_1_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_1.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_2_ign() -> tuple:
    """
    Vehicle_Speed_2_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_2_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_2.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_72_ign() -> tuple:
    """
    Vehicle_Speed_72_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_72_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_72.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_100_inv_ign() -> tuple:
    """
    Vehicle_Speed_100_Inv_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_100_inv_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vehicle_speed_301_ign() -> tuple:
    """
    Vehicle_Speed_301_IGN
    """
    compare_property = CompareProperty()
    image_name = "vehicle_speed_301_ign"
    dark = "alllightoff.bmp"
    light = "vehiclespeed_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(86, 289, 286, 168)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_100_acc() -> tuple:
    """
    Disp_Soc_100_ACC
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_100_acc"
    dark = "alllightoff.bmp"
    light = "soc_100_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_4_acc() -> tuple:
    """
    Disp_Soc_4_ACC
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_4_acc"
    dark = "alllightoff.bmp"
    light = "soc_4_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_0_acc() -> tuple:
    """
    Disp_Soc_0_ACC
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_0_acc"
    dark = "alllightoff.bmp"
    light = "soc_0_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_101_acc() -> tuple:
    """
    Disp_Soc_101_ACC
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_101_acc"
    dark = "alllightoff.bmp"
    light = "soc_0_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_100_off() -> tuple:
    """
    Disp_Soc_100_OFF
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_100_off"
    dark = "alllightoff.bmp"
    light = "soc_100_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_4_off() -> tuple:
    """
    Disp_Soc_4_OFF
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_4_off"
    dark = "alllightoff.bmp"
    light = "soc_4_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_0_off() -> tuple:
    """
    Disp_Soc_0_OFF
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_0_off"
    dark = "alllightoff.bmp"
    light = "soc_0_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_101_off() -> tuple:
    """
    Disp_Soc_101_OFF
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_101_off"
    dark = "alllightoff.bmp"
    light = "soc_0_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_100_ign() -> tuple:
    """
    Disp_Soc_100_IGN
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_100_ign"
    dark = "alllightoff.bmp"
    light = "dispsoc_100.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_4_ign() -> tuple:
    """
    Disp_Soc_4_IGN
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_4_ign"
    dark = "alllightoff.bmp"
    light = "dispsoc_4.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_0_ign() -> tuple:
    """
    Disp_Soc_0_IGN
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_0_ign"
    dark = "alllightoff.bmp"
    light = "dispsoc_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_101_ign() -> tuple:
    """
    Disp_Soc_101_IGN
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_101_ign"
    dark = "alllightoff.bmp"
    light = "dispsoc_0.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_disp_soc_50_ign() -> tuple:
    """
    Disp_Soc_50_IGN
    """
    compare_property = CompareProperty()
    image_name = "disp_soc_50_ign"
    dark = "alllightoff.bmp"
    light = "dispsoc_50_yellow.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(116, 507, 253, 29)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_off_yellowlight_open_ign() -> tuple:
    """
    ESP_OFF_YellowLight_Open_IGN
    """
    compare_property = CompareProperty()
    image_name = "esp_off_yellowlight_open_ign"
    dark = "alllightoff.bmp"
    light = "esp_off_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(45, 582, 83, 65)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_off_yellowlight_close_ign() -> tuple:
    """
    ESP_OFF_YellowLight_Close_IGN
    """
    compare_property = CompareProperty()
    image_name = "esp_off_yellowlight_close_ign"
    dark = "esp_off_dark.bmp"
    light = "esp_off_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(45, 582, 83, 65)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_ebd_err_redlight_open_ign() -> tuple:
    """
    ESP_EBD_Err_RedLight_Open_IGN
    """
    compare_property = CompareProperty()
    image_name = "esp_ebd_err_redlight_open_ign"
    dark = "alllightoff.bmp"
    light = "ebd_err_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(262, 555, 66, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_ebd_err_redlight_close_ign() -> tuple:
    """
    ESP_EBD_Err_RedLight_Close_IGN
    """
    compare_property = CompareProperty()
    image_name = "esp_ebd_err_redlight_close_ign"
    dark = "ebd_dark.bmp"
    light = "ebd_err_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(262, 555, 66, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_open_pwroff() -> tuple:
    """
    Left_Turn_Lamp_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_open_pwroff"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_close_pwroff() -> tuple:
    """
    Left_Turn_Lamp_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_close_pwroff"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_open_pwracc() -> tuple:
    """
    Left_Turn_Lamp_OPEN_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_open_pwracc"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_close_pwracc() -> tuple:
    """
    Left_Turn_Lamp_CLOSE_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_close_pwracc"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_open_pwrign() -> tuple:
    """
    Left_Turn_Lamp_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_open_pwrign"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_left_turn_lamp_close_pwrign() -> tuple:
    """
    Left_Turn_Lamp_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "left_turn_lamp_close_pwrign"
    dark = "alllightoff.bmp"
    light = "left_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_open_pwroff() -> tuple:
    """
    Right_Turn_Lamp_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_open_pwroff"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_close_pwroff() -> tuple:
    """
    Right_Turn_Lamp_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_close_pwroff"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_open_pwracc() -> tuple:
    """
    Right_Turn_Lamp_OPEN_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_open_pwracc"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_close_pwracc() -> tuple:
    """
    Right_Turn_Lamp_CLOSE_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_close_pwracc"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_open_pwrign() -> tuple:
    """
    Right_Turn_Lamp_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_open_pwrign"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_right_turn_lamp_close_pwrign() -> tuple:
    """
    Right_Turn_Lamp_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "right_turn_lamp_close_pwrign"
    dark = "alllightoff.bmp"
    light = "right_light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_warning_open_pwroff() -> tuple:
    """
    Warning_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "warning_open_pwroff"
    dark = "alllightoff.bmp"
    light = "warning_light.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_warning_close_pwroff() -> tuple:
    """
    Warning_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "warning_close_pwroff"
    dark = "alllightoff.bmp"
    light = "warning_light.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1232, 36, 55, 49), (633, 39, 58, 46)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_position_open_pwroff() -> tuple:
    """
    Position_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "position_open_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1593, 595, 61, 43)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_position_close_pwroff() -> tuple:
    """
    Position_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "position_close_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1593, 595, 61, 43)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_high_beam_open_pwroff() -> tuple:
    """
    High_Beam_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "high_beam_open_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1459, 593, 60, 47)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_high_beam_close_pwroff() -> tuple:
    """
    High_Beam_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "high_beam_close_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1459, 593, 60, 47)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_low_beam_open_pwroff() -> tuple:
    """
    Low_Beam_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "low_beam_open_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1526, 592, 61, 48)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_low_beam_close_pwroff() -> tuple:
    """
    Low_Beam_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "low_beam_close_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1526, 592, 61, 48)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_refog_open_pwroff() -> tuple:
    """
    ReFog_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "refog_open_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1732, 587, 56, 55)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_refog_close_pwroff() -> tuple:
    """
    ReFog_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "refog_close_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1732, 587, 56, 55)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_front_fog_open_pwroff() -> tuple:
    """
    Front_Fog_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "front_fog_open_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1665, 591, 54, 48)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_front_fog_close_pwroff() -> tuple:
    """
    Front_Fog_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "front_fog_close_pwroff"
    dark = "alllightoff.bmp"
    light = "light_on.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1665, 591, 54, 48)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_fl_doorajarsts_open() -> tuple:
    """
    FL_DoorAjarSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "fl_doorajarsts_open"
    dark = "alllightoff.bmp"
    light = "fl_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(758, 219, 132, 98)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_fl_doorajarsts_close() -> tuple:
    """
    FL_DoorAjarSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "fl_doorajarsts_close"
    dark = "alllightoff.bmp"
    light = "fl_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(758, 219, 132, 98)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_fr_doorajarsts_open() -> tuple:
    """
    FR_DoorAjarSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "fr_doorajarsts_open"
    dark = "alllightoff.bmp"
    light = "fr_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1041, 217, 117, 95)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_fr_doorajarsts_close() -> tuple:
    """
    FR_DoorAjarSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "fr_doorajarsts_close"
    dark = "alllightoff.bmp"
    light = "fr_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1041, 217, 117, 95)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rr_doorajarsts_open() -> tuple:
    """
    RR_DoorAjarSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "rr_doorajarsts_open"
    dark = "alllightoff.bmp"
    light = "rr_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1037, 331, 112, 108)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rr_doorajarsts_close() -> tuple:
    """
    RR_DoorAjarSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "rr_doorajarsts_close"
    dark = "alllightoff.bmp"
    light = "rr_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1037, 331, 112, 108)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rl_doorajarsts_open() -> tuple:
    """
    RL_DoorAjarSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "rl_doorajarsts_open"
    dark = "alllightoff.bmp"
    light = "rl_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(783, 330, 114, 109)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rl_doorajarsts_close() -> tuple:
    """
    RL_DoorAjarSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "rl_doorajarsts_close"
    dark = "alllightoff.bmp"
    light = "rl_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(783, 330, 114, 109)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_trunksts_open() -> tuple:
    """
    TrunkSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "trunksts_open"
    dark = "alllightoff.bmp"
    light = "tr_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(875, 509, 176, 96)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_trunksts_close() -> tuple:
    """
    TrunkSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "trunksts_close"
    dark = "alllightoff.bmp"
    light = "tr_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(875, 509, 176, 96)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_hoodsts_open() -> tuple:
    """
    HoodSts_OPEN
    """
    compare_property = CompareProperty()
    image_name = "hoodsts_open"
    dark = "alllightoff.bmp"
    light = "hood_door_open.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(861, 93, 214, 113)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_hoodsts_close() -> tuple:
    """
    HoodSts_CLOSE
    """
    compare_property = CompareProperty()
    image_name = "hoodsts_close"
    dark = "alllightoff.bmp"
    light = "hood_door_open.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(861, 93, 214, 113)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_parking_status() -> tuple:
    """
    Parking_Status
    """
    compare_property = CompareProperty()
    image_name = "parking_status"
    dark = "alllightoff.bmp"
    light = "parking_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(844, 82, 246, 485)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_driving_status() -> tuple:
    """
    Driving_Status
    """
    compare_property = CompareProperty()
    image_name = "driving_status"
    dark = "alllightoff.bmp"
    light = "driving_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(829, 279, 257, 278)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_charging_status() -> tuple:
    """
    Charging_Status
    """
    compare_property = CompareProperty()
    image_name = "charging_status"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(704, 266, 506, 243), (1394, 141, 47, 52), (1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_charging_parking_status() -> tuple:
    """
    CHARGING_Parking_Status
    """
    compare_property = CompareProperty()
    image_name = "charging_parking_status"
    dark = "alllightoff.bmp"
    light = "parking_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(704, 266, 506, 243), (1394, 141, 47, 52), (1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_tpmssystem_statusabnormal_pwracc() -> tuple:
    """
    TPMSSystem_StatusAbnormal_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "tpmssystem_statusabnormal_pwracc"
    dark = "alllightoff.bmp"
    light = "tpms_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1589, 115, 62, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_tpmssystem_statusnormal_pwracc() -> tuple:
    """
    TPMSSystem_StatusNormal_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "tpmssystem_statusnormal_pwracc"
    dark = "tmps_lightdark.bmp"
    light = "tpms_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1589, 115, 62, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_tire_right_frontpressure_pwracc() -> tuple:
    """
    Tire_Right_FrontPressure_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "tire_right_frontpressure_pwracc"
    dark = "tmps_lightdark.bmp"
    light = "tpms_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1589, 115, 62, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_tire_left_frontpressure_pwracc() -> tuple:
    """
    Tire_Left_FrontPressure_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "tire_left_frontpressure_pwracc"
    dark = "tmps_lightdark.bmp"
    light = "tpms_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1589, 115, 62, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_tire_right_fronttemperature_pwracc() -> tuple:
    """
    Tire_Right_FrontTemperature_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "tire_right_fronttemperature_pwracc"
    dark = "tmps_lightdark.bmp"
    light = "tpms_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1589, 115, 62, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_airbag_light_open_pwrign() -> tuple:
    """
    AirBag_Light_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "airbag_light_open_pwrign"
    dark = "alllightoff.bmp"
    light = "airbag_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1098, 9, 59, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_airbag_light_blink_pwrign() -> tuple:
    """
    AirBag_Light_Blink_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "airbag_light_blink_pwrign"
    dark = "airbag_lightdark.bmp"
    light = "airbag_lighton.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1098, 9, 59, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_airbag_light_close_pwrign() -> tuple:
    """
    AirBag_Light_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "airbag_light_close_pwrign"
    dark = "airbag_lightdark.bmp"
    light = "airbag_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1098, 9, 59, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frontbelt_out_ign_pwrign() -> tuple:
    """
    FrontBelt_OUT_IGN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "frontbelt_out_ign_pwrign"
    dark = "alllightoff.bmp"
    light = "frontbelt_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1161, 5, 69, 84)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftfrontbelt_out_pwrign() -> tuple:
    """
    LeftFrontBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftfrontbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "frontbelt_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1161, 5, 69, 84)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rightfrontbelt_out_pwrign() -> tuple:
    """
    RightFrontBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "rightfrontbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "frontbelt_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1161, 5, 69, 84)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frontbelt_in_ign_pwrign() -> tuple:
    """
    FrontBelt_IN_IGN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "frontbelt_in_ign_pwrign"
    dark = "frontbelt_lightdark.bmp"
    light = "frontbelt_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1161, 5, 69, 84)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftrearbelt_in_pwrign() -> tuple:
    """
    LeftRearBelt_IN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftrearbelt_in_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton1.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftctrrearbelt_in_pwrign() -> tuple:
    """
    LeftCtrRearBelt_IN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftctrrearbelt_in_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton2.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftctrrightrearbelt_in_pwrign() -> tuple:
    """
    LeftCtrRightRearBelt_IN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftctrrightrearbelt_in_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton3.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftrearbelt_out_pwrign() -> tuple:
    """
    LeftRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton4.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftctrrearbelt_out_pwrign() -> tuple:
    """
    LeftCtrRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftctrrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton5.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rearbelt_out_pwrign() -> tuple:
    """
    RearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "rearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton6.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ctrrearbelt_out_pwrign() -> tuple:
    """
    CtrRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "ctrrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton7.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_leftrightrearbelt_out_pwrign() -> tuple:
    """
    LeftRightRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "leftrightrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton8.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ctrrightrearbelt_out_pwrign() -> tuple:
    """
    CtrRightRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "ctrrightrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton9.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rightrearbelt_out_pwrign() -> tuple:
    """
    RightRearBelt_OUT_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "rightrearbelt_out_pwrign"
    dark = "alllightoff.bmp"
    light = "rearbelt_lighton10.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rearbelt_pwrign() -> tuple:
    """
    RearBelt_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "rearbelt_pwrign"
    dark = "rearbelt_lightdark.bmp"
    light = "rearbelt_lightoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_rearbelt_pwrign1() -> tuple:
    """
    RearBelt_PwrIGN1
    """
    compare_property = CompareProperty()
    image_name = "rearbelt_pwrign1"
    dark = "rearbelt_lightdark.bmp"
    light = "rearbelt_lightoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(731, 32, 134, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_abs_yellowlight_open_pwrign() -> tuple:
    """
    ESP_ABS_YellowLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "esp_abs_yellowlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "abs_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(131, 569, 60, 55)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_abs_yellowlight_close_pwrign() -> tuple:
    """
    ESP_ABS_YellowLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "esp_abs_yellowlight_close_pwrign"
    dark = "abs_lightdark.bmp"
    light = "abs_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(131, 569, 60, 55)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_err_yellowlight_open_pwrign() -> tuple:
    """
    EPB_Err_YellowLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_err_yellowlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "epb_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(395, 561, 71, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_err_yellowlight_bink_pwrign() -> tuple:
    """
    EPB_Err_YellowLight_Bink_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_err_yellowlight_bink_pwrign"
    dark = "alllightoff.bmp"
    light = "epb_lighton.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(395, 561, 71, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_err_yellowlight_close_pwrign() -> tuple:
    """
    EPB_Err_YellowLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_err_yellowlight_close_pwrign"
    dark = "epb_warn_lightdark.bmp"
    light = "epb_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(395, 561, 71, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_autohold_greenlight_open_pwrign() -> tuple:
    """
    AutoHold_GreenLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "autohold_greenlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "autohold_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(761, 607, 81, 70)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_autohold_greenlight_close_pwrign() -> tuple:
    """
    AutoHold_GreenLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "autohold_greenlight_close_pwrign"
    dark = "alllightdark_ign.bmp"
    light = "autohold_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(761, 607, 81, 70)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_warn_yellowlight_open_pwrign() -> tuple:
    """
    ESP_WARN_YellowLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "esp_warn_yellowlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "esp_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(64, 561, 61, 68)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_warn_yellowlight_blinking_pwrign() -> tuple:
    """
    ESP_WARN_YellowLight_Blinking_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "esp_warn_yellowlight_blinking_pwrign"
    dark = "esp_lightdark_ign.bmp"
    light = "esp_lighton.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(64, 561, 61, 68)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_esp_warn_yellowlight_close_pwrign() -> tuple:
    """
    ESP_WARN_YellowLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "esp_warn_yellowlight_close_pwrign"
    dark = "alllightdark_ign.bmp"
    light = "esp_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(64, 561, 61, 68)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_open_pwroff() -> tuple:
    """
    EPB_RedLight_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_open_pwroff"
    dark = "alllightoff.bmp"
    light = "redepb_lighton_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_blinking_pwroff() -> tuple:
    """
    EPB_RedLight_Blinking_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_blinking_pwroff"
    dark = "alllightoff.bmp"
    light = "redepb_lighton_acc.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_close_pwroff() -> tuple:
    """
    EPB_RedLight_CLOSE_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_close_pwroff"
    dark = "alllightoff.bmp"
    light = "red_epb_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_open_pwrign() -> tuple:
    """
    EPB_RedLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "red_epb_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_blinking_pwrign() -> tuple:
    """
    EPB_RedLight_Blinking_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_blinking_pwrign"
    dark = "red_epb_lightdark_ign.bmp"
    light = "red_epb_lighton.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_close_pwrign() -> tuple:
    """
    EPB_RedLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_close_pwrign"
    dark = "alllightdark_ign.bmp"
    light = "red_epb_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_open_pwracc() -> tuple:
    """
    EPB_RedLight_OPEN_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_open_pwracc"
    dark = "alllightoff.bmp"
    light = "redepb_lighton_acc.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_blinking_pwracc() -> tuple:
    """
    EPB_RedLight_Blinking_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_blinking_pwracc"
    dark = "alllightoff.bmp"
    light = "redepb_lighton_acc.bmp"
    compare_type = "闪烁图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_epb_redlight_close_pwracc() -> tuple:
    """
    EPB_RedLight_CLOSE_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "epb_redlight_close_pwracc"
    dark = "alllightoff.bmp"
    light = "red_epb_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(765, 555, 89, 57)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_hdc_greenlight_open_pwrign() -> tuple:
    """
    EPS_HDC_GreenLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "eps_hdc_greenlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "hdc_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(694, 593, 78, 76)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_hdc_greenlight_blinking_pwrign() -> tuple:
    """
    EPS_HDC_GreenLight_Blinking_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "eps_hdc_greenlight_blinking_pwrign"
    dark = "hdc_lightdark_ign.bmp"
    light = "hdc_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(694, 593, 78, 76)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_hdc_greenlight_close_pwrign() -> tuple:
    """
    EPS_HDC_GreenLight_Close_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "eps_hdc_greenlight_close_pwrign"
    dark = "11c_singal_lightdark.bmp"
    light = "hdc_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(694, 593, 78, 76)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_redlight_open_pwrign() -> tuple:
    """
    EPS_RedLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "eps_redlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "red_eps_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(325, 553, 77, 83)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_yellowlight_open_pwrign() -> tuple:
    """
    EPS_YellowLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "eps_yellowlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "yellow_eps_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(325, 553, 77, 83)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_eps_light_close_ign() -> tuple:
    """
    EPS_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "eps_light_close_ign"
    dark = "alllightdark_ign.bmp"
    light = "yellow_eps_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(325, 553, 77, 83)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_battcplowwarn_yellowlight_open_pwrign() -> tuple:
    """
    BattCpLowWarn_YellowLight_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "battcplowwarn_yellowlight_open_pwrign"
    dark = "alllightoff.bmp"
    light = "battcplowwarn_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(55, 489, 68, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_battcplowwarn_yellowlight_close_pwrign() -> tuple:
    """
    BattCpLowWarn_YellowLight_CLOSE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "battcplowwarn_yellowlight_close_pwrign"
    dark = "lowbattery_lightdark.bmp"
    light = "battcplowwarn_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(55, 489, 68, 66)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptovrtmp_light_open1_ign() -> tuple:
    """
    VCU_PTOvrTmp_LIGHT_OPEN1_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptovrtmp_light_open1_ign"
    dark = "alllightoff.bmp"
    light = "ptovrtmp_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(330, 112, 63, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptovrtmp_light_open2_ign() -> tuple:
    """
    VCU_PTOvrTmp_LIGHT_OPEN2_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptovrtmp_light_open2_ign"
    dark = "alllightoff.bmp"
    light = "ptovrtmp_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(330, 112, 63, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptovrtmp_light_open3_ign() -> tuple:
    """
    VCU_PTOvrTmp_LIGHT_OPEN3_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptovrtmp_light_open3_ign"
    dark = "alllightoff.bmp"
    light = "ptovrtmp_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(330, 112, 63, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptovrtmp_light_open4_ign() -> tuple:
    """
    VCU_PTOvrTmp_LIGHT_OPEN4_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptovrtmp_light_open4_ign"
    dark = "alllightoff.bmp"
    light = "ptovrtmp_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(330, 112, 63, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptovrtmp_light_close_ign() -> tuple:
    """
    VCU_PTOvrTmp_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptovrtmp_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "ptovrtmp_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(330, 112, 63, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0_ign1() -> tuple:
    """
    Ready_ON_Speed0_IGN1
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0_ign1"
    dark = "alllightoff.bmp"
    light = "ready_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_off_speed20_ign1() -> tuple:
    """
    Ready_OFF_Speed20_IGN1
    """
    compare_property = CompareProperty()
    image_name = "ready_off_speed20_ign1"
    dark = "11c_singal_lightdark.bmp"
    light = "ready_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0_ign2() -> tuple:
    """
    Ready_ON_Speed0_IGN2
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0_ign2"
    dark = "alllightoff.bmp"
    light = "ready_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed50_ign3() -> tuple:
    """
    Ready_ON_Speed50_IGN3
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed50_ign3"
    dark = "11c_singal_lightdark.bmp"
    light = "ready_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0_ign4() -> tuple:
    """
    Ready_ON_Speed0_IGN4
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0_ign4"
    dark = "alllightoff.bmp"
    light = "ready_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0_ign_acc() -> tuple:
    """
    Ready_ON_Speed0_IGN_ACC
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0_ign_acc"
    dark = "11c_singal_lightdark.bmp"
    light = "ready_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0__pwroff_pwrign() -> tuple:
    """
    Ready_ON_Speed0__PwrOFF_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0__pwroff_pwrign"
    dark = "alllightoff.bmp"
    light = "ready_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ready_on_speed0_pwrign_pwroff() -> tuple:
    """
    Ready_ON_Speed0_PwrIGN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "ready_on_speed0_pwrign_pwroff"
    dark = "11c_singal_lightdark.bmp"
    light = "ready_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(900, 34, 115, 56)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_open1_acc() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN1_ACC
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_open1_acc"
    dark = "alllightoff.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_open2_acc() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN2_ACC
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_open2_acc"
    dark = "alllightoff.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_close_acc() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_CLOSE_ACC
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_close_acc"
    dark = "11c_singal_lightdark.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_open1_ign() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN1_IGN
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_open1_ign"
    dark = "alllightoff.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_open2_ign() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_OPEN2_IGN
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_open2_ign"
    dark = "alllightoff.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_b12vpower_charging_sts_light_close_ign() -> tuple:
    """
    B12VPOWER_CHARGING_Sts_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "b12vpower_charging_sts_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "12vbatterycharge_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1718, 111, 80, 69)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptfltindcr_sts_light_open_ign() -> tuple:
    """
    VCU_PtFltIndcr_Sts_LIGHT_OPEN_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptfltindcr_sts_light_open_ign"
    dark = "alllightoff.bmp"
    light = "sys_failure_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(189, 94, 78, 103)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_ptfltindcr_sts_light_close_ign() -> tuple:
    """
    VCU_PtFltIndcr_Sts_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_ptfltindcr_sts_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "sys_failure_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(189, 94, 78, 103)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_open_off() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_OFF
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_open_off"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_close_off() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_OFF
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_close_off"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_open_acc() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_ACC
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_open_acc"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_close_acc() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_ACC
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_close_acc"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_open_ign() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_OPEN_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_open_ign"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgstsindcr_light_close_ign() -> tuple:
    """
    VCU_ChrgStsIndcr_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgstsindcr_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1376, 101, 79, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_open_pwroff() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrOFF
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_open_pwroff"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_close_pwrofff() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSE_PwrOFFF
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_close_pwrofff"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_open_pwracc() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_open_pwracc"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_close_pwracc() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSE_PwrACC
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_close_pwracc"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_open_pwrign() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_OPEN_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_open_pwrign"
    dark = "alllightoff.bmp"
    light = "charging_status.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_chrgconnectindcr_light_closle_pwrign() -> tuple:
    """
    VCU_ChrgConnectIndcr_LIGHT_CLOSLE_PwrIGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_chrgconnectindcr_light_closle_pwrign"
    dark = "11c_singal_lightdark.bmp"
    light = "charging_status.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1451, 105, 70, 93)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mcu_motoverspdwarn_frnt_light_open1_ign() -> tuple:
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_OPEN1_IGN
    """
    compare_property = CompareProperty()
    image_name = "mcu_motoverspdwarn_frnt_light_open1_ign"
    dark = "alllightoff.bmp"
    light = "motoverspdwarn_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(392, 105, 74, 88)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mcu_motoverspdwarn_frnt_light_open2_ign() -> tuple:
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_OPEN2_IGN
    """
    compare_property = CompareProperty()
    image_name = "mcu_motoverspdwarn_frnt_light_open2_ign"
    dark = "alllightoff.bmp"
    light = "motoverspdwarn_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(392, 105, 74, 88)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mcu_motoverspdwarn_frnt_light_close_ign() -> tuple:
    """
    MCU_MotOverSpdWarn_Frnt_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "mcu_motoverspdwarn_frnt_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "motoverspdwarn_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(392, 105, 74, 88)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_turtlelampon_light_open_ign() -> tuple:
    """
    VCU_TurtleLampOn_LIGHT_OPEN_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_turtlelampon_light_open_ign"
    dark = "alllightoff.bmp"
    light = "turtlelampon.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(124, 107, 72, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_turtlelampon_light_close_ign() -> tuple:
    """
    VCU_TurtleLampOn_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_turtlelampon_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "turtlelampon.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(124, 107, 72, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_pwrbatthvcutoffindcr_light_open_ign() -> tuple:
    """
    VCU_PwrBattHVCutOffIndcr_LIGHT_OPEN_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_pwrbatthvcutoffindcr_light_open_ign"
    dark = "alllightoff.bmp"
    light = "hv_chargecutoff.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(54, 473, 66, 47)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_pwrbatthvcutoffindcr_light_close_ign() -> tuple:
    """
    VCU_PwrBattHVCutOffIndcr_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_pwrbatthvcutoffindcr_light_close_ign"
    dark = "hv_chargecutoff_dark.bmp"
    light = "hv_chargecutoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(54, 473, 66, 47)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_pwrbattfltindcr_light_open_ign() -> tuple:
    """
    VCU_PwrBattFltIndcr_LIGHT_OPEN_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_pwrbattfltindcr_light_open_ign"
    dark = "alllightoff.bmp"
    light = "pwrbattfltindcr_lighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(262, 112, 65, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_vcu_pwrbattfltindcr_light_close_ign() -> tuple:
    """
    VCU_PwrBattFltIndcr_LIGHT_CLOSE_IGN
    """
    compare_property = CompareProperty()
    image_name = "vcu_pwrbattfltindcr_light_close_ign"
    dark = "11c_singal_lightdark.bmp"
    light = "pwrbattfltindcr_lighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(262, 112, 65, 72)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_standby_ign1() -> tuple:
    """
    CCMod_Standby_IGN1
    """
    compare_property = CompareProperty()
    image_name = "ccmod_standby_ign1"
    dark = "alllightoff.bmp"
    light = "cc_whitelighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_standby_ign2() -> tuple:
    """
    CCMod_Standby_IGN2
    """
    compare_property = CompareProperty()
    image_name = "ccmod_standby_ign2"
    dark = "alllightoff.bmp"
    light = "cc_whitelighton1.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_active_ign3() -> tuple:
    """
    CCMod_Active_IGN3
    """
    compare_property = CompareProperty()
    image_name = "ccmod_active_ign3"
    dark = "alllightoff.bmp"
    light = "cc_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_active_off() -> tuple:
    """
    CCMod_Active_OFF
    """
    compare_property = CompareProperty()
    image_name = "ccmod_active_off"
    dark = "11c_singal_lightdark.bmp"
    light = "cc_greenlighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_active_ign4() -> tuple:
    """
    CCMod_Active_IGN4
    """
    compare_property = CompareProperty()
    image_name = "ccmod_active_ign4"
    dark = "alllightoff.bmp"
    light = "cc_greenlighton1.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_cancel_ign5() -> tuple:
    """
    CCMod_Cancel_IGN5
    """
    compare_property = CompareProperty()
    image_name = "ccmod_cancel_ign5"
    dark = "alllightoff.bmp"
    light = "cc_whitelighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_cancel_ign6() -> tuple:
    """
    CCMod_Cancel_IGN6
    """
    compare_property = CompareProperty()
    image_name = "ccmod_cancel_ign6"
    dark = "alllightoff.bmp"
    light = "cc_whitelighton1.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ccmod_standby_acc() -> tuple:
    """
    CCMod_Standby_ACC
    """
    compare_property = CompareProperty()
    image_name = "ccmod_standby_acc"
    dark = "11c_singal_lightdark.bmp"
    light = "cc_lightoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_standby_ign2() -> tuple:
    """
    ACCMod_StandBy_IGN2
    """
    compare_property = CompareProperty()
    image_name = "accmod_standby_ign2"
    dark = "alllightoff.bmp"
    light = "acc_whitelighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_passive() -> tuple:
    """
    ACCMod_Passive
    """
    compare_property = CompareProperty()
    image_name = "accmod_passive"
    dark = "11c_singal_lightdark.bmp"
    light = "acc_whitelighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_active_ign3() -> tuple:
    """
    ACCMod_Active_IGN3
    """
    compare_property = CompareProperty()
    image_name = "accmod_active_ign3"
    dark = "alllightoff.bmp"
    light = "acc_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_override_ign4() -> tuple:
    """
    ACCMod_Override_IGN4
    """
    compare_property = CompareProperty()
    image_name = "accmod_override_ign4"
    dark = "alllightoff.bmp"
    light = "acc_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_brakeonly_ign5() -> tuple:
    """
    ACCMod_BrakeOnly_IGN5
    """
    compare_property = CompareProperty()
    image_name = "accmod_brakeonly_ign5"
    dark = "alllightoff.bmp"
    light = "acc_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_brakeonly_dark() -> tuple:
    """
    ACCMod_BrakeOnly_Dark
    """
    compare_property = CompareProperty()
    image_name = "accmod_brakeonly_dark"
    dark = "11c_singal_lightdark.bmp"
    light = "acc_greenlighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_brakeonly_ign6() -> tuple:
    """
    ACCMod_BrakeOnly_IGN6
    """
    compare_property = CompareProperty()
    image_name = "accmod_brakeonly_ign6"
    dark = "alllightoff.bmp"
    light = "acc_redlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_accmod_failure_dark() -> tuple:
    """
    ACCMod_Failure_Dark
    """
    compare_property = CompareProperty()
    image_name = "accmod_failure_dark"
    dark = "11c_singal_lightdark.bmp"
    light = "acc_redlighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1135, 275, 230, 79)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_greenlight_ign1() -> tuple:
    """
    FRM_AEB_GreenLight_IGN1
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_greenlight_ign1"
    dark = "alllightoff.bmp"
    light = "aeb_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_greenlight_ign2() -> tuple:
    """
    FRM_AEB_GreenLight_IGN2
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_greenlight_ign2"
    dark = "alllightoff.bmp"
    light = "aeb_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_greenlight_ign3() -> tuple:
    """
    FRM_AEB_GreenLight_IGN3
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_greenlight_ign3"
    dark = "alllightoff.bmp"
    light = "aeb_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_redlight_ign1() -> tuple:
    """
    FRM_AEB_RedLight_IGN1
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_redlight_ign1"
    dark = "alllightoff.bmp"
    light = "aeb_redlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_redlight_ign2() -> tuple:
    """
    FRM_AEB_RedLight_IGN2
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_redlight_ign2"
    dark = "alllightoff.bmp"
    light = "aeb_redlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_redlight_ign3() -> tuple:
    """
    FRM_AEB_RedLight_IGN3
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_redlight_ign3"
    dark = "alllightoff.bmp"
    light = "aeb_redlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_aeb_light_dark() -> tuple:
    """
    FRM_AEB_Light_Dark
    """
    compare_property = CompareProperty()
    image_name = "frm_aeb_light_dark"
    dark = "11c_singal_lightdark.bmp"
    light = "aeb_redlighton.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1145, 622, 85, 58)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mpc_ldw_standbylight_ign2() -> tuple:
    """
    MPC_LDW_StandbyLight_IGN2
    """
    compare_property = CompareProperty()
    image_name = "mpc_ldw_standbylight_ign2"
    dark = "alllightoff.bmp"
    light = "ldw_white.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1083, 597, 71, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mpc_ldw_activelight_ign3() -> tuple:
    """
    MPC_LDW_ActiveLight_IGN3
    """
    compare_property = CompareProperty()
    image_name = "mpc_ldw_activelight_ign3"
    dark = "alllightoff.bmp"
    light = "ldw_green.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1083, 597, 71, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mpc_ldw_faultlight_ign4() -> tuple:
    """
    MPC_LDW_FaultLight_IGN4
    """
    compare_property = CompareProperty()
    image_name = "mpc_ldw_faultlight_ign4"
    dark = "alllightoff.bmp"
    light = "ldw_red.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1083, 597, 71, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mpc_ldw_camerablocklight_ign5() -> tuple:
    """
    MPC_LDW_CamerablockLight_IGN5
    """
    compare_property = CompareProperty()
    image_name = "mpc_ldw_camerablocklight_ign5"
    dark = "alllightoff.bmp"
    light = "ldw_red.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1083, 597, 71, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_mpc_ldw_offlight_ign1() -> tuple:
    """
    MPC_LDW_OffLight_IGN1
    """
    compare_property = CompareProperty()
    image_name = "mpc_ldw_offlight_ign1"
    dark = "11c_singal_lightdark.bmp"
    light = "ldw_red.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1083, 597, 71, 74)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_tja__standbylight_ign2() -> tuple:
    """
    FRM_TJA__StandbyLight_IGN2
    """
    compare_property = CompareProperty()
    image_name = "frm_tja__standbylight_ign2"
    dark = "alllightoff.bmp"
    light = "tja_white.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(683, 282, 103, 94)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_tja__activelight_ign3() -> tuple:
    """
    FRM_TJA__ActiveLight_IGN3
    """
    compare_property = CompareProperty()
    image_name = "frm_tja__activelight_ign3"
    dark = "alllightoff.bmp"
    light = "tja_green.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(683, 282, 103, 94)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_tja__faultlight_ign4() -> tuple:
    """
    FRM_TJA__FaultLight_IGN4
    """
    compare_property = CompareProperty()
    image_name = "frm_tja__faultlight_ign4"
    dark = "alllightoff.bmp"
    light = "tja_red.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(683, 282, 103, 94)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_frm_tja_passivelight_ign1() -> tuple:
    """
    FRM_TJA_PassiveLight_IGN1
    """
    compare_property = CompareProperty()
    image_name = "frm_tja_passivelight_ign1"
    dark = "11c_singal_lightdark.bmp"
    light = "tja_red.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(683, 282, 103, 94)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ai_hibeam_greenlight_ign1() -> tuple:
    """
    Ai_HiBeam_GreenLight_IGN1
    """
    compare_property = CompareProperty()
    image_name = "ai_hibeam_greenlight_ign1"
    dark = "alllightoff.bmp"
    light = "ai_hibeam_greenlighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1450, 581, 75, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ai_hibeam_greenlight_off1() -> tuple:
    """
    Ai_HiBeam_GreenLight_OFF1
    """
    compare_property = CompareProperty()
    image_name = "ai_hibeam_greenlight_off1"
    dark = "11c_singal_lightdark.bmp"
    light = "ai_hibeam_lightoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1450, 581, 75, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ai_hibeam_bluelight_ign2() -> tuple:
    """
    Ai_HiBeam_BlueLight_IGN2
    """
    compare_property = CompareProperty()
    image_name = "ai_hibeam_bluelight_ign2"
    dark = "alllightoff.bmp"
    light = "ai_hibeam_bluelighton.bmp"
    compare_type = "亮图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1450, 581, 75, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template


def compare_ai_hibeam_bluelight_off2() -> tuple:
    """
    Ai_HiBeam_BlueLight_OFF2
    """
    compare_property = CompareProperty()
    image_name = "ai_hibeam_bluelight_off2"
    dark = "11c_singal_lightdark.bmp"
    light = "ai_hibeam_lightoff.bmp"
    compare_type = "暗图"
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template="\\".join([templates, light]),
                               dark_template="\\".join([templates, dark]),
                               positions=[(1450, 581, 75, 64)],
                               similarity=99.01,
                               gray=False,
                               gray_threshold=0)
    result = image_compare.compare(compare_property)
    files = image_compare.handle_images(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 信息保存(Information)                                    #
    #                                                                                                                  #
    ####################################################################################################################


def check_driver_exist():
    """
    检查行驶数据是否正确
    """
    attr = ElementAttributeEnum.from_value("TEXT")
    info = android_service.get_element_attribute(driver_data)[attr]
    return info
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 信息对比(InformationCompare)                             #
    #                                                                                                                  #
    ####################################################################################################################


def driver_date_exist() -> tuple:
    """
    对比是否存在形式数据
    """
    attr = ElementAttributeEnum.from_value("TEXT")
    info = android_service.get_element_attribute(driver_data)[attr]
    return check_driver_exist() == info,
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 公共函数(Common)                                         #
    #                                                                                                                  #
    ####################################################################################################################


def click_dvr_button_and_click_it():
    """
    车辆设置中滑动查找DVR这个元素并点击
    """
    android_service.scroll_right_get_element_and_click(locator={"resourceId": "android:id/navigation_item_text"}, element={"resourceId": "com.chinatsp.vehicle:id/navigation_view"}, text="DVR")
