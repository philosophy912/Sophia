# -------------------------------------------------------------------------------
# Name:        test_vehiclelights.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-12 23:05
# -------------------------------------------------------------------------------
import allure
import pytest
from time import sleep
from src.codes.context import *


########################################################################################################################
#                                                                                                                      #
#                                                    创建Suite                                                          #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="class", autouse=True)
@allure.suite("创建vehicleLights测试套件")
def suite():
    with allure.step("打开CAN盒子"):
        open_device()
        sleep(10)
    yield suite
    with allure.step("关闭CAN盒子"):
        close_device()


########################################################################################################################
#                                                                                                                      #
#                                                    创建Function                                                       #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="function", autouse=True)
def function():
    with allure.step("无"):
        pass
    yield
    with allure.step("无"):
        pass


########################################################################################################################
#                                                                                                                      #
#                                                    创建测试用例                                                        #
#                                                                                                                      #
########################################################################################################################
@allure.feature("module")
@pytest.mark.usefixtures("suite")
class TestVehicleLights(object):

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_左转向灯开")
    def test_left_turn_lamp_open_pwroff(self):
        """
        Description:
            OFF_左转向灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开左转向灯：iBCM_TurnLiSts=0x2
        Expect Result:
            1.左转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_left()
            left_turn_lamp_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_左转向灯关")
    def test_left_turn_lamp_close_pwroff(self):
        """
        Description:
            OFF_左转向灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.左转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            left_turn_lamp_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_左转向灯开")
    def test_left_turn_lamp_open_pwracc(self):
        """
        Description:
            ACC_左转向灯开
        PreCondition:
            1.电源状态：ACC
            2.所有指示灯均熄灭
        Steps:
            1.打开左转向灯：iBCM_TurnLiSts=0x2
        Expect Result:
            1.左转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_left()
            left_turn_lamp_open_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_open_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_左转向灯关")
    def test_left_turn_lamp_close_pwracc(self):
        """
        Description:
            ACC_左转向灯关
        PreCondition:
            1.电源状态：ACC
            2.所有指示灯均熄灭
        Steps:
            1.关闭转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.左转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            left_turn_lamp_close_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_close_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_左转向灯开")
    def test_left_turn_lamp_open_pwrign(self):
        """
        Description:
            IGN_左转向灯开
        PreCondition:
            1.电源状态：IGN
            2.所有指示灯均熄灭
        Steps:
            1.打开左转向灯：iBCM_TurnLiSts=0x2
        Expect Result:
            1.左转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_left()
            left_turn_lamp_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_左转向灯关")
    def test_left_turn_lamp_close_pwrign(self):
        """
        Description:
            IGN_左转向灯关
        PreCondition:
            1.电源状态：IGN
            2.所有指示灯均熄灭
        Steps:
            1.打开左转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.左转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            left_turn_lamp_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_left_turn_lamp_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_右转向灯开")
    def test_right_turn_lamp_open_pwroff(self):
        """
        Description:
            OFF_右转向灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开右转向灯：iBCM_TurnLiSts=0x1
        Expect Result:
            1.右转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_right()
            right_turn_lamp_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_右转向灯关")
    def test_right_turn_lamp_close_pwroff(self):
        """
        Description:
            OFF_右转向灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.右转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            right_turn_lamp_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_右转向灯开")
    def test_right_turn_lamp_open_pwracc(self):
        """
        Description:
            ACC_右转向灯开
        PreCondition:
            1.电源状态：ACC
            2.所有指示灯均熄灭
        Steps:
            1.打开右转向灯：iBCM_TurnLiSts=0x1
        Expect Result:
            1.右转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_right()
            right_turn_lamp_open_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_open_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_右转向灯关")
    def test_right_turn_lamp_close_pwracc(self):
        """
        Description:
            ACC_右转向灯关
        PreCondition:
            1.电源状态：ACC
            2.所有指示灯均熄灭
        Steps:
            1.关闭转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.右转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            right_turn_lamp_close_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_close_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_右转向灯开")
    def test_right_turn_lamp_open_pwrign(self):
        """
        Description:
            IGN_右转向灯开
        PreCondition:
            1.电源状态：IGN
            2.所有指示灯均熄灭
        Steps:
            1.打开右转向灯：iBCM_TurnLiSts=0x1
        Expect Result:
            1.右转向灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_right()
            right_turn_lamp_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_右转向灯关")
    def test_right_turn_lamp_close_pwrign(self):
        """
        Description:
            IGN_右转向灯关
        PreCondition:
            1.电源状态：IGN
            2.所有指示灯均熄灭
        Steps:
            1.打开右转向灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.右转向灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            right_turn_lamp_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_right_turn_lamp_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_双闪灯开")
    def test_warning_open_pwroff(self):
        """
        Description:
            OFF_双闪灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开双闪灯：iBCM_TurnLiSts=0x3
        Expect Result:
            1.双闪灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlist_warning()
            warning_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_warning_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_双闪灯关")
    def test_warning_close_pwroff(self):
        """
        Description:
            OFF_双闪灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭双闪灯：iBCM_TurnLiSts=0x0
        Expect Result:
            1.双闪灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_turnlists_close()
            warning_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_warning_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_位置灯开")
    def test_position_open_pwroff(self):
        """
        Description:
            OFF_位置灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开示宽（位置）灯：iBCM_PosnLiSts=0x1
        Expect Result:
            1.位置灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_posnlists_open()
            position_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_position_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_位置灯关")
    def test_position_close_pwroff(self):
        """
        Description:
            OFF_位置灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭示宽（位置）灯：iBCM_PosnLiSts=0x0
        Expect Result:
            1.位置灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_posnlists_close()
            position_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_position_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_远光灯开")
    def test_high_beam_open_pwroff(self):
        """
        Description:
            OFF_远光灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开远光灯：iBCM_HiBeamSts=0x1
        Expect Result:
            1.远光灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_hibeamsts_open()
            high_beam_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_high_beam_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_远光灯关")
    def test_high_beam_close_pwroff(self):
        """
        Description:
            OFF_远光灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭远光灯：iBCM_HiBeamSts=0x0
        Expect Result:
            1.远光灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_hibeamsts_close()
            high_beam_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_high_beam_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_近光灯开")
    def test_low_beam_open_pwroff(self):
        """
        Description:
            OFF_近光灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开近光灯：iBCM_LoBeamSts=0x1
        Expect Result:
            1.近光灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_lobeamsts_open()
            low_beam_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_low_beam_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_近光灯关")
    def test_low_beam_close_pwroff(self):
        """
        Description:
            OFF_近光灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭近光灯：iBCM_LoBeamSts=0x0
        Expect Result:
            1.近光灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_lobeamsts_close()
            low_beam_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_low_beam_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_后雾灯开")
    def test_refog_open_pwroff(self):
        """
        Description:
            OFF_后雾灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开后雾灯：iBCM_ReFogLiSts=0x1
        Expect Result:
            1.后雾灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_refoglists_open()
            refog_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_refog_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_后雾灯关")
    def test_refog_close_pwroff(self):
        """
        Description:
            OFF_后雾灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭后雾灯：iBCM_ReFogLiSts=0x0
        Expect Result:
            1.后雾灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_refoglists_close()
            refog_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_refog_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_前雾灯开")
    def test_front_fog_open_pwroff(self):
        """
        Description:
            OFF_前雾灯开
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.打开前雾灯：iBCM_FrntFogLiSts=0x1
        Expect Result:
            1.前雾灯打开
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_frntfoglists_open()
            front_fog_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_front_fog_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_前雾灯关")
    def test_front_fog_close_pwroff(self):
        """
        Description:
            OFF_前雾灯关
        PreCondition:
            1.电源状态：OFF
            2.所有指示灯均熄灭
        Steps:
            1.关闭前雾灯：iBCM_FrntFogLiSts=0x0
        Expect Result:
            1.前雾灯关闭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
        # 执行步骤
        with allure.step('操作步骤'):
            ibcm_frntfoglists_close()
            front_fog_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_front_fog_close_pwroff())
