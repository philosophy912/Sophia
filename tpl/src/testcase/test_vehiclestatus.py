# -------------------------------------------------------------------------------
# Name:        test_vehiclestatus.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-13 11:43
# -------------------------------------------------------------------------------
import allure
import pytest
from time import sleep
from src.codes.context import *


########################################################################################################################
#                                                                                                                      #
#                                                    创建Suite                                                          #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="class", autouse=True)
@allure.suite("创建vehicleStatus测试套件")
def suite():
    with allure.step("打开CAN盒子"):
        open_device()
        sleep(10)
    yield suite
    with allure.step("关闭CAN盒子"):
        close_device()


########################################################################################################################
#                                                                                                                      #
#                                                    创建Function                                                       #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="function", autouse=True)
def function():
    with allure.step("无"):
        pass
    yield
    with allure.step("无"):
        pass


########################################################################################################################
#                                                                                                                      #
#                                                    创建测试用例                                                        #
#                                                                                                                      #
########################################################################################################################
@allure.feature("module")
@pytest.mark.usefixtures("suite")
class TestVehicleStatus(object):

    @pytest.mark.usefixtures("function")
    @allure.title("ABS故障指示灯开")
    def test_esp_abs_yellowlight_open_pwrign(self):
        """
        Description:
            ABS故障指示灯开
        PreCondition:
            1.电源状态：IGN
            2.设置ABS状态为：ESP_ABS_Err=0x0
        Steps:
            1.设置ABS状态为亮：ESP_ABS_Err=0x1
        Expect Result:
            1.ABS指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_abs_dark()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_abs_light()
            esp_abs_yellowlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_esp_abs_yellowlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ABS故障指示灯关")
    def test_esp_abs_yellowlight_close_pwrign(self):
        """
        Description:
            ABS故障指示灯关
        PreCondition:
            1.电源状态：IGN
            2.设置ABS状态为：ESP_ABS_Err=0x1
        Steps:
            1.设置ABS状态为灭：ESP_ABS_Err=0x0
        Expect Result:
            2.ABS指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_abs_light()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_abs_dark()
            esp_abs_yellowlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_esp_abs_yellowlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPB故障指示灯开")
    def test_epb_err_yellowlight_open_pwrign(self):
        """
        Description:
            EPB故障指示灯开
        PreCondition:
            1.电源状态：IGN
            2.设置EPB故障指示灯关闭：ESP_EPB_FltLamp=0x0
        Steps:
            1.设置EPB故障指示灯打开：ESP_EPB_FltLamp=0x1
        Expect Result:
            1.EPB故障指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_open()
            epb_err_yellowlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_err_yellowlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPB故障指示灯闪")
    def test_epb_err_yellowlight_bink_pwrign(self):
        """
        Description:
            EPB故障指示灯闪
        PreCondition:
            1.电源状态：IGN
            2.设置EPB故障指示灯关闭：ESP_EPB_FltLamp=0x0
        Steps:
            1.设置EPB故障指示灯闪烁：ESP_EPB_FltLamp=0x2
        Expect Result:
            1.EPB故障指示灯以2Hz频率闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_blinking()
            epb_err_yellowlight_bink_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_err_yellowlight_bink_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPB故障指示灯灭")
    def test_epb_err_yellowlight_close_pwrign(self):
        """
        Description:
            EPB故障指示灯灭
        PreCondition:
            1.电源状态：IGN
            2.设置EPB故障指示灯打开：ESP_EPB_FltLamp=0x1
        Steps:
            1.设置EPB故障指示灯关闭：ESP_EPB_FltLamp=0x0
        Expect Result:
            1.EPB故障指示灯不显示
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_open()
            sleep(3)
        # 执行步骤
        with allure.step('操作步骤'):
            epb_off()
            epb_err_yellowlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_err_yellowlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("Autohold正在工作灯开")
    def test_autohold_greenlight_open_pwrign(self):
        """
        Description:
            Autohold正在工作灯开
        PreCondition:
            1.电源状态：IGN
            2.设置AutoHold指示灯状态：ESP_AVH_Actv=0x0
        Steps:
            1.设置AutoHold指示灯状态为亮：ESP_AVH_Actv=0x1
        Expect Result:
            1.AutoHold状态指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            autohold_close()
        # 执行步骤
        with allure.step('操作步骤'):
            autohold_open()
            autohold_greenlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_autohold_greenlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("Autohold正在工作灯关")
    def test_autohold_greenlight_close_pwrign(self):
        """
        Description:
            Autohold正在工作灯关
        PreCondition:
            1.电源状态：IGN
            2.设置AutoHold指示灯状态：ESP_AVH_Actv=0x1
        Steps:
            1.设置AutoHold指示灯状态为不亮：ESP_AVH_Actv=0x0
        Expect Result:
            1.AutoHold状态指示灯不亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            autohold_open()
        # 执行步骤
        with allure.step('操作步骤'):
            autohold_close()
            autohold_greenlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_autohold_greenlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ESP灯开")
    def test_esp_warn_yellowlight_open_pwrign(self):
        """
        Description:
            ESP灯开
        PreCondition:
            1.电源状态：IGN
            2.设置ESP错误信号：ESP_Err=0x0
            3.设置ESP激活信号：ESP_Actv=0x0
        Steps:
            1.设置ESP错误信号为异常，ESP激活信号为未激活：
            ESP_Err=0x1
            ESP_Actv=0x0
        Expect Result:
            1.ESP指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_off()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_on()
            esp_warn_yellowlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_esp_warn_yellowlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ESP灯闪")
    def test_esp_warn_yellowlight_blinking_pwrign(self):
        """
        Description:
            ESP灯闪
        PreCondition:
            1.电源状态：IGN
            2.设置ESP错误信号：ESP_Err=0x0
            3.设置ESP激活信号：ESP_Actv=0x1
        Steps:
            1.设置ESP错误信号为正常，ESP激活信号为激活：
            ESP_Err=0x0
            ESP_Actv=0x1
        Expect Result:
            1.ESP指示灯闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_off()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_blinking()
            esp_warn_yellowlight_blinking_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_esp_warn_yellowlight_blinking_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ESP灯关")
    def test_esp_warn_yellowlight_close_pwrign(self):
        """
        Description:
            ESP灯关
        PreCondition:
            1.电源状态：IGN
            2.设置ESP错误信号：ESP_Err=0x1
            3.设置ESP激活信号：ESP_Actv=0x1
        Steps:
            1.设置ESP错误信号为正常，ESP激活信号为未激活：
            ESP_Err=0x1
            ESP_Actv=0x1
        Expect Result:
            1.ESP指示灯灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_on()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_off()
            esp_warn_yellowlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_esp_warn_yellowlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_EPB指示灯(红)亮")
    def test_epb_redlight_open_pwroff(self):
        """
        Description:
            OFF_EPB指示灯(红)亮
        PreCondition:
            1.电源状态：OFF
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为打开:
            ESP_EPB_FctLamp=0x1
        Expect Result:
            1.EPB指示灯（红）亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_on()
            epb_redlight_open_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_open_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_EPB指示灯(红) 闪烁")
    def test_epb_redlight_blinking_pwroff(self):
        """
        Description:
            OFF_EPB指示灯(红) 闪烁
        PreCondition:
            1.电源状态：OFF
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为闪烁:
            ESP_EPB_FctLamp=0x2
        Expect Result:
            1.EPB指示灯（红）闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_blinking()
            epb_redlight_blinking_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_blinking_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("OFF_EPB指示灯(红)灭")
    def test_epb_redlight_close_pwroff(self):
        """
        Description:
            OFF_EPB指示灯(红)灭
        PreCondition:
            1.电源状态：OFF
            2.设置EPB状态为打开：ESP_EPB_FctLamp=0x1
        Steps:
            1.设置EPB状态为关闭:
            ESP_EPB_FctLamp=0x0
        Expect Result:
            1.EPB指示灯（红）灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_off()
            epb_red_on()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_off()
            epb_redlight_close_pwroff()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_close_pwroff())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_EPB指示灯(红)亮")
    def test_epb_redlight_open_pwrign(self):
        """
        Description:
            ACC_EPB指示灯(红)亮
        PreCondition:
            1.电源状态：IGN
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为打开:
            ESP_EPB_FctLamp=0x1
        Expect Result:
            1.EPB指示灯（红）亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_on()
            epb_redlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_EPB指示灯(红) 闪烁")
    def test_epb_redlight_blinking_pwrign(self):
        """
        Description:
            ACC_EPB指示灯(红) 闪烁
        PreCondition:
            1.电源状态：IGN
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为闪烁:
            ESP_EPB_FctLamp=0x2
        Expect Result:
            1.EPB指示灯（红）闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_blinking()
            epb_redlight_blinking_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_blinking_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("ACC_EPB指示灯(红)灭")
    def test_epb_redlight_close_pwrign(self):
        """
        Description:
            ACC_EPB指示灯(红)灭
        PreCondition:
            1.电源状态：IGN
            2.设置EPB状态为打开：ESP_EPB_FctLamp=0x1
        Steps:
            1.设置EPB状态为关闭:
            ESP_EPB_FctLamp=0x0
        Expect Result:
            1.EPB指示灯（红）灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            epb_red_on()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_off()
            epb_redlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_EPB指示灯(红)亮")
    def test_epb_redlight_open_pwracc(self):
        """
        Description:
            IGN_EPB指示灯(红)亮
        PreCondition:
            1.电源状态：ACC
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为打开:
            ESP_EPB_FctLamp=0x1
        Expect Result:
            1.EPB指示灯（红）亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_on()
            epb_redlight_open_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_open_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_EPB指示灯(红) 闪烁")
    def test_epb_redlight_blinking_pwracc(self):
        """
        Description:
            IGN_EPB指示灯(红) 闪烁
        PreCondition:
            1.电源状态：ACC
            2.设置EPB状态为关闭：ESP_EPB_FctLamp=0x0
        Steps:
            1.设置EPB状态为闪烁:
            ESP_EPB_FctLamp=0x2
        Expect Result:
            1.EPB指示灯（红）闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            epb_red_off()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_blinking()
            epb_redlight_blinking_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_blinking_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("IGN_EPB指示灯(红)灭")
    def test_epb_redlight_close_pwracc(self):
        """
        Description:
            IGN_EPB指示灯(红)灭
        PreCondition:
            1.电源状态：ACC
            2.设置EPB状态为打开：ESP_EPB_FctLamp=0x1
        Steps:
            1.设置EPB状态为关闭:
            ESP_EPB_FctLamp=0x0
        Expect Result:
            1.EPB指示灯（红）灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_acc()
            epb_red_on()
        # 执行步骤
        with allure.step('操作步骤'):
            epb_red_off()
            epb_redlight_close_pwracc()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_epb_redlight_close_pwracc())

    @pytest.mark.usefixtures("function")
    @allure.title("陡坡缓降灯开")
    def test_eps_hdc_greenlight_open_pwrign(self):
        """
        Description:
            陡坡缓降灯开
        PreCondition:
            1.电源状态：IGN
            2.设置HDC指示灯关闭：ESP_HDC_Sts=0x0
        Steps:
            1.设置HDC指示灯打开：ESP_HDC_Sts=0x1
        Expect Result:
            1.HDC指示灯亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_hdc_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_hdc_lists_open()
            eps_hdc_greenlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_hdc_greenlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("陡坡缓降灯闪")
    def test_eps_hdc_greenlight_blinking_pwrign(self):
        """
        Description:
            陡坡缓降灯闪
        PreCondition:
            1.电源状态：IGN
            2.设置HDC指示灯打开：ESP_HDC_Sts=0x1
        Steps:
            1.设置HDC指示灯闪烁：ESP_HDC_Sts=0x2
        Expect Result:
            1.HDC指示灯以2Hz频率闪烁
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_hdc_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_hdc_lists_blink()
            eps_hdc_greenlight_blinking_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_hdc_greenlight_blinking_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("陡坡缓降灯关")
    def test_eps_hdc_greenlight_close_pwrign(self):
        """
        Description:
            陡坡缓降灯关
        PreCondition:
            1.电源状态：IGN
            2.设置HDC指示灯打开：ESP_HDC_Sts=0x1
        Steps:
            1.设置HDC指示灯关闭：ESP_HDC_Sts=0x0
        Expect Result:
            1.HDC指示灯不显示
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_hdc_lists_open()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_hdc_lists_close()
            eps_hdc_greenlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_hdc_greenlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPS指示灯显示红色")
    def test_eps_redlight_open_pwrign(self):
        """
        Description:
            EPS指示灯显示红色
        PreCondition:
            1.电源状态：IGN
            2.设置EPS指示灯正常：EPS_Sts=0x0
        Steps:
            1.设置EPS故障：EPS_Sts=0x1
        Expect Result:
            1.EPS指示灯显示红色
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_lists_red()
            eps_redlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_redlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPS指示灯显示黄色")
    def test_eps_yellowlight_open_pwrign(self):
        """
        Description:
            EPS指示灯显示黄色
        PreCondition:
            1.电源状态：IGN
            2.设置EPS指示灯正常：EPS_Sts=0x0
        Steps:
            1.设置EPS受限：EPS_Sts=0x2
        Expect Result:
            1.EPS指示灯显示黄色
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_lists_close()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_lists_yellow()
            eps_yellowlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_yellowlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("EPS指示灯不显示")
    def test_eps_light_close_ign(self):
        """
        Description:
            EPS指示灯不显示
        PreCondition:
            1.电源状态：IGN
            2.设置EPS指示灯正常：EPS_Sts=0x1
        Steps:
            1.设置EPS正常：EPS_Sts=0x0
        Expect Result:
            1.EPS指示灯不显示
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            esp_lists_red()
        # 执行步骤
        with allure.step('操作步骤'):
            esp_lists_close()
            eps_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_eps_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力电荷状态低灯亮")
    def test_battcplowwarn_yellowlight_open_pwrign(self):
        """
        Description:
            动力电荷状态低灯亮
        PreCondition:
            1.电源状态：IGN
            2.设置低电荷状态：BCU_BattCpLowWarn=0x0
            3.剩余电量50
            VCU_DispSoc=50
        Steps:
            1.设置低电荷状态警告：BCU_BattCpLowWarn=0x1
        Expect Result:
            1.低荷电信号灯显示亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            bcu_battcplowwarn_lists_close()
            battery_surplus_display_50()
        # 执行步骤
        with allure.step('操作步骤'):
            bcu_battcplowwarn_lists_open()
            battcplowwarn_yellowlight_open_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_battcplowwarn_yellowlight_open_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("动力电荷状态低灯灭")
    def test_battcplowwarn_yellowlight_close_pwrign(self):
        """
        Description:
            动力电荷状态低灯灭
        PreCondition:
            1.电源状态：IGN
            2.设置低电荷状态：BCU_BattCpLowWarn=0x1
            3.剩余电量50
            VCU_DispSoc=50
        Steps:
            1.设置低电荷状态警告：BCU_BattCpLowWarn=0x0
        Expect Result:
            1.低荷电信号灯显示灭
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            bcu_battcplowwarn_lists_open()
            battery_surplus_display_50()
        # 执行步骤
        with allure.step('操作步骤'):
            bcu_battcplowwarn_lists_close()
            battery_surplus_display_0()
            battcplowwarn_yellowlight_close_pwrign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_battcplowwarn_yellowlight_close_pwrign())

    @pytest.mark.usefixtures("function")
    @allure.title("前电机过热灯亮x1")
    def test_vcu_ptovrtmp_light_open1_ign(self):
        """
        Description:
            前电机过热灯亮x1
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统过热状态：VCU_PTOvrTmp=0x0
        Steps:
            1.设置动力系统过热状态：VCU_PTOvrTmp=0x1
        Expect Result:
            1.动力系统过热指示灯亮x1
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptovrtmp_lists_close()
            sleep(5)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptovrtmp_lists_open()
            vcu_ptovrtmp_light_open1_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptovrtmp_light_open1_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("前电机过热灯亮x2")
    def test_vcu_ptovrtmp_light_open2_ign(self):
        """
        Description:
            前电机过热灯亮x2
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统过热状态：VCU_PTOvrTmp=0x0
        Steps:
            1.设置动力系统过热状态：VCU_PTOvrTmp=0x2
        Expect Result:
            1.动力系统过热指示灯亮x2
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptovrtmp_lists_close()
            sleep(5)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptovrtmp_lists_open2()
            vcu_ptovrtmp_light_open2_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptovrtmp_light_open2_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("前电机过热灯亮x3")
    def test_vcu_ptovrtmp_light_open3_ign(self):
        """
        Description:
            前电机过热灯亮x3
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统过热状态：VCU_PTOvrTmp=0x0
        Steps:
            1.设置动力系统过热状态：VCU_PTOvrTmp=0x3
        Expect Result:
            1.动力系统过热指示灯亮x3
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptovrtmp_lists_close()
            sleep(5)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptovrtmp_lists_open3()
            vcu_ptovrtmp_light_open3_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptovrtmp_light_open3_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("前电机过热灯亮x4")
    def test_vcu_ptovrtmp_light_open4_ign(self):
        """
        Description:
            前电机过热灯亮x4
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统过热状态：VCU_PTOvrTmp=0x0
        Steps:
            1.设置动力系统过热状态：VCU_PTOvrTmp=0x4
        Expect Result:
            1.动力系统过热指示灯亮x4
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptovrtmp_lists_close()
            sleep(5)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptovrtmp_lists_open4()
            vcu_ptovrtmp_light_open4_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptovrtmp_light_open4_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("前电机过热灯灭x0")
    def test_vcu_ptovrtmp_light_close_ign(self):
        """
        Description:
            前电机过热灯灭x0
        PreCondition:
            1.电源状态：IGN
            2.设置动力系统过热状态：VCU_PTOvrTmp=0x1
        Steps:
            1.设置动力系统过热状态：VCU_PTOvrTmp=0x0
        Expect Result:
            1.动力系统过热指示灯灭x0
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            vcu_ptovrtmp_lists_open()
            sleep(5)
        # 执行步骤
        with allure.step('操作步骤'):
            vcu_ptovrtmp_lists_close()
            vcu_ptovrtmp_light_close_ign()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_vcu_ptovrtmp_light_close_ign())

    @pytest.mark.usefixtures("function")
    @allure.title("准备就绪指示灯显示亮1")
    def test_ready_on_speed0_ign1(self):
        """
        Description:
            准备就绪指示灯显示亮1
        PreCondition:
            1.电源状态：IGN
            2.设置准备就绪状态：VCU_PtRdy=0x0
            3.设置车速：ESP_VhclSpd=0
        Steps:
            1.设置准备就绪状态，设置车速为0：
            VCU_PtRdy=0x1
            ESP_VhclSpd=0
        Expect Result:
            1.准备就绪指示灯显示亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ptrdy_off()
            vehiclespeed_0()
        # 执行步骤
        with allure.step('操作步骤'):
            ptrdy_on()
            vehiclespeed_0()
            ready_on_speed0_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ready_on_speed0_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("PtRdy=0,准备就绪指示灯不显示")
    def test_ready_off_speed20_ign1(self):
        """
        Description:
            PtRdy=0,准备就绪指示灯不显示
        PreCondition:
            1.电源状态：IGN
            2.设置准备就绪状态：VCU_PtRdy=0x0
            3.设置车速：ESP_VhclSpd=0
        Steps:
            1.设置未准备就绪状态，设置车速为0：
            VCU_PtRdy=0x0
            ESP_VhclSpd=0
        Expect Result:
            1.准备就绪指示灯不显示
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ptrdy_off()
            vehiclespeed_0()
        # 执行步骤
        with allure.step('操作步骤'):
            ptrdy_off()
            vehiclespeed_0()
            ready_off_speed20_ign1()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ready_off_speed20_ign1())

    @pytest.mark.usefixtures("function")
    @allure.title("准备就绪指示灯显示亮2")
    def test_ready_on_speed0_ign2(self):
        """
        Description:
            准备就绪指示灯显示亮2
        PreCondition:
            1.电源状态：IGN
            2.设置准备就绪状态：VCU_PtRdy=0x0
            3.设置车速：ESP_VhclSpd=0
        Steps:
            1.设置准备就绪状态，设置车速为0：
            VCU_PtRdy=0x1
            ESP_VhclSpd=0
        Expect Result:
            1.准备就绪指示灯显示亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ptrdy_off()
            vehiclespeed_0()
        # 执行步骤
        with allure.step('操作步骤'):
            ptrdy_on()
            vehiclespeed_0()
            ready_on_speed0_ign2()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ready_on_speed0_ign2())

    @pytest.mark.usefixtures("function")
    @allure.title("车速&gt;0,准备就绪指示灯不显示")
    def test_ready_on_speed50_ign3(self):
        """
        Description:
            车速&gt;0,准备就绪指示灯不显示
        PreCondition:
            1.电源状态：IGN
            2.设置准备就绪状态：VCU_PtRdy=0x0
            3.设置车速：ESP_VhclSpd=0
        Steps:
            1.设置准备就绪状态，设置车速为50：
            VCU_PtRdy=0x1
            ESP_VhclSpd=50
        Expect Result:
            1..准备就绪指示灯不显示
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ptrdy_off()
            vehiclespeed_0()
        # 执行步骤
        with allure.step('操作步骤'):
            ptrdy_on()
            vehiclespeed_50()
            ready_on_speed50_ign3()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ready_on_speed50_ign3())

    @pytest.mark.usefixtures("function")
    @allure.title("准备就绪指示灯显示亮3")
    def test_ready_on_speed0_ign4(self):
        """
        Description:
            准备就绪指示灯显示亮3
        PreCondition:
            1.电源状态：IGN
            2.设置准备就绪状态：VCU_PtRdy=0x0
            3.设置车速：ESP_VhclSpd=0
        Steps:
            1.设置准备就绪状态，设置车速为0：
            VCU_PtRdy=0x1
            ESP_VhclSpd=0
        Expect Result:
            1.准备就绪指示灯显示亮
        """
        # 前置条件
        with allure.step("前置条件"):
            power_ign()
            ptrdy_off()
            vehiclespeed_0()
        # 执行步骤
        with allure.step('操作步骤'):
            ptrdy_on()
            vehiclespeed_0()
            ready_on_speed0_ign4()
        # 期望结果
        with allure.step('期望结果'):
            compare(compare_ready_on_speed0_ign4())
