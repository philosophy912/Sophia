# -------------------------------------------------------------------------------
# Name:        context.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-10-01 21:55
# -------------------------------------------------------------------------------
import os

from automotive import *
from src.code.configure import *

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                           #
#                                                                                                                      #
########################################################################################################################

"""
kkk2
"""
element_kkk1 = {"resourceId": "a", "text": "b"}
"""
kkk3
"""
element_kkk2 = {"text": "c"}
"""
kkk4
"""
element_kkk3 = {"resourceId": "a", "text": "b"}
"""
kkk5
"""
element_kkk4 = {"resourceId": "a", "text": "b"}
"""
kkk6
"""
element_kkk5 = {"resourceId": "a", "text": "b"}
"""
kkk7
"""
element_kkk6 = {"resourceId": "a", "text": "b"}
"""
kkk8
"""
element_kkk7 = {"resourceId": "a", "text": "b"}
"""
EPS开关
"""
eps_on_off = {"text": "c"}
"""
kkk10
"""
element_kkk9 = {"text": "c"}
"""
kkk11
"""
element_kkk10 = {"text": "c"}

interval_time = 0.5


class Tester(object):
    def __init__(self):
        # 用于存放保存的内容
        self.save_data = dict()
        self.curve = Curve()
        top_folder = os.path.dirname(os.getcwd())
        resource = "\\".join([top_folder, "resources"])
        # DBC解析出来的文件的路径
        self.dbc = "\\".join([resource, "dbc", dbc_json])
        # 模板图片存放路径
        self.templates = "\\".join([resource, "templates"])
        # 截图图片存放路径
        self.screenshot = "\\".join([resource, "result", "screenshot"])
        # 临时文件存放路径
        self.temp = "\\".join([resource, "result", "screenshot"])

        self.image_compare = ImageCompare()

        if it6831_serial_baud_rate and it6831_serial_port:
            self.it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
        if konstanter_serial_port and konstanter_serial_baud_rate:
            self.konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
        if dbc_json:
            self.can_service = CANService(self.dbc)
        if android_automation_type:
            self.android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
        if max_relay_channel:
            self.relay = RelayActions()
        if test_case_type == "cluster" and air_condition_port and air_condition_baud_rate:
            self.airCondition = AirCondition(qnx_screen_shot_path, air_condition_port)
        if soc_serial_port and soc_serial_baud_rate:
            self.soc = SerialPort()
        if mcu_serial_port and mcu_serial_baud_rate:
            self.mcu = SerialPort()

    def open_device(self):
        if self.it6831:
            self.it6831.open()
        if self.konstanter:
            self.konstanter.open()
        if self.android_service:
            if android_automation_type == "appium":
                capability = {
                    "deviceName": android_device_id,
                    "platformVersion": android_version,
                    "platformName": "Android",
                    "automationName": "UiAutomator2",
                    "appPackage": android_app_package,
                    "appActivity": android_app_activity
                }
                self.android_service.connect(android_device_id, capability)
            else:
                self.android_service.connect(android_device_id)
        if self.can_service:
            self.can_service.open_can()
        if self.relay:
            self.relay.open()
        if self.airCondition:
            self.airCondition.connect()
        if self.mcu:
            self.mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
        if self.soc:
            self.soc.connect(soc_serial_port, soc_serial_baud_rate)

    def close_device(self):
        if self.it6831:
            self.it6831.close()
        if self.konstanter:
            self.konstanter.close()
        if self.android_service:
            self.android_service.disconnect()
        if self.can_service:
            self.can_service.close_can()
        if self.relay:
            self.relay.close()
        if self.airCondition:
            self.airCondition.disconnect()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 电源操作(BatteryAction)                                     #
#                                                                                                                      #
########################################################################################################################

    def battery_test1(self):
        """
        test1
        """
        self.it6831.set_voltage(voltage=12.0)

    def battery_test2(self):
        """
        test1
        """
        self.konstanter.set_current(current=13.0)

    def battery_test3(self):
        """
        test1
        """
        self.konstanter.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test4(self):
        """
        test1
        """
        voltage_list = self.curve.get_voltage_by_csv(csv_file=r"d:\a.csv")
        for i in range(3):
            self.konstanter.adjust_voltage_by_curve(curve=voltage_list)

    def battery_test5(self):
        """
        test1
        """
        self.konstanter.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test6(self):
        """
        test1
        """
        self.konstanter.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test7(self):
        """
        test1
        """
        self.it6831.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test8(self):
        """
        test1
        """
        self.it6831.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test9(self):
        """
        test1
        """
        self.it6831.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

    def battery_test10(self):
        """
        test1
        """
        self.it6831.change_voltage(start=14.0, end=12.0, step=0.5, interval=5.0)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 元素操作(ElementAction)                                      #
#                                                                                                                      #
########################################################################################################################

    def element_test1(self):
        """
        test1
        """
        self.android_service.swipe_element(from_element=element_kkk1, to_element=element_kkk2)

    def element_test2(self):
        """
        test2
        """
        self.android_service.click(locator=element_kkk2)

    def element_test3(self):
        """
        test3
        """
        self.android_service.press(locator=element_kkk3, duration=2)

    def element_test4(self):
        """
        test4
        """
        self.android_service.double_click(locator=element_kkk4)

    def element_test5(self):
        """
        test5
        """
        self.android_service.swipe_up(swipe_element=element_kkk5, locator=element_kkk4, swipe_time=5)

    def element_test6(self):
        """
        test6
        """
        self.android_service.swipe_down(swipe_element=element_kkk6, locator=element_kkk4, swipe_time=6)

    def element_test7(self):
        """
        test7
        """
        self.android_service.swipe_left(swipe_element=element_kkk7, locator=element_kkk4, swipe_time=3)

    def esp_on(self):
        """
        test8
        """
        self.android_service.click(locator=eps_on_off)

    def element_test8(self):
        """
        test7
        """
        self.android_service.swipe_left(swipe_element=element_kkk7, locator=element_kkk4, swipe_time=2)

    def esp_on11(self):
        """
        test8
        """
        self.android_service.click(locator=eps_on_off)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 继电器操作(RelayAction)                                       #
#                                                                                                                      #
########################################################################################################################

    def relay_test1(self):
        """
        test1
        """
        self.relay.channel_on(channel=1)

    def relay_test2(self):
        """
        test2
        """
        self.relay.channel_off(channel=2)

    def relay_test3(self):
        """
        test3
        """
        self.relay.channel_on()

    def relay_test4(self):
        """
        test4
        """
        self.relay.channel_off()

    def relay_test5(self):
        """
        test5
        """
        self.relay.channel_on(channel=2)

    def relay_test6(self):
        """
        test6
        """
        self.relay.channel_off(channel=3)

    def relay_test7(self):
        """
        test7
        """
        self.relay.channel_on()

    def relay_test8(self):
        """
        test8
        """
        self.relay.channel_off()

    def relay_test9(self):
        """
        test9
        """
        self.relay.channel_on(channel=8)

    def relay_test10(self):
        """
        test10
        """
        self.relay.channel_on()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 屏幕操作(ScreenOpsAction)                                   #
#                                                                                                                      #
########################################################################################################################

    def screen_operation_teset1(self):
        """
        tttt1
        """
        self.airCondition.swipe(display=1, start_x=1024, start_y=12, end_x=15, end_y=18, continue_time=2.0)

    def screen_operation_teset2(self):
        """
        tttt2
        """
        self.android_service.adb.click(x=12, y=18)

    def screen_operation_teset3(self):
        """
        tttt3
        """
        self.airCondition.press(display=3, x=12, y=152, continue_time=0.5)

    def screen_operation_teset4(self):
        """
        tttt4
        """
        self.airCondition.swipe(display=3, start_x=12, start_y=12, end_x=15, end_y=18, continue_time=1.0)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 截图操作(ScreenShotAction)                                    #
#                                                                                                                      #
########################################################################################################################

    def screenshot_tttt1(self):
        """
        oooo1
        """
        image_name = f"test"
        self.airCondition.screen_shot(image_name=image_name, count=1, interval_time=interval_time, display=1)

    def screenshot_tttt2(self):
        """
        oooo2
        """
        image_name = f"{android_screen_shot_path}/testq__"
        for i in range(2):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=2, device_id=android_device_id)

    def screenshot_tttt3(self):
        """
        oooo3
        """
        image_name = f"{android_screen_shot_path}/testw__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt4(self):
        """
        oooo4
        """
        image_name = f"{android_screen_shot_path}/testwe__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt5(self):
        """
        oooo5
        """
        image_name = f"{android_screen_shot_path}/testwed__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt6(self):
        """
        oooo6
        """
        image_name = f"{android_screen_shot_path}/testsd__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt7(self):
        """
        oooo7
        """
        image_name = f"{android_screen_shot_path}/testqs__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt8(self):
        """
        oooo8
        """
        image_name = f"{android_screen_shot_path}/testwa__"
        for i in range(5):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt9(self):
        """
        oooo9
        """
        image_name = f"{android_screen_shot_path}/testar__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

    def screenshot_tttt10(self):
        """
        oooo10
        """
        image_name = f"{android_screen_shot_path}/testop__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display=1, device_id=android_device_id)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> Can信号(CanAction)                                           #
#                                                                                                                      #
########################################################################################################################

    def can_test1(self):
        """
        test2
        """
        self.can_service.send_can_signal_message(msg=642, signal={"HU_ACCSet": 0x1, "HU_FRMMsgErr": 0x2})

    def can_test2(self):
        """
        test3
        """
        self.can_service.send_can_signal_message(msg=642, signal={"HU_FRMMsgErr": 0x2})

    def can_test3(self):
        """
        test4
        """
        self.can_service.send_can_signal_message(msg=642, signal={"HU_LKASet": 3})

    def can_test4(self):
        """
        test5
        """
        self.can_service.send_can_signal_message(msg=646, signal={"HU_AMP_EQ5Set": 4})

    def can_test5(self):
        """
        test6
        """
        self.can_service.send_can_signal_message(msg=645, signal={"HU_AMP_IntConctVolStepSet": 5})

    def can_test6(self):
        """
        test7
        """
        self.can_service.send_can_signal_message(msg=645, signal={"HU_AMP_CallVolStepSet": 6})

    def can_test7(self):
        """
        test8
        """
        self.can_service.send_can_signal_message(msg=640, signal={"HU_ChrgMod": 0x0})

    def can_test8(self):
        """
        test9
        """
        self.can_service.send_can_signal_message(msg=649, signal={"HU_LocTiY": 9})

    def can_test9(self):
        """
        test10
        """
        self.can_service.send_can_signal_message(msg=643, signal={"HU_SeatTltgAdjMotTarPosn": 19})

    def can_test10(self):
        """
        test11
        """
        self.can_service.send_can_signal_message(msg=340, signal={"APA_FLMDst": 12})

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> CAN信号对比(CanCompare)                                      #
#                                                                                                                      #
########################################################################################################################

    def can_compare_test1(self, stack) -> tuple:
        """
        test1
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=48, sig_name="ACU_RePassBkl_Sts", expect_value=1, count=1, exact=True),

    def can_compare_test2(self, stack) -> tuple:
        """
        test2
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=340, sig_name="APA_RRMDst", expect_value=1, count=2, exact=True),

    def can_compare_test3(self, stack) -> tuple:
        """
        test3
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=340, sig_name="APA_FLMDst", expect_value=1, count=3, exact=False),

    def can_compare_test4(self, stack) -> tuple:
        """
        test4
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=340, sig_name="APA_RRSnsrDst", expect_value=1, count=2, exact=False),

    def can_compare_test5(self, stack) -> tuple:
        """
        test5
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=340, sig_name="APA_FLSnsrDst", expect_value=1, count=1, exact=False),

    def can_compare_test6(self, stack) -> tuple:
        """
        test6
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=371, sig_name="CDU_OBCACVlt", expect_value=1),

    def can_compare_test7(self, stack) -> tuple:
        """
        test7
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=914, sig_name="DSM_SeatTltgtAdjStsFb", expect_value=1),

    def can_compare_test8(self, stack) -> tuple:
        """
        test8
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=585, sig_name="MPC_TakeoverReq", expect_value=1, count=5, exact=False),

    def can_compare_test9(self, stack) -> tuple:
        """
        test9
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=624, sig_name="PAS_SysFltFlg", expect_value=1, count=6, exact=False),

    def can_compare_test10(self, stack) -> tuple:
        """
        test10
        """
        return self.can_service.check_signal_value(stack=stack, msg_id=196, sig_name="SAS_SteerAgVld", expect_value=1, count=7, exact=False),

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> Android元素对比(ElementCompare)                             #
#                                                                                                                      #
########################################################################################################################

    def element_comapre1(self) -> tuple:
        """
        comapre1
        """
        return self.android_service.exist(locator=element_kkk1, timeout=2.0),

    def element_comapre2(self) -> tuple:
        """
        comapre2
        """
        return not self.android_service.exist(locator=element_kkk2, timeout=3.0),

    def element_comapre3(self) -> tuple:
        """
        comapre3
        """
        return self.android_service.exist(locator=element_kkk3, timeout=3.0),

    def element_comapre4(self) -> tuple:
        """
        comapre4
        """
        return not self.android_service.exist(locator=element_kkk4, timeout=3.0),

    def element_comapre5(self) -> tuple:
        """
        comapre5
        """
        return self.android_service.exist(locator=element_kkk5, timeout=3.0),

    def element_comapre6(self) -> tuple:
        """
        comapre6
        """
        return not self.android_service.exist(locator=element_kkk6, timeout=3.0),

    def element_comapre7(self) -> tuple:
        """
        comapre7
        """
        return self.android_service.exist(locator=element_kkk7, timeout=3.0),

    def element_comapre8(self) -> tuple:
        """
        comapre8
        """
        return not self.android_service.exist(locator=eps_on_off, timeout=3.0),

    def element_comapre9(self) -> tuple:
        """
        comapre9
        """
        return self.android_service.exist(locator=element_kkk9, timeout=2.0),

    def element_comapre10(self) -> tuple:
        """
        comapre10
        """
        return not self.android_service.exist(locator=element_kkk10, timeout=2.0),

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 图片对比(ImageCompare)                                       #
#                                                                                                                      #
########################################################################################################################

    def image_compareaaaa1(self) -> tuple:
        """
        compareaaaa1
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="亮图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(1, 2, 3, 4)],
                                   similarity=9.9,
                                   gray=False,
                                   gray_threshold=0)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa2(self) -> tuple:
        """
        compareaaaa2
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="暗图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=False,
                                   gray_threshold=0)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa3(self) -> tuple:
        """
        compareaaaa3
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="闪烁图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=False,
                                   gray_threshold=0)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa4(self) -> tuple:
        """
        compareaaaa4
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="亮图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=0)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa5(self) -> tuple:
        """
        compareaaaa5
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="暗图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa6(self) -> tuple:
        """
        compareaaaa6
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="闪烁图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa7(self) -> tuple:
        """
        compareaaaa7
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="亮图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa8(self) -> tuple:
        """
        compareaaaa8
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="暗图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa9(self) -> tuple:
        """
        compareaaaa9
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="闪烁图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template

    def image_compareaaaa10(self) -> tuple:
        """
        compareaaaa10
        """
        compare_property = CompareProperty()
        compare_property.set_value(name="screen_shot",
                                   compare_type="亮图",
                                   screen_shot_images_path=self.screenshot,
                                   light_template="\\".join([self.templates, "template_light.jpg"]),
                                   dark_template="\\".join([self.templates, "template_dark.bmp"]),
                                   positions=[(2, 3, 45, 67), (34, 24, 54, 78)],
                                   similarity=90.0,
                                   gray=True,
                                   gray_threshold=240)
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template
########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 信息保存(Information)                                         #
#                                                                                                                      #
########################################################################################################################

    def infomation1(self):
        """
        infomation1
        """
        attr = ElementAttributeEnum.from_value("CHECKABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation2(self):
        """
        infomation2
        """
        attr = ElementAttributeEnum.from_value("CLICKABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation3(self):
        """
        infomation3
        """
        attr = ElementAttributeEnum.from_value("ENABLED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation4(self):
        """
        infomation4
        """
        attr = ElementAttributeEnum.from_value("FOCUSABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation5(self):
        """
        infomation5
        """
        attr = ElementAttributeEnum.from_value("FOCUSED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation6(self):
        """
        infomation6
        """
        attr = ElementAttributeEnum.from_value("SCROLLABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation7(self):
        """
        infomation7
        """
        attr = ElementAttributeEnum.from_value("LONG_CLICKABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation8(self):
        """
        infomation8
        """
        attr = ElementAttributeEnum.from_value("DISPLAYED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation9(self):
        """
        infomation9
        """
        attr = ElementAttributeEnum.from_value("SELECTED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

    def infomation10(self):
        """
        infomation10
        """
        attr = ElementAttributeEnum.from_value("TEXT")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return info

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 信息对比(InformationCompare)                                 #
#                                                                                                                      #
########################################################################################################################

    def info1(self) -> tuple:
        """
        info1
        """
        attr = ElementAttributeEnum.from_value("CHECKABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info2(self) -> tuple:
        """
        info2
        """
        attr = ElementAttributeEnum.from_value("CLICKABLE")
        info = self.android_service.get_element_attribute(element_kkk2)[attr]
        return self.infomation1() == info,

    def info3(self) -> tuple:
        """
        info3
        """
        attr = ElementAttributeEnum.from_value("ENABLED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info4(self) -> tuple:
        """
        info4
        """
        attr = ElementAttributeEnum.from_value("FOCUSABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info5(self) -> tuple:
        """
        info5
        """
        attr = ElementAttributeEnum.from_value("FOCUSED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info6(self) -> tuple:
        """
        info6
        """
        attr = ElementAttributeEnum.from_value("SCROLLABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info7(self) -> tuple:
        """
        info7
        """
        attr = ElementAttributeEnum.from_value("LONG_CLICKABLE")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info8(self) -> tuple:
        """
        info8
        """
        attr = ElementAttributeEnum.from_value("DISPLAYED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info9(self) -> tuple:
        """
        info9
        """
        attr = ElementAttributeEnum.from_value("SELECTED")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

    def info10(self) -> tuple:
        """
        info10
        """
        attr = ElementAttributeEnum.from_value("TEXT")
        info = self.android_service.get_element_attribute(element_kkk1)[attr]
        return self.infomation1() == info,

