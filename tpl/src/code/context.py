# -------------------------------------------------------------------------------
# Name:        context.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     2020-09-29 18:08
# -------------------------------------------------------------------------------
import os

from automotive import *
from src.code.configure import *

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                           #
#                                                                                                                      #
########################################################################################################################

"""
kkk2
"""
element_kkk1 = {"resourceId": "a", "text": "b"}
"""
kkk3
"""
element_kkk2 = {"text": "c"}
"""
kkk4
"""
element_kkk3 = {"resourceId": "a", "text": "b"}
"""
kkk5
"""
element_kkk4 = {"resourceId": "a", "text": "b"}
"""
kkk6
"""
element_kkk5 = {"resourceId": "a", "text": "b"}
"""
kkk7
"""
element_kkk6 = {"resourceId": "a", "text": "b"}
"""
kkk8
"""
element_kkk7 = {"resourceId": "a", "text": "b"}
"""
EPS开关
"""
eps_on_off = {"text": "c"}
"""
kkk10
"""
element_kkk9 = {"text": "c"}
"""
kkk11
"""
element_kkk10 = {"text": "c"}

interval_time = 0.5


class Tester(object):
    def __init__(self):
        # 用于存放保存的内容
        self.save_data = dict()
        self.curve = Curve()
        top_folder = os.path.dirname(os.getcwd())
        resource = "\\".join([top_folder, "resources"])
        # DBC解析出来的文件的路径
        self.dbc = "\\".join([resource, "dbc", dbc_json])
        # 模板图片存放路径
        self.templates = "\\".join([resource, "templates"])
        # 截图图片存放路径
        self.screenshot = "\\".join([resource, "result", "screenshot"])
        # 临时文件存放路径
        self.temp = "\\".join([resource, "result", "screenshot"])

        self.image_compare = ImageCompare()

        if it6831_serial_baud_rate and it6831_serial_port:
            self.it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
        if konstanter_serial_port and konstanter_serial_baud_rate:
            self.konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
        if dbc_json:
            self.can_service = CANService(self.dbc)
        if android_automation_type:
            self.android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
        if max_relay_channel:
            self.relay = RelayActions()
        if test_case_type == "cluster" and air_condition_port and air_condition_baud_rate:
            self.airCondition = AirCondition(qnx_screen_shot_path, air_condition_port)
        if soc_serial_port and soc_serial_baud_rate:
            self.soc = SerialPort()
        if mcu_serial_port and mcu_serial_baud_rate:
            self.mcu = SerialPort()

    def open_device(self):
        if self.it6831:
            self.it6831.open()
        if self.konstanter:
            self.konstanter.open()
        if self.android_service:
            if android_automation_type == "appium":
                capability = {
                    "deviceName": android_device_id,
                    "platformVersion": android_version,
                    "platformName": "Android",
                    "automationName": "UiAutomator2",
                    "appPackage": android_app_package,
                    "appActivity": android_app_activity
                }
                self.android_service.connect(android_device_id, capability)
            else:
                self.android_service.connect(android_device_id)
        if self.can_service:
            self.can_service.open_can()
        if self.relay:
            self.relay.open()
        if self.airCondition:
            self.airCondition.connect()
        if self.mcu:
            self.mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
        if self.soc:
            self.soc.connect(soc_serial_port, soc_serial_baud_rate)

    def close_device(self):
        if self.it6831:
            self.it6831.close()
        if self.konstanter:
            self.konstanter.close()
        if self.android_service:
            self.android_service.disconnect()
        if self.can_service:
            self.can_service.close_can()
        if self.relay:
            self.relay.close()
        if self.airCondition:
            self.airCondition.disconnect()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 电源操作(BatteryAction)                                     #
#                                                                                                                      #
########################################################################################################################

    def battery_test1(self):
        """
        test1
        """
        self.it6831.set_voltage(12.0)

    def battery_test2(self):
        """
        test1
        """
        self.konstanter.set_current(13.0)

    def battery_test3(self):
        """
        test1
        """
        self.konstanter.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test4(self):
        """
        test1
        """
        voltage_list = self.curve.get_voltage_by_csv(r"d:\a.csv")
        for i in range(3):
            self.konstanter.adjust_voltage_by_curve(voltage_list)

    def battery_test5(self):
        """
        test1
        """
        self.konstanter.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test6(self):
        """
        test1
        """
        self.konstanter.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test7(self):
        """
        test1
        """
        self.it6831.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test8(self):
        """
        test1
        """
        self.it6831.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test9(self):
        """
        test1
        """
        self.it6831.change_voltage(14.0, 12.0, 0.5, 5.0)

    def battery_test10(self):
        """
        test1
        """
        self.it6831.change_voltage(14.0, 12.0, 0.5, 5.0)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 元素操作(ElementAction)                                      #
#                                                                                                                      #
########################################################################################################################

    def element_test1(self):
        """
        test1
        """
        self.android_service.swipe(element_kkk1, element_kkk2)

    def element_test2(self):
        """
        test2
        """
        self.android_service.click(element_kkk2)

    def element_test3(self):
        """
        test3
        """
        self.android_service.press(element_kkk3, 2)

    def element_test4(self):
        """
        test4
        """
        self.android_service.double_click(element_kkk4)

    def element_test5(self):
        """
        test5
        """
        self.android_service.swipe_up(element_kkk5, element_kkk4, 5)

    def element_test6(self):
        """
        test6
        """
        self.android_service.swipe_down(element_kkk6, element_kkk4, 6)

    def element_test7(self):
        """
        test7
        """
        self.android_service.swipe_left(element_kkk7, element_kkk4, 3)

    def esp_on(self):
        """
        test8
        """
        self.android_service.click(eps_on_off, 2)

    def element_test8(self):
        """
        test7
        """
        self.android_service.swipe_left(element_kkk7, element_kkk4, 2)

    def esp_on11(self):
        """
        test8
        """
        self.android_service.click(eps_on_off)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 继电器操作(RelayAction)                                      #
#                                                                                                                      #
########################################################################################################################

    def relay_test1(self):
        """
        test1
        """
        self.relay.channel_on(1)

    def relay_test2(self):
        """
        test2
        """
        self.relay.channel_off(2)

    def relay_test3(self):
        """
        test3
        """
        self.relay.channel_on()

    def relay_test4(self):
        """
        test4
        """
        self.relay.channel_off()

    def relay_test5(self):
        """
        test5
        """
        self.relay.channel_on(2)

    def relay_test6(self):
        """
        test6
        """
        self.relay.channel_off(3)

    def relay_test7(self):
        """
        test7
        """
        self.relay.channel_on()

    def relay_test8(self):
        """
        test8
        """
        self.relay.channel_off()

    def relay_test9(self):
        """
        test9
        """
        self.relay.channel_on(8)

    def relay_test10(self):
        """
        test10
        """
        self.relay.channel_on()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 屏幕操作(ScreenOpsAction)                                   #
#                                                                                                                      #
########################################################################################################################

    def screen_operation_teset1(self):
        """
        tttt1
        """
        self.airCondition.swipe(display=1, start_x=1024, end_x=15, start_y=12, end_y=18, continue_time=2.0)

    def screen_operation_teset2(self):
        """
        tttt2
        """
        self.android_service.adb.click(display_id=2, device_id=android_device_id, x=12, y=18)

    def screen_operation_teset3(self):
        """
        tttt3
        """
        self.airCondition.press(display=3, x=12, y=152, continue_time=0.5)

    def screen_operation_teset4(self):
        """
        tttt4
        """
        self.airCondition.swipe(display=3, start_x=12, end_x=15, start_y=12, end_y=18, continue_time=1.0)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 截图操作(ScreenShotAction)                                  #
#                                                                                                                      #
########################################################################################################################

    def screenshot_tttt1(self):
        """
        oooo1
        """
        image_name = f"test"
        self.airCondition.screen_shot(image_name=image_name, count=1, interval_time=interval_time, display=1)

    def screenshot_tttt2(self):
        """
        oooo2
        """
        image_name = f"{android_screen_shot_path}/testq__"
        for i in range(2):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=2,
                                                 device_id=android_device_id)

    def screenshot_tttt3(self):
        """
        oooo3
        """
        image_name = f"{android_screen_shot_path}/testw__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt4(self):
        """
        oooo4
        """
        image_name = f"{android_screen_shot_path}/testwe__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt5(self):
        """
        oooo5
        """
        image_name = f"{android_screen_shot_path}/testwed__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt6(self):
        """
        oooo6
        """
        image_name = f"{android_screen_shot_path}/testsd__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt7(self):
        """
        oooo7
        """
        image_name = f"{android_screen_shot_path}/testqs__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt8(self):
        """
        oooo8
        """
        image_name = f"{android_screen_shot_path}/testwa__"
        for i in range(5):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt9(self):
        """
        oooo9
        """
        image_name = f"{android_screen_shot_path}/testar__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

    def screenshot_tttt10(self):
        """
        oooo10
        """
        image_name = f"{android_screen_shot_path}/testop__"
        for i in range(3):
            self.android_service.adb.screen_shot(remote_file=f"{image_name}{i + 1}", display_id=1,
                                                 device_id=android_device_id)

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> Can信号(CanAction)                                          #
#                                                                                                                      #
########################################################################################################################

    def can_test1(self):
        """
        test2
        """
        self.can_service.send_can_signal_message(642, {"HU_ACCSet": 0x1, "HU_FRMMsgErr": 0x2})

    def can_test2(self):
        """
        test3
        """
        self.can_service.send_can_signal_message(642, {"HU_FRMMsgErr": 0x2})

    def can_test3(self):
        """
        test4
        """
        self.can_service.send_can_signal_message(642, {"HU_LKASet": 3})

    def can_test4(self):
        """
        test5
        """
        self.can_service.send_can_signal_message(646, {"HU_AMP_EQ5Set": 4})

    def can_test5(self):
        """
        test6
        """
        self.can_service.send_can_signal_message(645, {"HU_AMP_IntConctVolStepSet": 5})

    def can_test6(self):
        """
        test7
        """
        self.can_service.send_can_signal_message(645, {"HU_AMP_CallVolStepSet": 6})

    def can_test7(self):
        """
        test8
        """
        self.can_service.send_can_signal_message(640, {"HU_ChrgMod": 0x0})

    def can_test8(self):
        """
        test9
        """
        self.can_service.send_can_signal_message(649, {"HU_LocTiY": 9})

    def can_test9(self):
        """
        test10
        """
        self.can_service.send_can_signal_message(643, {"HU_SeatTltgAdjMotTarPosn": 19})

    def can_test10(self):
        """
        test11
        """
        self.can_service.send_can_signal_message(340, {"APA_FLMDst": 12})
