# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import allure
import pytest
from time import sleep
from automotive import *
from src.code.context import Tester

tester = Tester()


########################################################################################################################
#                                                                                                                      #
#                                                    创建Suite                                                          #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="class", autouse=True)
@allure.suite("创建${testcase.moduleName}测试套件")
def suite():
    with allure.step("${testcase.suite.second.first}"):
<#list testcase.suite.first.first as line>
    <#if line=="pass">
        ${line}
    <#elseif line?starts_with("sleep")>
        ${line}
    <#else>
        tester.${line}
    </#if>
</#list>
    yield suite
    with allure.step("${testcase.suite.second.second}"):
<#list testcase.suite.first.second as line>
    <#if line=="pass">
        ${line}
    <#elseif line?starts_with("sleep")>
        ${line}
    <#else>
        tester.${line}
    </#if>
</#list>


########################################################################################################################
#                                                                                                                      #
#                                                    创建Function                                                       #
#                                                                                                                      #
########################################################################################################################
@pytest.fixture(scope="function", autouse=True)
def function():
    with allure.step("${testcase.function.second.first}"):
<#list testcase.function.first.first as line>
    <#if line=="pass">
        ${line}
    <#elseif line?starts_with("sleep")>
        ${line}
    <#else>
        tester.${line}
    </#if>
</#list>
    yield
    with allure.step("${testcase.function.second.second}"):
<#list testcase.function.first.second as line>
    <#if line=="pass">
        ${line}
    <#elseif line?starts_with("sleep")>
        ${line}
    <#else>
        tester.${line}
    </#if>
</#list>


########################################################################################################################
#                                                                                                                      #
#                                                    创建测试用例                                                        #
#                                                                                                                      #
########################################################################################################################
@allure.feature("module")
@pytest.mark.usefixtures("suite")
class Test${testcase.moduleName?cap_first}(object):
<#list testcase.testcases as tc>

    @pytest.mark.usefixtures("function")
    @allure.title("${tc.description}")
    def test_${tc.name}(self):
        """
        Description:
            <#list tc.comments as line>
            ${line}
            </#list>
        PreCondition:
            <#list tc.preConditionDescription as line>
            ${line}
            </#list>
        Steps:
            <#list tc.stepsDescription as line>
            ${line}
            </#list>
        Expect Result:
            <#list tc.expectDescription as line>
            ${line}
            </#list>
        """
        # 前置条件
        with allure.step("前置条件"):
        <#list tc.preCondition as line>
            <#if line=="pass">
            ${line}
            <#elseif line=="stack">
            stack = tester.can_service.get_stack()
            <#elseif line?starts_with("sleep")>
            ${line}
            <#else>
            tester.${line}
            </#if>
        </#list>
        # 执行步骤
        with allure.step('操作步骤'):
        <#list tc.steps as line>
            <#if line=="pass">
            ${line}
            <#elseif line=="stack">
            stack = tester.can_service.get_stack()
            <#elseif line?starts_with("sleep")>
            ${line}
            <#else>
            tester.${line}
            </#if>
        </#list>
        # 期望结果
        with allure.step('期望结果'):
        <#list tc.expect as line>
            <#if line=="pass">
            ${line}
            <#elseif line=="stack">
            stack = tester.can_service.get_stack()
            <#elseif line?starts_with("sleep")>
            ${line}
            <#else>
            result = tester.${line}
            </#if>
            if len(result) > 1:
                result, images, compare_type, dark, light = result
                if compare_type == CompareTypeEnum.LIGHT:
                    allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
                elif compare_type == CompareTypeEnum.DARK:
                    allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
                elif compare_type == CompareTypeEnum.BLINK:
                    allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
                    allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
                result_str = "成功" if result else "失败"
                for image in images:
                    image_name = image.split("\\")[-1]
                    allure.attach.file(image, f"{result_str}截图[{image_name}]", allure.attachment_type.BMP)
                assert result
            else:
                assert result
        </#list>
</#list>