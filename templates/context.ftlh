# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import os

from automotive import *
from src.code.configure import *

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                           #
#                                                                                                                      #
########################################################################################################################

<#list element as freemarker>
"""
<#list freemarker.comment as line>
${line}
</#list>
"""
${freemarker.params["functionName"]} = {<#list freemarker.pairs as locators><#noparse>"</#noparse>${locators.first}<#noparse>"</#noparse>: <#noparse>"</#noparse>${locators.second}<#noparse>"</#noparse><#if locators_index != freemarker.pairs?size -1>, </#if></#list>}
</#list>

interval_time = 0.5


class Tester(object):
    def __init__(self):
        # 用于存放保存的内容
        self.save_data = dict()
        self.curve = Curve()
        top_folder = os.path.dirname(os.getcwd())
        resource = "\\".join([top_folder, "resources"])
        # DBC解析出来的文件的路径
        self.dbc = "\\".join([resource, "dbc", dbc_json])
        # 模板图片存放路径
        self.templates = "\\".join([resource, "templates"])
        # 截图图片存放路径
        self.screenshot = "\\".join([resource, "result", "screenshot"])
        # 临时文件存放路径
        self.temp = "\\".join([resource, "result", "screenshot"])

        self.image_compare = ImageCompare()

        if it6831_serial_baud_rate and it6831_serial_port:
            self.it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
        if konstanter_serial_port and konstanter_serial_baud_rate:
            self.konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
        if dbc_json:
            self.can_service = CANService(self.dbc)
        if android_automation_type:
            self.android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
        if max_relay_channel:
            self.relay = RelayActions()
        if test_case_type == "cluster" and air_condition_port and air_condition_baud_rate:
            self.airCondition = AirCondition(qnx_screen_shot_path, air_condition_port)
        if soc_serial_port and soc_serial_baud_rate:
            self.soc = SerialPort()
        if mcu_serial_port and mcu_serial_baud_rate:
            self.mcu = SerialPort()

    def open_device(self):
        if self.it6831:
            self.it6831.open()
        if self.konstanter:
            self.konstanter.open()
        if self.android_service:
            if android_automation_type == "appium":
                capability = {
                    "deviceName": android_device_id,
                    "platformVersion": android_version,
                    "platformName": "Android",
                    "automationName": "UiAutomator2",
                    "appPackage": android_app_package,
                    "appActivity": android_app_activity
                }
                self.android_service.connect(android_device_id, capability)
            else:
                self.android_service.connect(android_device_id)
        if self.can_service:
            self.can_service.open_can()
        if self.relay:
            self.relay.open()
        if self.airCondition:
            self.airCondition.connect()
        if self.mcu:
            self.mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
        if self.soc:
            self.soc.connect(soc_serial_port, soc_serial_baud_rate)

    def close_device(self):
        if self.it6831:
            self.it6831.close()
        if self.konstanter:
            self.konstanter.close()
        if self.android_service:
            self.android_service.disconnect()
        if self.can_service:
            self.can_service.close_can()
        if self.relay:
            self.relay.close()
        if self.airCondition:
            self.airCondition.disconnect()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 电源操作(BatteryAction)                                     #
#                                                                                                                      #
########################################################################################################################
<#list batteryAction as freemarker>

    def ${freemarker.params["functionName"]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        <#if freemarker.params["handleFunction"] == "adjust_voltage_by_curve">
        voltage_list = self.curve.get_voltage_by_csv(csv_file=r<#noparse>"</#noparse>${freemarker.params["curve"]}<#noparse>"</#noparse>)
        for i in range(${freemarker.params["cycleTime"]}):
            self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(curve=voltage_list)
        <#elseif freemarker.params["handleFunction"] == "change_voltage">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(start=${freemarker.params["start"]}, end=${freemarker.params["end"]}, step=${freemarker.params["step"]}, interval=${freemarker.params["interval"]})
        <#elseif freemarker.params["handleFunction"] == "set_voltage">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(voltage=${freemarker.params["voltage"]})
        <#else>
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(current=${freemarker.params["current"]})
        </#if>
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 元素操作(ElementAction)                                      #
#                                                                                                                      #
########################################################################################################################
<#list elementAction as freemarker>

    def ${freemarker.params["functionName"]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        <#if freemarker.params["handleFunction"] == "swipe_element">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(from_element=${freemarker.params["element1"]}, to_element=${freemarker.params["element2"]})
        <#elseif freemarker.params["handleFunction"] == "click">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]})
        <#elseif freemarker.params["handleFunction"] == "press">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]}, duration=${freemarker.params["slideTimes"]})
        <#elseif freemarker.params["handleFunction"] == "double_click">
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]})
        <#else>
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(swipe_element=${freemarker.params["element1"]}, locator=${freemarker.params["element2"]}<#if freemarker.params["slideTimes"]!="0">, swipe_time=${freemarker.params["slideTimes"]}</#if>)
        </#if>
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 继电器操作(RelayAction)                                       #
#                                                                                                                      #
########################################################################################################################
<#list relayAction as freemarker>

    def ${freemarker.params["functionName"]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        self.${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(<#if freemarker.params["channelIndex"]!="0">channel=${freemarker.params["channelIndex"]}</#if>)
</#list>