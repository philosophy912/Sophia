# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import os

from automotive import *
from src.code.configure import *

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                           #
#                                                                                                                      #
########################################################################################################################

<#list element as freemarker>
"""
<#list freemarker.comment as line>
${line}
</#list>
"""
${freemarker.info[0]} = {<#list freemarker.pairs as locators><#noparse>"</#noparse>${locators.first}<#noparse>"</#noparse>: <#noparse>"</#noparse>${locators.second}<#noparse>"</#noparse><#if locators_index != freemarker.pairs?size -1>, </#if></#list>}
</#list>

interval_time = 0.5


class Tester(object):
    def __init__(self):
        # 用于存放保存的内容
        self.save_data = dict()
        self.curve = Curve()
        top_folder = os.path.dirname(os.getcwd())
        resource = "\\".join([top_folder, "resources"])
        # DBC解析出来的文件的路径
        self.dbc = "\\".join([resource, "dbc", dbc_json])
        # 模板图片存放路径
        self.templates = "\\".join([resource, "templates"])
        # 截图图片存放路径
        self.screenshot = "\\".join([resource, "result", "screenshot"])
        # 临时文件存放路径
        self.temp = "\\".join([resource, "result", "screenshot"])

        self.image_compare = ImageCompare()

        if it6831_serial_baud_rate and it6831_serial_port:
            self.it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
        if konstanter_serial_port and konstanter_serial_baud_rate:
            self.konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
        if dbc_json:
            self.can_service = CANService(self.dbc)
        if android_automation_type:
            self.android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
        if max_relay_channel:
            self.relay = RelayActions()
        if test_case_type == "cluster" and air_condition_port and air_condition_baud_rate:
            self.airCondition = AirCondition(qnx_screen_shot_path, air_condition_port)
        if soc_serial_port and soc_serial_baud_rate:
            self.soc = SerialPort()
        if mcu_serial_port and mcu_serial_baud_rate:
            self.mcu = SerialPort()

    def open_device(self):
        if self.it6831:
            self.it6831.open()
        if self.konstanter:
            self.konstanter.open()
        if self.android_service:
            if android_automation_type == "appium":
                capability = {
                    "deviceName": android_device_id,
                    "platformVersion": android_version,
                    "platformName": "Android",
                    "automationName": "UiAutomator2",
                    "appPackage": android_app_package,
                    "appActivity": android_app_activity
                }
                self.android_service.connect(android_device_id, capability)
            else:
                self.android_service.connect(android_device_id)
        if self.can_service:
            self.can_service.open_can()
        if self.relay:
            self.relay.open()
        if self.airCondition:
            self.airCondition.connect()
        if self.mcu:
            self.mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
        if self.soc:
            self.soc.connect(soc_serial_port, soc_serial_baud_rate)

    def close_device(self):
        if self.it6831:
            self.it6831.close()
        if self.konstanter:
            self.konstanter.close()
        if self.android_service:
            self.android_service.disconnect()
        if self.can_service:
            self.can_service.close_can()
        if self.relay:
            self.relay.close()
        if self.airCondition:
            self.airCondition.disconnect()

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 电源操作(BatteryAction)                                     #
#                                                                                                                      #
########################################################################################################################
<#list batteryAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        <#if freemarker.info[2] == "adjust_voltage_by_curve">
        voltage_list = self.curve.get_voltage_by_csv(r<#noparse>"</#noparse>${freemarker.info[4]}<#noparse>"</#noparse>)
        for i in range(${freemarker.info[3]}):
            self.${freemarker.info[1]}.${freemarker.info[2]}(voltage_list)
        <#else>
        self.${freemarker.info[1]}.${freemarker.info[2]}(<#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list>)
        </#if>
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 元素操作(ElementAction)                                      #
#                                                                                                                      #
########################################################################################################################
<#list elementAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        self.${freemarker.info[1]}.${freemarker.info[2]}(<#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list><#if freemarker.info[3]!="0">, ${freemarker.info[3]}</#if>)
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 继电器操作(RelayAction)                                      #
#                                                                                                                      #
########################################################################################################################
<#list relayAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        self.${freemarker.info[1]}.${freemarker.info[2]}(<#if freemarker.info[3]!="0">${freemarker.info[3]}</#if>)
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 屏幕操作(ScreenOpsAction)                                   #
#                                                                                                                      #
########################################################################################################################
<#list screenOpsAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        self.${freemarker.info[1]}.${freemarker.info[2]}(<#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list>)
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 截图操作(ScreenShotAction)                                  #
#                                                                                                                      #
########################################################################################################################
<#list screenShotAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
    <#if freemarker.info[1] == "airCondition">
        image_name = f<#noparse>"</#noparse>${freemarker.info[3]}<#noparse>"</#noparse>
        self.${freemarker.info[1]}.${freemarker.info[2]}(<#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list>)
    <#else>
        image_name = f<#noparse>"</#noparse>${r'{android_screen_shot_path}'}/${freemarker.info[3]}__<#noparse>"</#noparse>
        for i in range(${freemarker.info[4]}):
            self.${freemarker.info[1]}.${freemarker.info[2]}(remote_file=f<#noparse>"</#noparse>${r'{'}image_name${r'}'}${r'{'}i + 1${r'}'}<#noparse>"</#noparse>, ${freemarker.params[0]}, ${freemarker.params[1]})
    </#if>
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> Can信号(CanAction)                                          #
#                                                                                                                      #
########################################################################################################################
<#list canAction as freemarker>

    def ${freemarker.info[0]}(self):
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        self.${freemarker.info[1]}.${freemarker.info[2]}(${freemarker.info[3]}, ${r'{'}<#list freemarker.pairs as signal><#noparse>"</#noparse>${signal.first}<#noparse>"</#noparse>: ${signal.second}<#if signal_index != freemarker.pairs?size -1>, </#if></#list>${r'}'})
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> CAN信号对比(CanCompare)                                      #
#                                                                                                                      #
########################################################################################################################
<#list canCompare as freemarker>

    def ${freemarker.info[0]}(self, stack) -> tuple:
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        return self.${freemarker.info[1]}.${freemarker.info[2]}(sig_name=<#noparse>"</#noparse>${freemarker.info[3]}<#noparse>"</#noparse>, <#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list>),
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> Android元素对比(ElementCompare)                             #
#                                                                                                                      #
########################################################################################################################
<#list elementCompare as freemarker>

    def ${freemarker.info[0]}(self) -> tuple:
        """
        <#list freemarker.comment as line>
        ${line}
        </#list>
        """
        return <#if freemarker.info[3] == "1">not </#if>self.${freemarker.info[1]}.${freemarker.info[2]}(<#list freemarker.params as param>${param}<#if param_index != freemarker.params?size -1>, </#if></#list>),
</#list>

########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 图片对比(ImageCompare)                                       #
#                                                                                                                      #
########################################################################################################################
<#list imageCompare as freemarker>

    def ${freemarker.info[0]}(self) -> tuple:
        """
        <#list freemarker.comment as line>
            ${line}
        </#list>
        """
        compare_property = CompareProperty()
        compare_property.set_value(name=<#noparse>"</#noparse>${freemarker.params[0]}<#noparse>"</#noparse>,
                                   compare_type=<#noparse>"</#noparse>${freemarker.params[1]}<#noparse>"</#noparse>,
                                   screen_shot_images_path=self.screenshot,
                                   light_template=<#noparse>"</#noparse>\\<#noparse>"</#noparse>.join([self.templates, <#noparse>"</#noparse>${freemarker.params[2]}<#noparse>"</#noparse>]),
                                   dark_template=<#noparse>"</#noparse>\\<#noparse>"</#noparse>.join([self.templates, <#noparse>"</#noparse>${freemarker.params[3]}<#noparse>"</#noparse>]),
                                   positions=[${freemarker.params[4]}],
                                   similarity=${freemarker.params[5]},
                                   gray=${freemarker.params[6]},
                                   gray_threshold=${freemarker.params[7]})
        result = self.image_compare.compare(compare_property)
        files = self.image_compare.handle_images(compare_property, self.temp)
        return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template
</#list>
########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 信息对比(InformationCompare)                                 #
#                                                                                                                      #
########################################################################################################################
