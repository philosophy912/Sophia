# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import os
import allure
from automotive import *
from src.codes.configure import *


def compare(result: tuple):
    if len(result) > 1:
        result, images, compare_type, dark, light = result
        if compare_type == CompareTypeEnum.LIGHT:
            allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
        elif compare_type == CompareTypeEnum.DARK:
            allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
        elif compare_type == CompareTypeEnum.BLINK:
            allure.attach.file(light, '原图(亮图)', allure.attachment_type.BMP)
            allure.attach.file(dark, '原图(暗图)', allure.attachment_type.BMP)
        result_str = "成功" if result else "失败"
        for image in images:
            image_name = image.split("\\")[-1]
            allure.attach.file(image, f"{result_str}截图[{image_name}]", allure.attachment_type.BMP)
        assert result
    else:
        assert result


<#if element??>
########################################################################################################################
#                                                                                                                      #
#                                           用于生成表格 --> 安卓元素(Element)                                             #
#                                                                                                                      #
########################################################################################################################

<#list element as freemarker>
"""
<#list freemarker.comment as line>
${line?lower_case}
</#list>
"""
${freemarker.params["functionName"]?lower_case} = {<#list freemarker.pairs as locators><#noparse>"</#noparse>${locators.first}<#noparse>"</#noparse>: <#noparse>"</#noparse>${locators.second}<#noparse>"</#noparse><#if locators_index != freemarker.pairs?size -1>, </#if></#list>}
</#list>


</#if>
interval_time = 0.5


# 用于存放保存的内容
save_data = dict()
curve = Curve()
top_folder = os.path.dirname(os.getcwd())
resource = "\\".join([top_folder, "resources"])
# DBC解析出来的文件的路径
dbc = "\\".join([resource, "dbc", dbc_json])
# 模板图片存放路径
templates = "\\".join([resource, "templates"])
# 结果存放路径
result_folder = "\\".join([top_folder, "result"])
# 截图图片存放路径
screenshot = "\\".join([result_folder, "screenshot"])
# 临时文件存放路径
temp = "\\".join([result_folder, "temp"])

image_compare = ImageCompare()
it6831 = None
konstanter = None
can_service = None
android_service = None
relay = None
air_condition = None
soc = None
mcu = None

if it6831_serial_baud_rate and it6831_serial_port:
    it6831 = It6831Actions(port=it6831_serial_baud_rate, baud_rate=it6831_serial_port)
    logger.info(f"it6831 is initialization")
if konstanter_serial_port and konstanter_serial_baud_rate:
    konstanter = KonstanterActions(port=konstanter_serial_port, baud_rate=konstanter_serial_baud_rate)
    logger.info(f"konstanter is initialization")
if dbc_json:
    can_service = CANService(dbc)
    logger.info(f"can_service is initialization")
if android_automation_type:
    android_service = AndroidService(ToolTypeEnum.from_value(android_automation_type))
    logger.info(f"android_service is initialization")
if max_relay_channel:
    relay = RelayActions()
    logger.info(f"relay is initialization")
if test_case_type == "空调屏" and air_condition_port and air_condition_baud_rate:
    air_condition = AirCondition(qnx_screen_shot_path, air_condition_port)
    logger.info(f"air_condition is initialization")
if soc_serial_port and soc_serial_baud_rate:
    soc = SerialPort()
    logger.info(f"soc is initialization")
if mcu_serial_port and mcu_serial_baud_rate:
    mcu = SerialPort()
    logger.info(f"mcu is initialization")

def open_device():
    if it6831:
        it6831.open()
    if konstanter:
        konstanter.open()
    if android_service:
        if android_automation_type == "appium":
            capability = {
                "deviceName": android_device_id,
                "platformVersion": android_version,
                "platformName": "Android",
                "automationName": "UiAutomator2",
                "appPackage": android_app_package,
                "appActivity": android_app_activity
            }
            android_service.connect(android_device_id, capability)
        else:
            android_service.connect(android_device_id)
    if can_service:
        can_service.open_can()
    if relay:
        relay.open()
    if air_condition:
        air_condition.connect()
    if mcu:
        mcu.connect(mcu_serial_port, mcu_serial_baud_rate)
    if soc:
        soc.connect(soc_serial_port, soc_serial_baud_rate)


def close_device():
    if it6831:
        it6831.close()
    if konstanter:
        konstanter.close()
    if android_service:
        android_service.disconnect()
    if can_service:
        can_service.close_can()
    if relay:
        relay.close()
    if air_condition:
        air_condition.disconnect()
<#if batteryAction??>
    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 电源操作(BatteryAction)                                  #
    #                                                                                                                  #
    ####################################################################################################################
<#list batteryAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    <#if freemarker.params["handleFunction"] == "adjust_voltage_by_curve">
    voltage_list = curve.get_voltage_by_csv(csv_file=r<#noparse>"</#noparse>${freemarker.params["curve"]}<#noparse>"</#noparse>)
    for i in range(${freemarker.params["cycleTime"]}):
        ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(curve=voltage_list)
    <#elseif freemarker.params["handleFunction"] == "change_voltage">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(start=${freemarker.params["start"]}, end=${freemarker.params["end"]}, step=${freemarker.params["step"]}, interval=${freemarker.params["interval"]})
    <#elseif freemarker.params["handleFunction"] == "set_voltage">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(voltage=${freemarker.params["voltage"]})
    <#else>
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(current=${freemarker.params["current"]})
    </#if>
</#list>
</#if>
<#if elementAction??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 元素操作(ElementAction)                                  #
    #                                                                                                                  #
    ####################################################################################################################
<#list elementAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    <#if freemarker.params["handleFunction"] == "swipe_element">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(from_element=${freemarker.params["element1"]}, to_element=${freemarker.params["element2"]})
    <#elseif freemarker.params["handleFunction"] == "click">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]})
    <#elseif freemarker.params["handleFunction"] == "press">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]}, duration=${freemarker.params["slideTimes"]})
    <#elseif freemarker.params["handleFunction"] == "double_click">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["element1"]})
    <#else>
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(swipe_element=${freemarker.params["element1"]}, locator=${freemarker.params["element2"]}<#if freemarker.params["slideTimes"]!="0">, swipe_time=${freemarker.params["slideTimes"]}</#if>)
    </#if>
</#list>
</#if>
<#if relayAction??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 继电器操作(RelayAction)                                  #
    #                                                                                                                  #
    ####################################################################################################################
<#list relayAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(<#if freemarker.params["channelIndex"]!="0">channel=${freemarker.params["channelIndex"]}</#if>)
</#list>
</#if>
<#if screenOpsAction??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 屏幕操作(ScreenOpsAction)                                #
    #                                                                                                                  #
    ####################################################################################################################
<#list screenOpsAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    <#if freemarker.params["handleName"] == "air_condition">
        <#if freemarker.params["handleFunction"] == "swipe">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(display=${freemarker.params["displayId"]}, start_x=${freemarker.params["startX"]}, start_y=${freemarker.params["startY"]}, end_x=${freemarker.params["endX"]}, end_y=${freemarker.params["endY"]}, continue_time=${freemarker.params["continueTimes"]})
        <#elseif freemarker.params["handleFunction"] == "click">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(display=${freemarker.params["displayId"]}, x=${freemarker.params["x"]}, y=${freemarker.params["y"]})
        <#elseif freemarker.params["handleFunction"] == "press">
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(display=${freemarker.params["displayId"]}, x=${freemarker.params["x"]}, y=${freemarker.params["y"]}, continue_time=${freemarker.params["continueTimes"]})
        </#if>
    <#else>
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(x=${freemarker.params["x"]}, y=${freemarker.params["y"]})
    </#if>
</#list>
</#if>
<#if screenShotAction??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 截图操作(ScreenShotAction)                               #
    #                                                                                                                  #
    ####################################################################################################################
<#list screenShotAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    <#if freemarker.params["handleName"] == "air_condition">
    image_name = f<#noparse>"</#noparse>${freemarker.params["imageName"]?lower_case}<#noparse>"</#noparse>
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(image_name=image_name, count=${freemarker.params["count"]}, interval_time=interval_time, display=${freemarker.params["displayId"]})
    <#else>
    image_name = f<#noparse>"</#noparse>${r'{android_screen_shot_path}'}/${freemarker.params["imageName"]}__<#noparse>"</#noparse>
    for i in range(${freemarker.params["count"]}):
        ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(remote_file=f<#noparse>"</#noparse>${r'{'}image_name${r'}'}${r'{'}i + 1${r'}'}<#noparse>"</#noparse>, display=${freemarker.params["displayId"]}, device_id=android_device_id)
    </#if>
</#list>
</#if>
<#if canAction??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> Can信号(CanAction)                                      #
    #                                                                                                                  #
    ####################################################################################################################
<#list canAction as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(msg=${freemarker.params["messageId"]}, signal=${r'{'}<#list freemarker.pairs as signal><#noparse>"</#noparse>${signal.first}<#noparse>"</#noparse>: ${signal.second}<#if signal_index != freemarker.pairs?size -1>, </#if></#list>${r'}'})
</#list>
</#if>
<#if canCompare??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> CAN信号对比(CanCompare)                                  #
    #                                                                                                                  #
    ####################################################################################################################
<#list canCompare as freemarker>

def ${freemarker.params["functionName"]?lower_case}(stack) -> tuple:
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    return ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(stack=stack, msg_id=${freemarker.params["messageId"]}, sig_name=<#noparse>"</#noparse>${freemarker.params["signalName"]}<#noparse>"</#noparse>, expect_value=${freemarker.params["expectValue"]}<#if freemarker.params["count"]!="0">, count=${freemarker.params["count"]}, exact=${freemarker.params["exact"]}</#if>),
</#list>
</#if>
<#if elementCompare??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> Android元素对比(ElementCompare)                          #
    #                                                                                                                  #
    ####################################################################################################################
<#list elementCompare as freemarker>

def ${freemarker.params["functionName"]?lower_case}() -> tuple:
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    return <#if freemarker.params["exist"] == "1">not </#if>${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(locator=${freemarker.params["locator"]}, timeout=${freemarker.params["timeout"]}),
</#list>
</#if>
<#if imageCompare??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 图片对比(ImageCompare)                                   #
    #                                                                                                                  #
    ####################################################################################################################
<#list imageCompare as freemarker>

def ${freemarker.params["functionName"]?lower_case}() -> tuple:
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    compare_property = CompareProperty()
    image_name = <#noparse>"</#noparse>${freemarker.params["imageName"]?lower_case}<#noparse>"</#noparse>
    dark = <#noparse>"</#noparse>${freemarker.params["dark"]?lower_case}<#noparse>"</#noparse>
    light = <#noparse>"</#noparse>${freemarker.params["light"]?lower_case}<#noparse>"</#noparse>
    compare_type = <#noparse>"</#noparse>${freemarker.params["compareType"]}<#noparse>"</#noparse>
    compare_property.set_value(name=image_name,
                               compare_type=compare_type,
                               screen_shot_images_path=screenshot,
                               light_template=<#noparse>"</#noparse>\\<#noparse>"</#noparse>.join([templates, light]),
                               dark_template=<#noparse>"</#noparse>\\<#noparse>"</#noparse>.join([templates, dark]),
                               positions=[${freemarker.params["position"]}],
                               similarity=${freemarker.params["similarity"]},
                               gray=${freemarker.params["gray"]},
                               gray_threshold=${freemarker.params["threshold"]})
    result = ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(compare_property)
    files = ${freemarker.params["handleName"]}.${freemarker.params["handleFunctionSub"]}(compare_property, temp)
    return result, files, compare_property.type, compare_property.light_template, compare_property.dark_template
</#list>
</#if>
<#if information??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 信息保存(Information)                                    #
    #                                                                                                                  #
    ####################################################################################################################
<#list information as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    attr = ElementAttributeEnum.from_value(<#noparse>"</#noparse>${freemarker.params["elementAttribute"]}<#noparse>"</#noparse>)
    info = ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(${freemarker.params["locator"]})[attr]
    return info
</#list>
</#if>
<#if informationCompare??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 信息对比(InformationCompare)                             #
    #                                                                                                                  #
    ####################################################################################################################
<#list informationCompare as freemarker>

def ${freemarker.params["functionName"]?lower_case}() -> tuple:
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    attr = ElementAttributeEnum.from_value(<#noparse>"</#noparse>${freemarker.params["elementAttribute"]}<#noparse>"</#noparse>)
    info = ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(${freemarker.params["locator"]})[attr]
    return ${freemarker.params["target"]}() == info,
</#list>
</#if>
<#if common??>

    ####################################################################################################################
    #                                                                                                                  #
    #                                           用于生成表格 --> 公共函数(Common)                                         #
    #                                                                                                                  #
    ####################################################################################################################
<#list common as freemarker>

def ${freemarker.params["functionName"]?lower_case}():
    """
    <#list freemarker.comment as line>
    ${line}
    </#list>
    """
    ${freemarker.params["handleName"]}.${freemarker.params["handleFunction"]}(<#if freemarker.locator??>locator={<#list freemarker.locator as param><#noparse>"</#noparse>${param.first}<#noparse>"</#noparse>: <#noparse>"</#noparse>${param.second}<#noparse>"</#noparse><#if param_index != freemarker.locator?size -1>, </#if>}</#list><#if freemarker.swipeElement??>, swipe_element={<#list freemarker.swipeElement as param><#noparse>"</#noparse>${param.first}<#noparse>"</#noparse>: <#noparse>"</#noparse>${param.second}<#noparse>"</#noparse><#if param_index != freemarker.swipeElement?size -1>, </#if></#list>}</#if></#if><#if freemarker.pairs??>, <#list freemarker.pairs as param>${param.first}=<#if param.first == "text"><#noparse>"</#noparse>${param.second}<#noparse>"</#noparse><#else>${param.second}</#if><#if param_index != freemarker.pairs?size -1>, </#if></#list></#if>)
</#list>
</#if>