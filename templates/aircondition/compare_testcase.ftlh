# -*- coding:utf-8 -*-
# -------------------------------------------------------------------------------
#  Copyright (C), 2016-2020, China TSP, All rights reserved
# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import os

import allure
import pytest

from automotive import Utils
from ${projectName}.can.director import Director
from ${projectName}.config.${testCaseName} import compare

common_path = Utils.get_folder_path("common", "src", os.getcwd())
sys.path.append(common_path)

from logger import logger

result_path = Utils.get_folder_path("result", "src", os.getcwd())
save_path = "\\".join([result_path, "screenshot"])
report_path = "\\".join([result_path, "report"])
template_path = "\\".join([result_path, "template"])
paths = save_path, report_path, template_path

tester = Director(compare, paths=paths)


@pytest.fixture(scope='class', autouse=True)
@allure.suite('创建测试套件')
def suite():
    with allure.step('打开CAN盒子'):
        pass
    yield suite
    with allure.step('关闭CAN盒子'):
        pass


@allure.feature('${objects[0].category?lower_case}')
@pytest.mark.usefixtures("suite")
class Test${objects[0].category?cap_first}(object):
<#list objects as testcase>

    @allure.title("${testcase.description}")
    def test_${testcase.functionName?lower_case}(self):
        """
            Description:
                ${testcase.description}
            PreCondition:
            <#list testcase.preCondition as description>
                ${description}
            </#list>
            Steps:
            <#list testcase.steps as step>
                ${step}
            </#list>
            Expect Result:
            <#list testcase.expect as expect>
                ${expect}
            </#list>
        """
        # 前置条件
        with allure.step('前置条件'):
            pass
        # 执行步骤
        with allure.step('操作步骤'):
            pass
        # 期望结果
        with allure.step('期望结果'):
            <#list testcase.expectFunctions as function>
            template_light_file, template_dark_file = tester.compare.get_origin_images("${function.second?lower_case}")
            <#if function.first?upper_case == "LIGHT">
            allure.attach.file(template_light_file, '原图', allure.attachment_type.BMP)
            result, images = tester.compare.compare_image_light("${function.second?lower_case}")
            <#elseif function.first?upper_case =="DARK">
            allure.attach.file(template_dark_file, '原图', allure.attachment_type.BMP)
            result, images = tester.compare.compare_image_dark("${function.second?lower_case}")
            <#elseif function.first?upper_case =="BLINK">
            allure.attach.file(template_light_file, '原图1', allure.attachment_type.BMP)
            allure.attach.file(template_dark_file, '原图2', allure.attachment_type.BMP)
            result, images = tester.compare.compare_image_blink("${function.second?lower_case}")
            </#if>
            if result:
                for image in images:
                    image_name = image.split("\\")[-1]
                    allure.attach.file(image, '结果截图[' + image_name + ']', allure.attachment_type.BMP)
                assert True
            else:
                for image in images:
                    image_name = image.split("\\")[-1]
                    allure.attach.file(image, '失败截图[' + image_name + ']', allure.attachment_type.BMP)
                assert False
            </#list>
</#list>