# -*- coding:utf-8 -*-
# -------------------------------------------------------------------------------
#  Copyright (C), 2016-2020, China TSP, All rights reserved
# -------------------------------------------------------------------------------
# Name:        ${fileName}.py
# Purpose:     The file is automatically generated by tools.
# Author:      CD QA Team
# Created:     ${createDate}
# -------------------------------------------------------------------------------
import os
import shutil

from loguru import logger
from .image_property import ImageProperty
from automotive import Utils, Images


class ImageCompare(object):
    """
        图片对比，用于自动化仪表测试的图片对比。
    """
    def __init__(self, template_path: str, screen_shot_path: str, report_path: str, temp_path: str,
                 image: Images, config: (str, dict), color: tuple = (255, 255, 255),
                 default_image_name: str = "1_screen_shot.bmp"):
        """

        :param template_path: 标准图片存放的路径

        :param screen_shot_path: 截图文件存放的路径

        :param report_path: 报告文件存放的路径。

        :param config: 测试生成的json/py文件
        """
        # 标准图片存放的路径
        self.__template_path = self.__check_path(template_path)
        # 截图文件存放的路径
        self.__screen_shot_path = self.__check_path(screen_shot_path)
        # 报告文件存放的路径
        self.__report_path = self.__check_path(report_path, True)
        # 临时文件存放的路径
        self.__temp_path = self.__check_path(temp_path, True)
        # 画框的颜色 ，默认蓝色（用于区域）
        self.__color = color
        # 实例化Image工具对象
        self.__images = image
        if config:
            # 配置文件读取出来的对象
            self.__properties = self.__get_property_from_json(config)
        # 默认截图图片
        self.__default_image = default_image_name

    @staticmethod
    def __check_path(path: str, create: bool = False) -> str:
        """
        检查路径是否存在并返回路径

        :param path: 传入的路径字符串

        :param create: 是否创建文件夹
        """
        if not os.path.exists(path):
            # 跳过表示不创建文件夹，抛出异常
            if create:
                logger.debug(f"create path[{path}]")
                os.makedirs(path)
                return path
            else:
                raise ValueError(f"path[{path}] is not exist, please check it")
        else:
            return path

    @staticmethod
    def __get_property_from_json(config: (str, dict)) -> dict:
        """
        Json文件中读取的内容转换成property对象
        :param config: json文件或者内容
        :return: property字典
        """
        properties = dict()
        if isinstance(config, str):
            config = Utils().get_json_obj(config)
        for name, content in config.items():
            image_property = ImageProperty()
            image_property.set_value(name, content)
            properties[name] = image_property
        return properties

    def __compare(self, template_image: str, screen_shot_image: str, image_property: ImageProperty,
                  i: int) -> bool:
        """
        对比单张图片单个或者多个区域

        :param template_image: 标准图片

        :param screen_shot_image: 截图图片

        :param image_property: 对比参数

        :return:
            True 大于阈值
            False 小于阈值
        """

        position = self.__images.convert_position(image_property.x[i], image_property.y[i],
                                                  width=image_property.width[i],
                                                  height=image_property.height[i])
        result = self.__images.find_best_result_by_position(template_image, screen_shot_image, position,
                                                            threshold=image_property.threshold / 100)
        # 二次对比
        if result is None:
            same, diff = self.__images.compare_by_matrix_in_same_area(template_image, screen_shot_image, position,
                                                                      position)
            return same > image_property.threshold
        logger.info(f"template[{template_image}]compare screenshot[{screen_shot_image}] result = {result}")
        return result is not None

    def __compare_image(self, template_image: str, screen_shot_image: str, image_property: ImageProperty,
                        is_break=False) -> bool:
        """
        对比单张图片的多个区域

        :param template_image:  标准图片

        :param screen_shot_image: 截图图片

        :param image_property:  对比参数

        :return:
            True: 每个区域都大于阈值

            False: 有至少一个区域小于阈值
        """
        count = 0
        area_size = len(image_property.x)
        for i in range(area_size):
            if self.__compare(template_image, screen_shot_image, image_property, i):
                if is_break:
                    return True
                else:
                    count += 1
        return count == area_size

    def __compare_images(self, template_image: str, screen_shot_images: (list, tuple), image_property: ImageProperty,
                         is_break=False) -> bool:
        """
        对比多张图片(根据image_property.x来判断是单区域对比还是多区域对比)

        :param template_image: 标准图片

        :param screen_shot_images: 截图图片集合

        :param image_property:对比参数

        :return:
            True: 相同

            False: 不相同
        """
        for image in screen_shot_images:
            logger.debug(f"image is {image}")
            if self.__compare_image(template_image, image, image_property, is_break):
                return True
        return False

    def __get_dark_light_file(self, image_property: ImageProperty) -> tuple:
        """
       获取亮图暗图绝对位置

       :param image_property: 对比属性

       :return: 亮图和暗图的绝对路径
        """
        # 标准图片亮图
        template_light_file = "\\".join([self.__template_path, image_property.pic_template_light])
        # 标准图片暗图
        template_dark_file = "\\".join([self.__template_path, image_property.pic_template_dark])
        logger.debug(f"template_light_file = {template_light_file} and template_dark_file = {template_dark_file}")
        return template_light_file, template_dark_file

    def __light_or_dark_compare(self, image_property: ImageProperty, template_file: str, images: list) -> tuple:
        """
        亮图或者暗图对比
        :param image_property: 对比参数

        :param template_file: 标注图片路径

        :param images:  要对比的图片集合

        :return:  图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        result = self.__compare_images(template_file, images, image_property)
        handle_images = self.__copy_screen_shot_images(images, image_property)
        return result, handle_images

    def __get_screen_shot_images(self, image_property: ImageProperty) -> list:
        """
        遍历文件夹取出名字是测试用例名字的图片
        :return: 筛选出来的图片
        """
        # 在screen_shot_path路径中查找
        images = list(map(lambda x: self.__screen_shot_path + "\\" + x, os.listdir(self.__screen_shot_path)))
        # todo 有可能截图名字需要修改
        filter_images = list(filter(lambda x: x.find(image_property.name.lower()) >= 0, images))
        logger.debug(f"function {image_property.name} contain {len(filter_images)}")
        return filter_images

    def __compare_template_image(self, image_property: ImageProperty, is_light=True) -> tuple:
        """
        对比不闪烁的图片[根据image_property的is_area属性来判断是区域截图还是全屏截图]

        :param image_property: 对比属性

        :param is_light: 亮图，暗图开关

        :return: 图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        template_light_file, template_dark_file = self.__get_dark_light_file(image_property)
        images = self.__get_screen_shot_images(image_property)
        if is_light:
            return self.__light_or_dark_compare(image_property, template_light_file, images)
        else:
            return self.__light_or_dark_compare(image_property, template_dark_file, images)

    def __compare_blink(self, image_property: ImageProperty) -> tuple:
        """
        对比闪烁图片

        :param image_property: 对比属性

        :return: 图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        template_light_file, template_dark_file = self.__get_dark_light_file(image_property)
        # 一定只有一张图片
        screen_shot_image_list = self.__get_screen_shot_images(image_property)
        # 先比较亮的图片
        light_flag = self.__compare_images(template_light_file, screen_shot_image_list, image_property, is_break=True)
        # 亮图是否找到
        if light_flag:
            dark_flag = self.__compare_images(template_dark_file, screen_shot_image_list, image_property, is_break=True)
        # 没有找到亮图
        else:
            return False, self.__copy_screen_shot_images(screen_shot_image_list, image_property)
        # 暗图是否找到
        if dark_flag:
            logger.info("PASS, Remove the picture.")
            return True, self.__copy_screen_shot_images(screen_shot_image_list, image_property)
        else:
            return False, self.__copy_screen_shot_images(screen_shot_image_list, image_property)

    def __rectangle_image(self, image: str, image_property: ImageProperty):
        """
        在图片上的截图区域画框

        :param image: 图片

        :param image_property: 对比属性
        """
        positions = []
        size = len(image_property.x)
        for i in range(size):
            positions.append(self.__images.convert_position(image_property.x[i], image_property.y[i],
                                                            width=image_property.width[i],
                                                            height=image_property.height[i]))
        self.__images.rectangle_image(image, positions, self.__color)

    def __copy_screen_shot_images(self, images: list, image_property: ImageProperty) -> list:
        """
        根据截图的图片，进行完成图片对比后，进行画框处理并拷贝文件到self._report_path中

        :param images: 截图图片列表

        :param image_property: 对比属性
        """
        copy_images = []
        # 把图片拷贝到__log_image_path里面
        for index, image in enumerate(images):
            copy_image = "\\".join([self.__temp_path, f"{Utils().get_time_as_string()}_{index}.bmp"])
            copy_images.append(copy_image)
            # 先要处理image文件，在截图区域上画框
            self.__rectangle_image(image, image_property)
            logger.info(f"copy [{image}] to [{copy_image}]")
            shutil.copy(image, copy_image)
        return copy_images

    def compare_image_light(self, name: str) -> tuple:
        """
        对比亮图

        :param name: 函数名字

        :return: 图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        return self.__compare_template_image(self.__properties[name], True)

    def compare_image_dark(self, name: str) -> tuple:
        """
        对比暗图

        :param name: 函数名字

        :return: 图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        return self.__compare_template_image(self.__properties[name], False)

    def compare_image_blink(self, name: str) -> tuple:
        """
        对比闪烁图片

        :param name: 函数名字

        :return: 图片对比结果和拷贝到结果文件夹的路径（用于结果展示)
        """
        return self.__compare_blink(self.__properties[name])

    def get_origin_images(self, name: str) -> tuple:
        """
        获取原始图片

        :param name: 函数名字

        :return: 亮图和暗图的绝对路径
        """
        return self.__get_dark_light_file(self.__properties[name])